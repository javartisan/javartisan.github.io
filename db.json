{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"source/lee/index/lzs7.png","path":"lee/index/lzs7.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/lee/index/lzs.png","path":"lee/index/lzs.png","modified":0,"renderable":0},{"_id":"source/lee/index/lzs4.png","path":"lee/index/lzs4.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/lee/index/lzs5.png","path":"lee/index/lzs5.png","modified":0,"renderable":0},{"_id":"source/lee/index/lzs6.png","path":"lee/index/lzs6.png","modified":0,"renderable":0},{"_id":"source/lee/index/lzs2.png","path":"lee/index/lzs2.png","modified":0,"renderable":0},{"_id":"source/lee/index/lzs3.png","path":"lee/index/lzs3.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"bb4cf262e86e8c70a03c3b5e4376790f85f6479d","modified":1561892360844},{"_id":"themes/landscape/.DS_Store","hash":"7445542236268209fcaed9c2a15c9efca784a099","modified":1561867803381},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1561866437267},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1561866437243},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1561866437244},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1561866437267},{"_id":"themes/landscape/_config.yml","hash":"4b0802ca5220588fc9afb907e6f2b4ded3f0983c","modified":1561892574669},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1561866437268},{"_id":"source/_posts/hello-world.md","hash":"0b7cb23274f29af240f449b23cefcc5355f89290","modified":1561885217139},{"_id":"source/_posts/java-index.md","hash":"6b716894d6b3a1b74da00d2f2668b9dd94804214","modified":1561891392389},{"_id":"source/_posts/mybatis-index.md","hash":"7512aac03590a16de5019aee80dc65254c251761","modified":1561884599233},{"_id":"source/_posts/spark-index.md","hash":"deb9f14885d21bf791ed661c50edb21f9b5fc7a5","modified":1561891833887},{"_id":"source/_posts/spring-datasouce-config.md","hash":"17d412ef00173d25db188ececc3cd5cdb4816533","modified":1561892367628},{"_id":"source/javartisan/index.md","hash":"90dd1c9b90faf730b85692ed3682086d159af0b1","modified":1561884876673},{"_id":"source/lee/index.md","hash":"fbd2c7159650def34a55ff3a89818498253af79d","modified":1561884637248},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1561866437265},{"_id":"themes/landscape/languages/default.yml","hash":"8e2b306cb9a003dd3851ef22ba854ac5b7ee09b9","modified":1561885157286},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1561866437265},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1561866437266},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1561866437266},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1561866437265},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1561866437267},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1561866437266},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1561866437265},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1561866437266},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1561866437267},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1561866437266},{"_id":"themes/landscape/layout/.DS_Store","hash":"2ad6be499aaff946a9323f781ef9283819c39c6e","modified":1561867798373},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1561866437245},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1561866437244},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1561866437245},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1561866437245},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1561866437250},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1561866437244},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1561866437245},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1561866437268},{"_id":"themes/landscape/source/.DS_Store","hash":"1f911ee4df71106270461f6291884f2477ef8364","modified":1561867809012},{"_id":"source/_posts/java-index/enum_method.png","hash":"c31e183a59b61d68f83faf26a8b0a68436858a8e","modified":1561889492758},{"_id":"themes/landscape/layout/_partial/.DS_Store","hash":"fe3a1b2077d038bf1c41e6251a1ecc40f9440fd1","modified":1561867793301},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1561866437249},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1561866437247},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1561866437248},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1561866437250},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6c8077694bafffbee695c935b452d46dbc06fcbc","modified":1561871546016},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1561866437248},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1561866437248},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1561866437249},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"aa7b471087b16b482e7ca30ce25af0586ac7c63a","modified":1561880321708},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1561866437249},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1561866437250},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1561866437251},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1561866437251},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1561866437252},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1561866437251},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1561866437251},{"_id":"themes/landscape/source/css/.DS_Store","hash":"49f6d028e876144962e6866ade223031867aaf46","modified":1561868296841},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1561866437263},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1561866437258},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1561866437261},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1561866437254},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1561866437255},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1561866437254},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1561866437253},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1561866437253},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1561866437254},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1561866437253},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1561866437254},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1561866437264},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1561866437253},{"_id":"source/_posts/spring-datasouce-config/neo-datasouce-error.png","hash":"7801dee16ad06e76e809cef889ef796eb8e69a8c","modified":1561891966314},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1561866437246},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1561866437247},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1561866437246},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1561866437247},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1561866437247},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1561866437246},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1561866437260},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1561866437259},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1561866437261},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1561866437259},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1561866437260},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1561866437259},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1561866437260},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1561866437261},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1561866437259},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1561866437260},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1561866437257},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1561866437257},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1561866437262},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1561866437263},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1561866437263},{"_id":"themes/landscape/source/css/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1561868212880},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1561866437255},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1561866437256},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1561866437256},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1561866437255},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1561866437256},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1561866437256},{"_id":"source/_posts/hello-world/lzs7.png","hash":"f6b40f7767d7d9bac7da80fad13ecff2d0790763","modified":1561878754000},{"_id":"source/_posts/java-index/enum_code.png","hash":"69bb784df9af607ab0d93f9fdde234777a8dd5bc","modified":1561886534247},{"_id":"source/lee/index/lzs7.png","hash":"f6b40f7767d7d9bac7da80fad13ecff2d0790763","modified":1561875365000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1561866437262},{"_id":"source/_posts/hello-world/lzs.png","hash":"7b259d2beeef223232e150fa1274bb91effe9594","modified":1561878754000},{"_id":"source/_posts/hello-world/lzs4.png","hash":"d40282f512dc72d8deb6d6ae77f84d8df959dbaf","modified":1561878754000},{"_id":"source/lee/index/lzs.png","hash":"7b259d2beeef223232e150fa1274bb91effe9594","modified":1561875539000},{"_id":"source/lee/index/lzs4.png","hash":"d40282f512dc72d8deb6d6ae77f84d8df959dbaf","modified":1561875310000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1561866437262},{"_id":"source/_posts/hello-world/lzs5.png","hash":"b3f356cc5b9f2d8ff0141f9b92f6b05fc9d0213b","modified":1561878754000},{"_id":"source/_posts/hello-world/lzs6.png","hash":"f2f04c2ed9d47b4731dc932e085f93beb8084d2e","modified":1561878754000},{"_id":"source/lee/index/lzs5.png","hash":"b3f356cc5b9f2d8ff0141f9b92f6b05fc9d0213b","modified":1561875325000},{"_id":"source/lee/index/lzs6.png","hash":"f2f04c2ed9d47b4731dc932e085f93beb8084d2e","modified":1561875349000},{"_id":"source/_posts/hello-world/lzs2.png","hash":"f255d06c931cfe4370a91c4901cb8260e84e09bb","modified":1561878754000},{"_id":"source/_posts/hello-world/lzs3.png","hash":"af6ce7f48f6401d2c43e261b6b101b2363fb1d80","modified":1561878754000},{"_id":"source/lee/index/lzs2.png","hash":"f255d06c931cfe4370a91c4901cb8260e84e09bb","modified":1561875561000},{"_id":"source/lee/index/lzs3.png","hash":"af6ce7f48f6401d2c43e261b6b101b2363fb1d80","modified":1561875276000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"75f8189be5e32d59696607999642bb6297de86a5","modified":1500150792000},{"_id":"public/javartisan/index.html","hash":"c03814081f9b784ff1e41bdbbf64bfd04d82bb8e","modified":1561892592677},{"_id":"public/lee/index.html","hash":"49ee10942b7375be39e6e092fdb5f1e342af9c19","modified":1561892592677},{"_id":"public/2019/06/30/hello-world/index.html","hash":"efefd189faa38e63539d6d49b9371f0870c62739","modified":1561892592677},{"_id":"public/2019/06/30/mybatis-index/index.html","hash":"39cf8cd4ef851b420586d84b64654c6548d0f33c","modified":1561892592677},{"_id":"public/2019/06/30/spark-index/index.html","hash":"d1ea6a799518e55fc443061d45d862365ee93067","modified":1561892592677},{"_id":"public/archives/index.html","hash":"c14c84262c7b46867d5113236401ee00f9af6344","modified":1561892592677},{"_id":"public/archives/2019/index.html","hash":"b94d38b4fd96beff79078af12534e202a5bab463","modified":1561892592678},{"_id":"public/archives/2019/06/index.html","hash":"54af620c309a5c560cb7a57ac265070dcc8ad5e4","modified":1561892592678},{"_id":"public/categories/Jonathan-Lee/index.html","hash":"2cdb0576a716a1f5388d572332ca109776da60ae","modified":1561892592678},{"_id":"public/categories/Java/index.html","hash":"60705a3c1f383ccc75669002d7b67d69c13e27f5","modified":1561892592678},{"_id":"public/categories/Mybatis/index.html","hash":"3d13c84fd6be657a36dc59879584dfa4a089e65d","modified":1561892592678},{"_id":"public/categories/Spark/index.html","hash":"baf858add0210d3a582ce45cede4ef6011633524","modified":1561892592678},{"_id":"public/categories/Spring/index.html","hash":"56dbbfb69ea3496c5bb332d90d1a154c64fc98fa","modified":1561892592678},{"_id":"public/2019/06/30/spring-datasouce-config/index.html","hash":"313b3d8336f58db364c5b2321fc7623af7af88f2","modified":1561892592678},{"_id":"public/2019/06/30/java-index/index.html","hash":"a651190a46ad822c6d12346dd0332c69ca3df7eb","modified":1561892592678},{"_id":"public/index.html","hash":"3d5a7321bbb7b10b6ef8263ff9935e07cc736e3a","modified":1561892592678},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1561892592688},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1561892592688},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1561892592688},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1561892592688},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1561892592688},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1561892592688},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1561892592688},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1561892592688},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1561892592688},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1561892592689},{"_id":"public/2019/06/30/java-index/enum_method.png","hash":"c31e183a59b61d68f83faf26a8b0a68436858a8e","modified":1561892592689},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1561892593002},{"_id":"public/2019/06/30/spring-datasouce-config/neo-datasouce-error.png","hash":"7801dee16ad06e76e809cef889ef796eb8e69a8c","modified":1561892593003},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1561892593040},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1561892593040},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1561892593041},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1561892593041},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1561892593041},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1561892593041},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1561892593041},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1561892593041},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1561892593041},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1561892593041},{"_id":"public/lee/index/lzs7.png","hash":"f6b40f7767d7d9bac7da80fad13ecff2d0790763","modified":1561892593045},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1561892593045},{"_id":"public/2019/06/30/hello-world/lzs7.png","hash":"f6b40f7767d7d9bac7da80fad13ecff2d0790763","modified":1561892593045},{"_id":"public/2019/06/30/java-index/enum_code.png","hash":"69bb784df9af607ab0d93f9fdde234777a8dd5bc","modified":1561892593046},{"_id":"public/lee/index/lzs.png","hash":"7b259d2beeef223232e150fa1274bb91effe9594","modified":1561892593051},{"_id":"public/lee/index/lzs4.png","hash":"d40282f512dc72d8deb6d6ae77f84d8df959dbaf","modified":1561892593051},{"_id":"public/2019/06/30/hello-world/lzs.png","hash":"7b259d2beeef223232e150fa1274bb91effe9594","modified":1561892593051},{"_id":"public/2019/06/30/hello-world/lzs4.png","hash":"d40282f512dc72d8deb6d6ae77f84d8df959dbaf","modified":1561892593051},{"_id":"public/lee/index/lzs5.png","hash":"b3f356cc5b9f2d8ff0141f9b92f6b05fc9d0213b","modified":1561892593053},{"_id":"public/lee/index/lzs6.png","hash":"f2f04c2ed9d47b4731dc932e085f93beb8084d2e","modified":1561892593054},{"_id":"public/2019/06/30/hello-world/lzs6.png","hash":"f2f04c2ed9d47b4731dc932e085f93beb8084d2e","modified":1561892593054},{"_id":"public/2019/06/30/hello-world/lzs5.png","hash":"b3f356cc5b9f2d8ff0141f9b92f6b05fc9d0213b","modified":1561892593054},{"_id":"public/lee/index/lzs2.png","hash":"f255d06c931cfe4370a91c4901cb8260e84e09bb","modified":1561892593058},{"_id":"public/lee/index/lzs3.png","hash":"af6ce7f48f6401d2c43e261b6b101b2363fb1d80","modified":1561892593058},{"_id":"public/2019/06/30/hello-world/lzs2.png","hash":"f255d06c931cfe4370a91c4901cb8260e84e09bb","modified":1561892593058},{"_id":"public/2019/06/30/hello-world/lzs3.png","hash":"af6ce7f48f6401d2c43e261b6b101b2363fb1d80","modified":1561892593059},{"_id":"public/css/images/banner.jpg","hash":"75f8189be5e32d59696607999642bb6297de86a5","modified":1561892593084}],"Category":[{"name":"Jonathan Lee","_id":"cjxiuit4k00044x2d8qmf4kjo"},{"name":"Java","_id":"cjxiuit4q00084x2dwvx6v8zw"},{"name":"Mybatis","_id":"cjxiuit4r000a4x2dkw3iupso"},{"name":"Spark","_id":"cjxiuit4s000c4x2dz69r64ei"},{"name":"Spring","_id":"cjxiuit4t000e4x2dgk6dz1ut"}],"Data":[],"Page":[{"title":"Javartisan","date":"2019-06-30T08:49:23.000Z","_content":"","source":"javartisan/index.md","raw":"---\ntitle: Javartisan\ndate: 2019-06-30 16:49:23\n---\n","updated":"2019-06-30T08:54:36.673Z","path":"javartisan/index.html","comments":1,"layout":"page","_id":"cjxiuit4h00014x2dca09chzn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"致匠心","_content":"\n<center>  \n<font face=\"微软雅黑\">  \n\n<br/>\n<br/>\n<br/>  \n\n![](./lzs.png)\n人生很多事急不得 你得等它自己熟\n我20出头入行 30年写了不到300首歌\n当然算是量少的\n我想\n一个人有多少天份 跟他出什么样的作品\n并无太大关联\n天分我还是有的\n我有能耐住性子的天份\n\n![](./lzs2.png)\n\n人不能孤独的活着\n之所以有作品 是为了沟通\n透过作品去告诉人家心里的想法\n眼中看世界的样子\n所在意的 珍惜的\n所以 作品就是自己\n\n![](./lzs3.png)\n\n所有精工制作的对象\n最珍贵 不能替代的就只有一个字 人\n人有情怀 有信念 有态度\n所以 没有理所当然\n就是要在各种变量可能之中\n仍然做到最好\n\n![](./lzs4.png)\n\n世界再吵杂\n匠人的内心绝对必须是安静安定的\n面对大自然赠与的素材\n我得先成就它\n它才有可能成就我\n\n![](./lzs5.png)\n\n我知道\n手艺人往往意味着\n固执 缓慢 少量 劳作\n但是这些背后所隐含的是\n专注 技艺 对完美的追求\n所以\n我们宁愿这样 也必须这样 也一直这样\n为什么\n我们要保留我们最珍贵的 最引以为傲的\n\n![](./lzs6.png)\n\n一辈子,总是还得让一些善意执念推着往前\n我们因此能愿意去听从内心的安排\n专注做点东西 至少对得起光阴岁月\n其他的就留给时间去说吧!\n![](./lzs7.png)\n</font>\n</center>      ","source":"lee/index.md","raw":"---\ntitle: 致匠心\n---\n\n<center>  \n<font face=\"微软雅黑\">  \n\n<br/>\n<br/>\n<br/>  \n\n![](./lzs.png)\n人生很多事急不得 你得等它自己熟\n我20出头入行 30年写了不到300首歌\n当然算是量少的\n我想\n一个人有多少天份 跟他出什么样的作品\n并无太大关联\n天分我还是有的\n我有能耐住性子的天份\n\n![](./lzs2.png)\n\n人不能孤独的活着\n之所以有作品 是为了沟通\n透过作品去告诉人家心里的想法\n眼中看世界的样子\n所在意的 珍惜的\n所以 作品就是自己\n\n![](./lzs3.png)\n\n所有精工制作的对象\n最珍贵 不能替代的就只有一个字 人\n人有情怀 有信念 有态度\n所以 没有理所当然\n就是要在各种变量可能之中\n仍然做到最好\n\n![](./lzs4.png)\n\n世界再吵杂\n匠人的内心绝对必须是安静安定的\n面对大自然赠与的素材\n我得先成就它\n它才有可能成就我\n\n![](./lzs5.png)\n\n我知道\n手艺人往往意味着\n固执 缓慢 少量 劳作\n但是这些背后所隐含的是\n专注 技艺 对完美的追求\n所以\n我们宁愿这样 也必须这样 也一直这样\n为什么\n我们要保留我们最珍贵的 最引以为傲的\n\n![](./lzs6.png)\n\n一辈子,总是还得让一些善意执念推着往前\n我们因此能愿意去听从内心的安排\n专注做点东西 至少对得起光阴岁月\n其他的就留给时间去说吧!\n![](./lzs7.png)\n</font>\n</center>      ","date":"2019-06-30T08:50:37.253Z","updated":"2019-06-30T08:50:37.248Z","path":"lee/index.html","comments":1,"layout":"page","_id":"cjxiuit4j00034x2dehkzvytg","content":"<center>  \n<font face=\"微软雅黑\">  \n\n<br>\n<br>\n<br>  \n\n<p><img src=\"/lee/index/lzs.png\" alt><br>人生很多事急不得 你得等它自己熟<br>我20出头入行 30年写了不到300首歌<br>当然算是量少的<br>我想<br>一个人有多少天份 跟他出什么样的作品<br>并无太大关联<br>天分我还是有的<br>我有能耐住性子的天份</p>\n<p><img src=\"/lee/index/lzs2.png\" alt></p>\n<p>人不能孤独的活着<br>之所以有作品 是为了沟通<br>透过作品去告诉人家心里的想法<br>眼中看世界的样子<br>所在意的 珍惜的<br>所以 作品就是自己</p>\n<p><img src=\"/lee/index/lzs3.png\" alt></p>\n<p>所有精工制作的对象<br>最珍贵 不能替代的就只有一个字 人<br>人有情怀 有信念 有态度<br>所以 没有理所当然<br>就是要在各种变量可能之中<br>仍然做到最好</p>\n<p><img src=\"/lee/index/lzs4.png\" alt></p>\n<p>世界再吵杂<br>匠人的内心绝对必须是安静安定的<br>面对大自然赠与的素材<br>我得先成就它<br>它才有可能成就我</p>\n<p><img src=\"/lee/index/lzs5.png\" alt></p>\n<p>我知道<br>手艺人往往意味着<br>固执 缓慢 少量 劳作<br>但是这些背后所隐含的是<br>专注 技艺 对完美的追求<br>所以<br>我们宁愿这样 也必须这样 也一直这样<br>为什么<br>我们要保留我们最珍贵的 最引以为傲的</p>\n<p><img src=\"/lee/index/lzs6.png\" alt></p>\n<p>一辈子,总是还得让一些善意执念推着往前<br>我们因此能愿意去听从内心的安排<br>专注做点东西 至少对得起光阴岁月<br>其他的就留给时间去说吧!<br><img src=\"/lee/index/lzs7.png\" alt><br></p></font><p></p>\n</center>      ","site":{"data":{}},"excerpt":"","more":"<center>  \n<font face=\"微软雅黑\">  \n\n<br>\n<br>\n<br>  \n\n<p><img src=\"/lee/index/lzs.png\" alt><br>人生很多事急不得 你得等它自己熟<br>我20出头入行 30年写了不到300首歌<br>当然算是量少的<br>我想<br>一个人有多少天份 跟他出什么样的作品<br>并无太大关联<br>天分我还是有的<br>我有能耐住性子的天份</p>\n<p><img src=\"/lee/index/lzs2.png\" alt></p>\n<p>人不能孤独的活着<br>之所以有作品 是为了沟通<br>透过作品去告诉人家心里的想法<br>眼中看世界的样子<br>所在意的 珍惜的<br>所以 作品就是自己</p>\n<p><img src=\"/lee/index/lzs3.png\" alt></p>\n<p>所有精工制作的对象<br>最珍贵 不能替代的就只有一个字 人<br>人有情怀 有信念 有态度<br>所以 没有理所当然<br>就是要在各种变量可能之中<br>仍然做到最好</p>\n<p><img src=\"/lee/index/lzs4.png\" alt></p>\n<p>世界再吵杂<br>匠人的内心绝对必须是安静安定的<br>面对大自然赠与的素材<br>我得先成就它<br>它才有可能成就我</p>\n<p><img src=\"/lee/index/lzs5.png\" alt></p>\n<p>我知道<br>手艺人往往意味着<br>固执 缓慢 少量 劳作<br>但是这些背后所隐含的是<br>专注 技艺 对完美的追求<br>所以<br>我们宁愿这样 也必须这样 也一直这样<br>为什么<br>我们要保留我们最珍贵的 最引以为傲的</p>\n<p><img src=\"/lee/index/lzs6.png\" alt></p>\n<p>一辈子,总是还得让一些善意执念推着往前<br>我们因此能愿意去听从内心的安排<br>专注做点东西 至少对得起光阴岁月<br>其他的就留给时间去说吧!<br><img src=\"/lee/index/lzs7.png\" alt><br></p></font><p></p>\n</center>      "}],"Post":[{"title":"致匠心","_content":"\n<center>  \n<font face=\"微软雅黑\">  \n\n<br/>\n<br/>\n<br/>  \n\n![](./lzs.png)\n人生很多事急不得 你得等它自己熟\n我20出头入行 30年写了不到300首歌\n当然算是量少的\n我想\n一个人有多少天份 跟他出什么样的作品\n并无太大关联\n天分我还是有的\n我有能耐住性子的天份\n\n![](./lzs2.png)\n\n人不能孤独的活着\n之所以有作品 是为了沟通\n透过作品去告诉人家心里的想法\n眼中看世界的样子\n所在意的 珍惜的\n所以 作品就是自己\n\n![](./lzs3.png)\n\n所有精工制作的对象\n最珍贵 不能替代的就只有一个字 人\n人有情怀 有信念 有态度\n所以 没有理所当然\n就是要在各种变量可能之中\n仍然做到最好\n\n![](./lzs4.png)\n\n世界再吵杂\n匠人的内心绝对必须是安静安定的\n面对大自然赠与的素材\n我得先成就它\n它才有可能成就我\n\n![](./lzs5.png)\n\n我知道\n手艺人往往意味着\n固执 缓慢 少量 劳作\n但是这些背后所隐含的是\n专注 技艺 对完美的追求\n所以\n我们宁愿这样 也必须这样 也一直这样\n为什么\n我们要保留我们最珍贵的 最引以为傲的\n\n![](./lzs6.png)\n\n一辈子,总是还得让一些善意执念推着往前\n我们因此能愿意去听从内心的安排\n专注做点东西 至少对得起光阴岁月\n其他的就留给时间去说吧!\n![](./lzs7.png)\n</font>\n</center> ","source":"_posts/hello-world.md","raw":"---\ntitle: 致匠心\ncategories: Jonathan Lee\n---\n\n<center>  \n<font face=\"微软雅黑\">  \n\n<br/>\n<br/>\n<br/>  \n\n![](./lzs.png)\n人生很多事急不得 你得等它自己熟\n我20出头入行 30年写了不到300首歌\n当然算是量少的\n我想\n一个人有多少天份 跟他出什么样的作品\n并无太大关联\n天分我还是有的\n我有能耐住性子的天份\n\n![](./lzs2.png)\n\n人不能孤独的活着\n之所以有作品 是为了沟通\n透过作品去告诉人家心里的想法\n眼中看世界的样子\n所在意的 珍惜的\n所以 作品就是自己\n\n![](./lzs3.png)\n\n所有精工制作的对象\n最珍贵 不能替代的就只有一个字 人\n人有情怀 有信念 有态度\n所以 没有理所当然\n就是要在各种变量可能之中\n仍然做到最好\n\n![](./lzs4.png)\n\n世界再吵杂\n匠人的内心绝对必须是安静安定的\n面对大自然赠与的素材\n我得先成就它\n它才有可能成就我\n\n![](./lzs5.png)\n\n我知道\n手艺人往往意味着\n固执 缓慢 少量 劳作\n但是这些背后所隐含的是\n专注 技艺 对完美的追求\n所以\n我们宁愿这样 也必须这样 也一直这样\n为什么\n我们要保留我们最珍贵的 最引以为傲的\n\n![](./lzs6.png)\n\n一辈子,总是还得让一些善意执念推着往前\n我们因此能愿意去听从内心的安排\n专注做点东西 至少对得起光阴岁月\n其他的就留给时间去说吧!\n![](./lzs7.png)\n</font>\n</center> ","slug":"hello-world","published":1,"date":"2019-06-30T09:00:17.139Z","updated":"2019-06-30T09:00:17.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxiuit4d00004x2d2z2srhzr","content":"<center>  \n<font face=\"微软雅黑\">  \n\n<br>\n<br>\n<br>  \n\n<p><img src=\"/2019/06/30/hello-world/lzs.png\" alt><br>人生很多事急不得 你得等它自己熟<br>我20出头入行 30年写了不到300首歌<br>当然算是量少的<br>我想<br>一个人有多少天份 跟他出什么样的作品<br>并无太大关联<br>天分我还是有的<br>我有能耐住性子的天份</p>\n<p><img src=\"/2019/06/30/hello-world/lzs2.png\" alt></p>\n<p>人不能孤独的活着<br>之所以有作品 是为了沟通<br>透过作品去告诉人家心里的想法<br>眼中看世界的样子<br>所在意的 珍惜的<br>所以 作品就是自己</p>\n<p><img src=\"/2019/06/30/hello-world/lzs3.png\" alt></p>\n<p>所有精工制作的对象<br>最珍贵 不能替代的就只有一个字 人<br>人有情怀 有信念 有态度<br>所以 没有理所当然<br>就是要在各种变量可能之中<br>仍然做到最好</p>\n<p><img src=\"/2019/06/30/hello-world/lzs4.png\" alt></p>\n<p>世界再吵杂<br>匠人的内心绝对必须是安静安定的<br>面对大自然赠与的素材<br>我得先成就它<br>它才有可能成就我</p>\n<p><img src=\"/2019/06/30/hello-world/lzs5.png\" alt></p>\n<p>我知道<br>手艺人往往意味着<br>固执 缓慢 少量 劳作<br>但是这些背后所隐含的是<br>专注 技艺 对完美的追求<br>所以<br>我们宁愿这样 也必须这样 也一直这样<br>为什么<br>我们要保留我们最珍贵的 最引以为傲的</p>\n<p><img src=\"/2019/06/30/hello-world/lzs6.png\" alt></p>\n<p>一辈子,总是还得让一些善意执念推着往前<br>我们因此能愿意去听从内心的安排<br>专注做点东西 至少对得起光阴岁月<br>其他的就留给时间去说吧!<br><img src=\"/2019/06/30/hello-world/lzs7.png\" alt><br></p></font><p></p>\n</center> ","site":{"data":{}},"excerpt":"","more":"<center>  \n<font face=\"微软雅黑\">  \n\n<br>\n<br>\n<br>  \n\n<p><img src=\"/2019/06/30/hello-world/lzs.png\" alt><br>人生很多事急不得 你得等它自己熟<br>我20出头入行 30年写了不到300首歌<br>当然算是量少的<br>我想<br>一个人有多少天份 跟他出什么样的作品<br>并无太大关联<br>天分我还是有的<br>我有能耐住性子的天份</p>\n<p><img src=\"/2019/06/30/hello-world/lzs2.png\" alt></p>\n<p>人不能孤独的活着<br>之所以有作品 是为了沟通<br>透过作品去告诉人家心里的想法<br>眼中看世界的样子<br>所在意的 珍惜的<br>所以 作品就是自己</p>\n<p><img src=\"/2019/06/30/hello-world/lzs3.png\" alt></p>\n<p>所有精工制作的对象<br>最珍贵 不能替代的就只有一个字 人<br>人有情怀 有信念 有态度<br>所以 没有理所当然<br>就是要在各种变量可能之中<br>仍然做到最好</p>\n<p><img src=\"/2019/06/30/hello-world/lzs4.png\" alt></p>\n<p>世界再吵杂<br>匠人的内心绝对必须是安静安定的<br>面对大自然赠与的素材<br>我得先成就它<br>它才有可能成就我</p>\n<p><img src=\"/2019/06/30/hello-world/lzs5.png\" alt></p>\n<p>我知道<br>手艺人往往意味着<br>固执 缓慢 少量 劳作<br>但是这些背后所隐含的是<br>专注 技艺 对完美的追求<br>所以<br>我们宁愿这样 也必须这样 也一直这样<br>为什么<br>我们要保留我们最珍贵的 最引以为傲的</p>\n<p><img src=\"/2019/06/30/hello-world/lzs6.png\" alt></p>\n<p>一辈子,总是还得让一些善意执念推着往前<br>我们因此能愿意去听从内心的安排<br>专注做点东西 至少对得起光阴岁月<br>其他的就留给时间去说吧!<br><img src=\"/2019/06/30/hello-world/lzs7.png\" alt><br></p></font><p></p>\n</center> "},{"title":"Java枚举类型在RPC调用时由于版本不一致遇见的问题","date":"2019-06-30T08:52:09.000Z","_content":"\n\n\n### 枚举值在RPC调用时反序列化与序列化的值不一致\n\n\n\n- **场景**\n\n  一次业务联调测试时候发现，客户端以RPC方式调用服务提供方执行作业，作业类型存在多种，作业类型的区分使用的是Java枚举类表示，在每次调用服务接口时候传入枚举值以表示要执行的作业类型。\n\n  \n\n- **问题发现**\n  \n\n进行联调测试时候发现每次客户端传入的类型与服务提供方真实执行的作业类型不匹配，便开始进行寻找原因！当时怀疑是服务提供方的业务代码判断逻辑存在问题，经过查看服务提供方代码发现并没有问题。可能的猜想并没有解决问题，因此只能进行Debug寻找原因。将服务提供方代码Clone下来在本地的测试RPC环境进行调试，调试发现在服务提供方反序列化之后枚举值就是错误的，因此可以将问题锁定在枚举值类的序列化上。因此只好跟踪序列化与反序列化参数代码，序列化代码：\n\n  ```java\n      public void writeEnum(Enum<?> value) {\n          if (value == null) {\n              // null\n              this.writeNull();\n          } else {\n              String strVal = null;\n              if (this.writeEnumUsingName && !this.writeEnumUsingToString) {\n                  // 判断是否是根据名字序列化\n                  strVal = value.name();\n              } else if (this.writeEnumUsingToString) {\n                  // 是否使用tostring序列化枚举值\n                  strVal = value.toString();\n              }\n  \n              if (strVal != null) {\n                  // 不为空，则可能是根据名字或者toString的方式序列化\n                  char quote = this.isEnabled(SerializerFeature.UseSingleQuotes) ? 39 : 34;\n                  this.write(quote);\n                  this.write(strVal);\n                  this.write(quote);\n              } else {\n                  // 根据ordinal值序列化(ordinal：序列数)\n                  this.writeInt(value.ordinal());\n              }\n  \n          }\n      }\n  ```\n\n  *跟进java.lang.Enum#ordinal方法发现原来是JDK提供的方法，文档描述如下：*\n\n  ```java\n  Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero). Most programmers will have no use for this method. It is designed for use by sophisticated enum-based data structures, such as java.util.EnumSet and java.util.EnumMap.\n  ```\n\n  *返回枚举值的的序数，也就是声明时候的位置序号，序号从0开始计数。大多数程序员不会使用这个方法，此方法的设计主要是为了那些基于枚举的复杂数据类型，例如：EnumSet与EnumMap。*\n\n  \n\n  到序列化代码this.writeInt(value.ordinal()),此时就可以明白了，RPC调用参数序列化枚举值是根据枚举值的序号进行序列化的（**注意：**序列化机制是跟序列化框架强相关的，一定要根据自己的序列化框架进行实际分析问题）。此时客户端序列化已经完成，接下来便开始Debug服务提供方的代码，经过Debug发现服务提供方法的枚举值数组中的size与客户端不一致，经过对比源码发现：       ![](./enum_code.png)  \n\n  客户端与服务端的类库版本不一致，而又由于枚举值序列化与反序列化是按照ordinal值进行的，因此便可以确定问题产生原因了，通过重新发布类库此问题得以解决！\n\n  \n\n\n\n###  枚举值中ordinal的用法\n\n- Java**枚举类型中存在的方法**\n\n  ![](./enum_method.png)\n\n- **ordinal值的用法**\n\n  通过JDK文档，可以发现ordinal主要是为了基于枚举的复杂数据结构使用，在JDK中有EnumSet与EnumMap。\n\n  **EnumSet：**\n\n  是JDK的一个工具类，主要用于枚举值的Set相关操作，例如：\n\n  ```java\n  import java.util.EnumMap;\n  import java.util.EnumSet;\n  \n  public enum JobType {\n      SPARK_JOB, HADOOP_JOB, FLINK_JOB;\n  }\n  \n  enum JobType2 {\n      SPARK_JOB, HADOOP_JOB, FLINK_JOB;;\n  }\n  \n  class Boot {\n      public static void main(String[] args) {\n          // 将指定类型枚举值的所有值存初始化到EnumSet中\n          EnumSet es = EnumSet.allOf(JobType.class);\n          System.out.println(es.contains(JobType.SPARK_JOB));\n          System.out.println(es.contains(JobType2.SPARK_JOB));\n      }\n  }\n  ```\n\n  EnumSet是一个抽象类，是不支持自定义实现的（内部有一个默认权限的addAll方法无法重写），JDK提供的方法已经可以满足我们的需要了。\n\n  **EnumMap:**\n\n  是枚举值有关Map的操作，实例代码:\n\n  ```java\npublic enum JobType {\n      SPARK_JOB, HADOOP_JOB, FLINK_JOB;\n  }\n  \n  enum JobType2 {\n      SPARK_JOB, HADOOP_JOB, FLINK_JOB;;\n  }\n  \n  class Boot {\n      public static void main(String[] args) {\n          //构造器参数是一个泛型参数，表示该EnumMap的key只能是JobType2枚举类型\n          EnumMap  em = new EnumMap(JobType2.class);\n          em.put(JobType2.SPARK_JOB, new Object());\n          // 报错\n          em.put(JobType.SPARK_JOB, new Object());\n          System.out.println(em);\n      }\n  }\n  ```\n  \n  \n\n\n\n\n\n\n\n**注意：**\n\n上面只是针具具体某一个序列化框架而言，具体问题一定要具体分析！","source":"_posts/java-index.md","raw":"---\ntitle: Java枚举类型在RPC调用时由于版本不一致遇见的问题\ndate: 2019-06-30 16:52:09\ncategories: Java\n---\n\n\n\n### 枚举值在RPC调用时反序列化与序列化的值不一致\n\n\n\n- **场景**\n\n  一次业务联调测试时候发现，客户端以RPC方式调用服务提供方执行作业，作业类型存在多种，作业类型的区分使用的是Java枚举类表示，在每次调用服务接口时候传入枚举值以表示要执行的作业类型。\n\n  \n\n- **问题发现**\n  \n\n进行联调测试时候发现每次客户端传入的类型与服务提供方真实执行的作业类型不匹配，便开始进行寻找原因！当时怀疑是服务提供方的业务代码判断逻辑存在问题，经过查看服务提供方代码发现并没有问题。可能的猜想并没有解决问题，因此只能进行Debug寻找原因。将服务提供方代码Clone下来在本地的测试RPC环境进行调试，调试发现在服务提供方反序列化之后枚举值就是错误的，因此可以将问题锁定在枚举值类的序列化上。因此只好跟踪序列化与反序列化参数代码，序列化代码：\n\n  ```java\n      public void writeEnum(Enum<?> value) {\n          if (value == null) {\n              // null\n              this.writeNull();\n          } else {\n              String strVal = null;\n              if (this.writeEnumUsingName && !this.writeEnumUsingToString) {\n                  // 判断是否是根据名字序列化\n                  strVal = value.name();\n              } else if (this.writeEnumUsingToString) {\n                  // 是否使用tostring序列化枚举值\n                  strVal = value.toString();\n              }\n  \n              if (strVal != null) {\n                  // 不为空，则可能是根据名字或者toString的方式序列化\n                  char quote = this.isEnabled(SerializerFeature.UseSingleQuotes) ? 39 : 34;\n                  this.write(quote);\n                  this.write(strVal);\n                  this.write(quote);\n              } else {\n                  // 根据ordinal值序列化(ordinal：序列数)\n                  this.writeInt(value.ordinal());\n              }\n  \n          }\n      }\n  ```\n\n  *跟进java.lang.Enum#ordinal方法发现原来是JDK提供的方法，文档描述如下：*\n\n  ```java\n  Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero). Most programmers will have no use for this method. It is designed for use by sophisticated enum-based data structures, such as java.util.EnumSet and java.util.EnumMap.\n  ```\n\n  *返回枚举值的的序数，也就是声明时候的位置序号，序号从0开始计数。大多数程序员不会使用这个方法，此方法的设计主要是为了那些基于枚举的复杂数据类型，例如：EnumSet与EnumMap。*\n\n  \n\n  到序列化代码this.writeInt(value.ordinal()),此时就可以明白了，RPC调用参数序列化枚举值是根据枚举值的序号进行序列化的（**注意：**序列化机制是跟序列化框架强相关的，一定要根据自己的序列化框架进行实际分析问题）。此时客户端序列化已经完成，接下来便开始Debug服务提供方的代码，经过Debug发现服务提供方法的枚举值数组中的size与客户端不一致，经过对比源码发现：       ![](./enum_code.png)  \n\n  客户端与服务端的类库版本不一致，而又由于枚举值序列化与反序列化是按照ordinal值进行的，因此便可以确定问题产生原因了，通过重新发布类库此问题得以解决！\n\n  \n\n\n\n###  枚举值中ordinal的用法\n\n- Java**枚举类型中存在的方法**\n\n  ![](./enum_method.png)\n\n- **ordinal值的用法**\n\n  通过JDK文档，可以发现ordinal主要是为了基于枚举的复杂数据结构使用，在JDK中有EnumSet与EnumMap。\n\n  **EnumSet：**\n\n  是JDK的一个工具类，主要用于枚举值的Set相关操作，例如：\n\n  ```java\n  import java.util.EnumMap;\n  import java.util.EnumSet;\n  \n  public enum JobType {\n      SPARK_JOB, HADOOP_JOB, FLINK_JOB;\n  }\n  \n  enum JobType2 {\n      SPARK_JOB, HADOOP_JOB, FLINK_JOB;;\n  }\n  \n  class Boot {\n      public static void main(String[] args) {\n          // 将指定类型枚举值的所有值存初始化到EnumSet中\n          EnumSet es = EnumSet.allOf(JobType.class);\n          System.out.println(es.contains(JobType.SPARK_JOB));\n          System.out.println(es.contains(JobType2.SPARK_JOB));\n      }\n  }\n  ```\n\n  EnumSet是一个抽象类，是不支持自定义实现的（内部有一个默认权限的addAll方法无法重写），JDK提供的方法已经可以满足我们的需要了。\n\n  **EnumMap:**\n\n  是枚举值有关Map的操作，实例代码:\n\n  ```java\npublic enum JobType {\n      SPARK_JOB, HADOOP_JOB, FLINK_JOB;\n  }\n  \n  enum JobType2 {\n      SPARK_JOB, HADOOP_JOB, FLINK_JOB;;\n  }\n  \n  class Boot {\n      public static void main(String[] args) {\n          //构造器参数是一个泛型参数，表示该EnumMap的key只能是JobType2枚举类型\n          EnumMap  em = new EnumMap(JobType2.class);\n          em.put(JobType2.SPARK_JOB, new Object());\n          // 报错\n          em.put(JobType.SPARK_JOB, new Object());\n          System.out.println(em);\n      }\n  }\n  ```\n  \n  \n\n\n\n\n\n\n\n**注意：**\n\n上面只是针具具体某一个序列化框架而言，具体问题一定要具体分析！","slug":"java-index","published":1,"updated":"2019-06-30T10:43:12.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxiuit4i00024x2dt66f4sth","content":"<h3 id=\"枚举值在RPC调用时反序列化与序列化的值不一致\"><a href=\"#枚举值在RPC调用时反序列化与序列化的值不一致\" class=\"headerlink\" title=\"枚举值在RPC调用时反序列化与序列化的值不一致\"></a>枚举值在RPC调用时反序列化与序列化的值不一致</h3><ul>\n<li><p><strong>场景</strong></p>\n<p>一次业务联调测试时候发现，客户端以RPC方式调用服务提供方执行作业，作业类型存在多种，作业类型的区分使用的是Java枚举类表示，在每次调用服务接口时候传入枚举值以表示要执行的作业类型。</p>\n</li>\n</ul>\n<ul>\n<li><strong>问题发现</strong></li>\n</ul>\n<p>进行联调测试时候发现每次客户端传入的类型与服务提供方真实执行的作业类型不匹配，便开始进行寻找原因！当时怀疑是服务提供方的业务代码判断逻辑存在问题，经过查看服务提供方代码发现并没有问题。可能的猜想并没有解决问题，因此只能进行Debug寻找原因。将服务提供方代码Clone下来在本地的测试RPC环境进行调试，调试发现在服务提供方反序列化之后枚举值就是错误的，因此可以将问题锁定在枚举值类的序列化上。因此只好跟踪序列化与反序列化参数代码，序列化代码：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeEnum</span><span class=\"params\">(Enum&lt;?&gt; value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// null</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.writeNull();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        String strVal = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.writeEnumUsingName &amp;&amp; !<span class=\"keyword\">this</span>.writeEnumUsingToString) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断是否是根据名字序列化</span></span><br><span class=\"line\">            strVal = value.name();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.writeEnumUsingToString) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 是否使用tostring序列化枚举值</span></span><br><span class=\"line\">            strVal = value.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strVal != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不为空，则可能是根据名字或者toString的方式序列化</span></span><br><span class=\"line\">            <span class=\"keyword\">char</span> quote = <span class=\"keyword\">this</span>.isEnabled(SerializerFeature.UseSingleQuotes) ? <span class=\"number\">39</span> : <span class=\"number\">34</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.write(quote);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.write(strVal);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.write(quote);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 根据ordinal值序列化(ordinal：序列数)</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.writeInt(value.ordinal());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <em>跟进java.lang.Enum#ordinal方法发现原来是JDK提供的方法，文档描述如下：</em></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Returns the ordinal of <span class=\"keyword\">this</span> enumeration <span class=\"title\">constant</span> <span class=\"params\">(its position in its <span class=\"keyword\">enum</span> declaration, where the initial constant is assigned an ordinal of zero)</span>. Most programmers will have no use <span class=\"keyword\">for</span> <span class=\"keyword\">this</span> method. It is designed <span class=\"keyword\">for</span> use by sophisticated <span class=\"keyword\">enum</span>-based data structures, such as java.util.EnumSet and java.util.EnumMap.</span></span><br></pre></td></tr></table></figure>\n\n<p>  <em>返回枚举值的的序数，也就是声明时候的位置序号，序号从0开始计数。大多数程序员不会使用这个方法，此方法的设计主要是为了那些基于枚举的复杂数据类型，例如：EnumSet与EnumMap。</em></p>\n<p>  到序列化代码this.writeInt(value.ordinal()),此时就可以明白了，RPC调用参数序列化枚举值是根据枚举值的序号进行序列化的（<strong>注意：</strong>序列化机制是跟序列化框架强相关的，一定要根据自己的序列化框架进行实际分析问题）。此时客户端序列化已经完成，接下来便开始Debug服务提供方的代码，经过Debug发现服务提供方法的枚举值数组中的size与客户端不一致，经过对比源码发现：       <img src=\"/2019/06/30/java-index/enum_code.png\" alt>  </p>\n<p>  客户端与服务端的类库版本不一致，而又由于枚举值序列化与反序列化是按照ordinal值进行的，因此便可以确定问题产生原因了，通过重新发布类库此问题得以解决！</p>\n<h3 id=\"枚举值中ordinal的用法\"><a href=\"#枚举值中ordinal的用法\" class=\"headerlink\" title=\"枚举值中ordinal的用法\"></a>枚举值中ordinal的用法</h3><ul>\n<li><p>Java<strong>枚举类型中存在的方法</strong></p>\n<p><img src=\"/2019/06/30/java-index/enum_method.png\" alt></p>\n</li>\n<li><p><strong>ordinal值的用法</strong></p>\n<p>通过JDK文档，可以发现ordinal主要是为了基于枚举的复杂数据结构使用，在JDK中有EnumSet与EnumMap。</p>\n<p><strong>EnumSet：</strong></p>\n<p>是JDK的一个工具类，主要用于枚举值的Set相关操作，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.EnumMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.EnumSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> JobType &#123;</span><br><span class=\"line\">    SPARK_JOB, HADOOP_JOB, FLINK_JOB;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> JobType2 &#123;</span><br><span class=\"line\">    SPARK_JOB, HADOOP_JOB, FLINK_JOB;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boot</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将指定类型枚举值的所有值存初始化到EnumSet中</span></span><br><span class=\"line\">        EnumSet es = EnumSet.allOf(JobType.class);</span><br><span class=\"line\">        System.out.println(es.contains(JobType.SPARK_JOB));</span><br><span class=\"line\">        System.out.println(es.contains(JobType2.SPARK_JOB));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>EnumSet是一个抽象类，是不支持自定义实现的（内部有一个默认权限的addAll方法无法重写），JDK提供的方法已经可以满足我们的需要了。</p>\n<p><strong>EnumMap:</strong></p>\n<p>是枚举值有关Map的操作，实例代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> JobType &#123;</span><br><span class=\"line\">      SPARK_JOB, HADOOP_JOB, FLINK_JOB;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">enum</span> JobType2 &#123;</span><br><span class=\"line\">      SPARK_JOB, HADOOP_JOB, FLINK_JOB;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boot</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//构造器参数是一个泛型参数，表示该EnumMap的key只能是JobType2枚举类型</span></span><br><span class=\"line\">          EnumMap  em = <span class=\"keyword\">new</span> EnumMap(JobType2.class);</span><br><span class=\"line\">          em.put(JobType2.SPARK_JOB, <span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">          <span class=\"comment\">// 报错</span></span><br><span class=\"line\">          em.put(JobType.SPARK_JOB, <span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">          System.out.println(em);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n</li>\n</ul>\n<p><strong>注意：</strong></p>\n<p>上面只是针具具体某一个序列化框架而言，具体问题一定要具体分析！</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"枚举值在RPC调用时反序列化与序列化的值不一致\"><a href=\"#枚举值在RPC调用时反序列化与序列化的值不一致\" class=\"headerlink\" title=\"枚举值在RPC调用时反序列化与序列化的值不一致\"></a>枚举值在RPC调用时反序列化与序列化的值不一致</h3><ul>\n<li><p><strong>场景</strong></p>\n<p>一次业务联调测试时候发现，客户端以RPC方式调用服务提供方执行作业，作业类型存在多种，作业类型的区分使用的是Java枚举类表示，在每次调用服务接口时候传入枚举值以表示要执行的作业类型。</p>\n</li>\n</ul>\n<ul>\n<li><strong>问题发现</strong></li>\n</ul>\n<p>进行联调测试时候发现每次客户端传入的类型与服务提供方真实执行的作业类型不匹配，便开始进行寻找原因！当时怀疑是服务提供方的业务代码判断逻辑存在问题，经过查看服务提供方代码发现并没有问题。可能的猜想并没有解决问题，因此只能进行Debug寻找原因。将服务提供方代码Clone下来在本地的测试RPC环境进行调试，调试发现在服务提供方反序列化之后枚举值就是错误的，因此可以将问题锁定在枚举值类的序列化上。因此只好跟踪序列化与反序列化参数代码，序列化代码：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeEnum</span><span class=\"params\">(Enum&lt;?&gt; value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// null</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.writeNull();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        String strVal = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.writeEnumUsingName &amp;&amp; !<span class=\"keyword\">this</span>.writeEnumUsingToString) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断是否是根据名字序列化</span></span><br><span class=\"line\">            strVal = value.name();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.writeEnumUsingToString) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 是否使用tostring序列化枚举值</span></span><br><span class=\"line\">            strVal = value.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strVal != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不为空，则可能是根据名字或者toString的方式序列化</span></span><br><span class=\"line\">            <span class=\"keyword\">char</span> quote = <span class=\"keyword\">this</span>.isEnabled(SerializerFeature.UseSingleQuotes) ? <span class=\"number\">39</span> : <span class=\"number\">34</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.write(quote);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.write(strVal);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.write(quote);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 根据ordinal值序列化(ordinal：序列数)</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.writeInt(value.ordinal());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <em>跟进java.lang.Enum#ordinal方法发现原来是JDK提供的方法，文档描述如下：</em></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Returns the ordinal of <span class=\"keyword\">this</span> enumeration <span class=\"title\">constant</span> <span class=\"params\">(its position in its <span class=\"keyword\">enum</span> declaration, where the initial constant is assigned an ordinal of zero)</span>. Most programmers will have no use <span class=\"keyword\">for</span> <span class=\"keyword\">this</span> method. It is designed <span class=\"keyword\">for</span> use by sophisticated <span class=\"keyword\">enum</span>-based data structures, such as java.util.EnumSet and java.util.EnumMap.</span></span><br></pre></td></tr></table></figure>\n\n<p>  <em>返回枚举值的的序数，也就是声明时候的位置序号，序号从0开始计数。大多数程序员不会使用这个方法，此方法的设计主要是为了那些基于枚举的复杂数据类型，例如：EnumSet与EnumMap。</em></p>\n<p>  到序列化代码this.writeInt(value.ordinal()),此时就可以明白了，RPC调用参数序列化枚举值是根据枚举值的序号进行序列化的（<strong>注意：</strong>序列化机制是跟序列化框架强相关的，一定要根据自己的序列化框架进行实际分析问题）。此时客户端序列化已经完成，接下来便开始Debug服务提供方的代码，经过Debug发现服务提供方法的枚举值数组中的size与客户端不一致，经过对比源码发现：       <img src=\"/2019/06/30/java-index/enum_code.png\" alt>  </p>\n<p>  客户端与服务端的类库版本不一致，而又由于枚举值序列化与反序列化是按照ordinal值进行的，因此便可以确定问题产生原因了，通过重新发布类库此问题得以解决！</p>\n<h3 id=\"枚举值中ordinal的用法\"><a href=\"#枚举值中ordinal的用法\" class=\"headerlink\" title=\"枚举值中ordinal的用法\"></a>枚举值中ordinal的用法</h3><ul>\n<li><p>Java<strong>枚举类型中存在的方法</strong></p>\n<p><img src=\"/2019/06/30/java-index/enum_method.png\" alt></p>\n</li>\n<li><p><strong>ordinal值的用法</strong></p>\n<p>通过JDK文档，可以发现ordinal主要是为了基于枚举的复杂数据结构使用，在JDK中有EnumSet与EnumMap。</p>\n<p><strong>EnumSet：</strong></p>\n<p>是JDK的一个工具类，主要用于枚举值的Set相关操作，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.EnumMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.EnumSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> JobType &#123;</span><br><span class=\"line\">    SPARK_JOB, HADOOP_JOB, FLINK_JOB;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> JobType2 &#123;</span><br><span class=\"line\">    SPARK_JOB, HADOOP_JOB, FLINK_JOB;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boot</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将指定类型枚举值的所有值存初始化到EnumSet中</span></span><br><span class=\"line\">        EnumSet es = EnumSet.allOf(JobType.class);</span><br><span class=\"line\">        System.out.println(es.contains(JobType.SPARK_JOB));</span><br><span class=\"line\">        System.out.println(es.contains(JobType2.SPARK_JOB));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>EnumSet是一个抽象类，是不支持自定义实现的（内部有一个默认权限的addAll方法无法重写），JDK提供的方法已经可以满足我们的需要了。</p>\n<p><strong>EnumMap:</strong></p>\n<p>是枚举值有关Map的操作，实例代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> JobType &#123;</span><br><span class=\"line\">      SPARK_JOB, HADOOP_JOB, FLINK_JOB;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">enum</span> JobType2 &#123;</span><br><span class=\"line\">      SPARK_JOB, HADOOP_JOB, FLINK_JOB;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boot</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//构造器参数是一个泛型参数，表示该EnumMap的key只能是JobType2枚举类型</span></span><br><span class=\"line\">          EnumMap  em = <span class=\"keyword\">new</span> EnumMap(JobType2.class);</span><br><span class=\"line\">          em.put(JobType2.SPARK_JOB, <span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">          <span class=\"comment\">// 报错</span></span><br><span class=\"line\">          em.put(JobType.SPARK_JOB, <span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">          System.out.println(em);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n</li>\n</ul>\n<p><strong>注意：</strong></p>\n<p>上面只是针具具体某一个序列化框架而言，具体问题一定要具体分析！</p>\n"},{"title":"mybatis_index","date":"2019-06-30T08:49:29.000Z","_content":"","source":"_posts/mybatis-index.md","raw":"---\ntitle: mybatis_index\ndate: 2019-06-30 16:49:29\ncategories: Mybatis\n---\n","slug":"mybatis-index","published":1,"updated":"2019-06-30T08:49:59.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxiuit4m00054x2d8tcg6iy9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"spark_index","date":"2019-06-30T08:49:23.000Z","_content":"","source":"_posts/spark-index.md","raw":"---\ntitle: spark_index\ndate: 2019-06-30 16:49:23\ncategories: Spark\n---\n","slug":"spark-index","published":1,"updated":"2019-06-30T10:50:33.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxiuit4n00064x2dpv8gw128","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"整合多数据源Neo连接池时遇见的问题以及方案与收获","date":"2019-06-30T10:49:41.000Z","comments":1,"_content":"\n整合多数据源时候，配置neo数据库连接池时候使用的Druid连接池，遇见的问题以及问题的解决方案与收获简单记录一下\n\n### 方案1：\n\n配置信息：\n\n```xml\n<bean name=\"neoDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driver\" value=\"org.neo4j.jdbc.bolt.BoltDrive\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n</bean>\n```\n\n错误信息：\n\n```java\nCaused by: java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [java.sql.Driver] for property 'driver': no matching editors or conversion strategy found\n\tat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:302)\n\tat org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:576)\n\t... 89 more\n```\n\n很明显，无法将String转为Driver类型，看一下DataSource才知道原来driver配置的是Driver类型的实例，而不是Driver class名字，解决方案有两种。先介绍第一种：\n\n解决办法：\n\n将Driver以bean的方式注册到spring容器中，之后配置ref引用该Driver实例即可。代码如下:\n\n```xml\n    // 将Driver注册到Spring容器\n    <bean id=\"boltDriver\" class=\"org.neo4j.jdbc.bolt.BoltDriver\"></bean>\n \n    //ref引用该实例即可。\n    <bean name=\"neoDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driver\" ref=\"boltDriver\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n    </bean>\n```\n\n### 方案2：\n\n方案1中的DataSource是配置Driver类型成员；因此可以找到配置DriverName的变量配置即可，发现存在driverClass，可以配置driverClass设置Neo的Driver驱动名字即可。但是配置之后变红：\n\n![](./neo-datasouce-error.png)\n\n通过对比url发现，属性名字是setXXX方法中的XXX，该set方法名字为setDriverClassName(此处稍微翻阅源码就可以得知，Bean属性注入是使用set方法，而不是反射Field注入)。因此配置信息如下：\n\n```xml\n    <bean name=\"neoDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driverClassName\" value=\"org.neo4j.jdbc.bolt.BoltDrive\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n    </bean>\n```\n\n\n\n### 方案3：\n\n使用Mybatis自带的DataSource：org.apache.ibatis.datasource.pooled.PooledDataSource，该类中的driver是一个String类型设置驱动名字的成员：参见org.apache.ibatis.datasource.pooled.PooledDataSource#setDriver方法。 \n\n```xml\n    <bean name=\"neoDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driverClassName\" value=\"org.neo4j.jdbc.bolt.BoltDriver\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n    </bean>\n```\n\n\n\n### 总结：\n\n **收获1：**\n\n 对于常见的数据库连接池，不同的实现有着细微的差别，例如对于阿里Druid数据库连接池，对于常用的数据库，我们可以不用设置driver或者driverClassName属性，数据库连接池会根据url自动识别Driver，识别Driver方法com.alibaba.druid.util.JdbcUtils#getDriverClassName ；源码如下:\n\n```java\n \n    public static String getDriverClassName(String rawUrl) throws SQLException {\n        if (rawUrl.startsWith(\"jdbc:derby:\")) {\n            return \"org.apache.derby.jdbc.EmbeddedDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:mysql:\")) {\n            return MYSQL_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:log4jdbc:\")) {\n            return LOG4JDBC_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:mariadb:\")) {\n            return MARIADB_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:oracle:\") //\n                   || rawUrl.startsWith(\"JDBC:oracle:\")) {\n            return ORACLE_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:alibaba:oracle:\")) {\n            return ALI_ORACLE_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:microsoft:\")) {\n            return \"com.microsoft.jdbc.sqlserver.SQLServerDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:sqlserver:\")) {\n            return \"com.microsoft.sqlserver.jdbc.SQLServerDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:sybase:Tds:\")) {\n            return \"com.sybase.jdbc2.jdbc.SybDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:jtds:\")) {\n            return \"net.sourceforge.jtds.jdbc.Driver\";\n        } else if (rawUrl.startsWith(\"jdbc:fake:\") || rawUrl.startsWith(\"jdbc:mock:\")) {\n            return \"com.alibaba.druid.mock.MockDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:postgresql:\")) {\n            return POSTGRESQL_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:odps:\")) {\n            return ODPS_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:hsqldb:\")) {\n            return \"org.hsqldb.jdbcDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:db2:\")) {\n            return DB2_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:sqlite:\")) {\n            return \"org.sqlite.JDBC\";\n        } else if (rawUrl.startsWith(\"jdbc:ingres:\")) {\n            return \"com.ingres.jdbc.IngresDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:h2:\")) {\n            return H2_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:mckoi:\")) {\n            return \"com.mckoi.JDBCDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:cloudscape:\")) {\n            return \"COM.cloudscape.core.JDBCDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:informix-sqli:\")) {\n            return \"com.informix.jdbc.IfxDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:timesten:\")) {\n            return \"com.timesten.jdbc.TimesTenDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:as400:\")) {\n            return \"com.ibm.as400.access.AS400JDBCDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:sapdb:\")) {\n            return \"com.sap.dbtech.jdbc.DriverSapDB\";\n        } else if (rawUrl.startsWith(\"jdbc:JSQLConnect:\")) {\n            return \"com.jnetdirect.jsql.JSQLDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:JTurbo:\")) {\n            return \"com.newatlanta.jturbo.driver.Driver\";\n        } else if (rawUrl.startsWith(\"jdbc:firebirdsql:\")) {\n            return \"org.firebirdsql.jdbc.FBDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:interbase:\")) {\n            return \"interbase.interclient.Driver\";\n        } else if (rawUrl.startsWith(\"jdbc:pointbase:\")) {\n            return \"com.pointbase.jdbc.jdbcUniversalDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:edbc:\")) {\n            return \"ca.edbc.jdbc.EdbcDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:mimer:multi1:\")) {\n            return \"com.mimer.jdbc.Driver\";\n        } else if (rawUrl.startsWith(\"jdbc:dm:\")) {\n            return JdbcConstants.DM_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:kingbase:\")) {\n            return JdbcConstants.KINGBASE_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:hive:\")) {\n            return JdbcConstants.HIVE_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:hive2:\")) {\n            return JdbcConstants.HIVE_DRIVER;\n        } else {\n            throw new SQLException(\"unkow jdbc driver : \" + rawUrl);\n        }\n    }\n```\n\n阿里巴巴数据库连接池对常见的数据库都可以识别，但是对于neo没有支持，因此就需要配置driver或者driverClassName。\n\n\n\n**收获2：**\n\n对于数据库连接池的一些属性配置信息名字不是固定的，这些属性名字不是DataSource规范中的，而是跟各个具体DataSource实现强相关，因此配置时候可以查看DataSource具体实现进行配置。","source":"_posts/spring-datasouce-config.md","raw":"---\ntitle: 整合多数据源Neo连接池时遇见的问题以及方案与收获\ndate: 2019-06-30 18:49:41\ncomments: true\ncategories: Spring\n---\n\n整合多数据源时候，配置neo数据库连接池时候使用的Druid连接池，遇见的问题以及问题的解决方案与收获简单记录一下\n\n### 方案1：\n\n配置信息：\n\n```xml\n<bean name=\"neoDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driver\" value=\"org.neo4j.jdbc.bolt.BoltDrive\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n</bean>\n```\n\n错误信息：\n\n```java\nCaused by: java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [java.sql.Driver] for property 'driver': no matching editors or conversion strategy found\n\tat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:302)\n\tat org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:576)\n\t... 89 more\n```\n\n很明显，无法将String转为Driver类型，看一下DataSource才知道原来driver配置的是Driver类型的实例，而不是Driver class名字，解决方案有两种。先介绍第一种：\n\n解决办法：\n\n将Driver以bean的方式注册到spring容器中，之后配置ref引用该Driver实例即可。代码如下:\n\n```xml\n    // 将Driver注册到Spring容器\n    <bean id=\"boltDriver\" class=\"org.neo4j.jdbc.bolt.BoltDriver\"></bean>\n \n    //ref引用该实例即可。\n    <bean name=\"neoDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driver\" ref=\"boltDriver\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n    </bean>\n```\n\n### 方案2：\n\n方案1中的DataSource是配置Driver类型成员；因此可以找到配置DriverName的变量配置即可，发现存在driverClass，可以配置driverClass设置Neo的Driver驱动名字即可。但是配置之后变红：\n\n![](./neo-datasouce-error.png)\n\n通过对比url发现，属性名字是setXXX方法中的XXX，该set方法名字为setDriverClassName(此处稍微翻阅源码就可以得知，Bean属性注入是使用set方法，而不是反射Field注入)。因此配置信息如下：\n\n```xml\n    <bean name=\"neoDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driverClassName\" value=\"org.neo4j.jdbc.bolt.BoltDrive\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n    </bean>\n```\n\n\n\n### 方案3：\n\n使用Mybatis自带的DataSource：org.apache.ibatis.datasource.pooled.PooledDataSource，该类中的driver是一个String类型设置驱动名字的成员：参见org.apache.ibatis.datasource.pooled.PooledDataSource#setDriver方法。 \n\n```xml\n    <bean name=\"neoDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driverClassName\" value=\"org.neo4j.jdbc.bolt.BoltDriver\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n    </bean>\n```\n\n\n\n### 总结：\n\n **收获1：**\n\n 对于常见的数据库连接池，不同的实现有着细微的差别，例如对于阿里Druid数据库连接池，对于常用的数据库，我们可以不用设置driver或者driverClassName属性，数据库连接池会根据url自动识别Driver，识别Driver方法com.alibaba.druid.util.JdbcUtils#getDriverClassName ；源码如下:\n\n```java\n \n    public static String getDriverClassName(String rawUrl) throws SQLException {\n        if (rawUrl.startsWith(\"jdbc:derby:\")) {\n            return \"org.apache.derby.jdbc.EmbeddedDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:mysql:\")) {\n            return MYSQL_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:log4jdbc:\")) {\n            return LOG4JDBC_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:mariadb:\")) {\n            return MARIADB_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:oracle:\") //\n                   || rawUrl.startsWith(\"JDBC:oracle:\")) {\n            return ORACLE_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:alibaba:oracle:\")) {\n            return ALI_ORACLE_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:microsoft:\")) {\n            return \"com.microsoft.jdbc.sqlserver.SQLServerDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:sqlserver:\")) {\n            return \"com.microsoft.sqlserver.jdbc.SQLServerDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:sybase:Tds:\")) {\n            return \"com.sybase.jdbc2.jdbc.SybDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:jtds:\")) {\n            return \"net.sourceforge.jtds.jdbc.Driver\";\n        } else if (rawUrl.startsWith(\"jdbc:fake:\") || rawUrl.startsWith(\"jdbc:mock:\")) {\n            return \"com.alibaba.druid.mock.MockDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:postgresql:\")) {\n            return POSTGRESQL_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:odps:\")) {\n            return ODPS_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:hsqldb:\")) {\n            return \"org.hsqldb.jdbcDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:db2:\")) {\n            return DB2_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:sqlite:\")) {\n            return \"org.sqlite.JDBC\";\n        } else if (rawUrl.startsWith(\"jdbc:ingres:\")) {\n            return \"com.ingres.jdbc.IngresDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:h2:\")) {\n            return H2_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:mckoi:\")) {\n            return \"com.mckoi.JDBCDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:cloudscape:\")) {\n            return \"COM.cloudscape.core.JDBCDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:informix-sqli:\")) {\n            return \"com.informix.jdbc.IfxDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:timesten:\")) {\n            return \"com.timesten.jdbc.TimesTenDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:as400:\")) {\n            return \"com.ibm.as400.access.AS400JDBCDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:sapdb:\")) {\n            return \"com.sap.dbtech.jdbc.DriverSapDB\";\n        } else if (rawUrl.startsWith(\"jdbc:JSQLConnect:\")) {\n            return \"com.jnetdirect.jsql.JSQLDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:JTurbo:\")) {\n            return \"com.newatlanta.jturbo.driver.Driver\";\n        } else if (rawUrl.startsWith(\"jdbc:firebirdsql:\")) {\n            return \"org.firebirdsql.jdbc.FBDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:interbase:\")) {\n            return \"interbase.interclient.Driver\";\n        } else if (rawUrl.startsWith(\"jdbc:pointbase:\")) {\n            return \"com.pointbase.jdbc.jdbcUniversalDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:edbc:\")) {\n            return \"ca.edbc.jdbc.EdbcDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:mimer:multi1:\")) {\n            return \"com.mimer.jdbc.Driver\";\n        } else if (rawUrl.startsWith(\"jdbc:dm:\")) {\n            return JdbcConstants.DM_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:kingbase:\")) {\n            return JdbcConstants.KINGBASE_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:hive:\")) {\n            return JdbcConstants.HIVE_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:hive2:\")) {\n            return JdbcConstants.HIVE_DRIVER;\n        } else {\n            throw new SQLException(\"unkow jdbc driver : \" + rawUrl);\n        }\n    }\n```\n\n阿里巴巴数据库连接池对常见的数据库都可以识别，但是对于neo没有支持，因此就需要配置driver或者driverClassName。\n\n\n\n**收获2：**\n\n对于数据库连接池的一些属性配置信息名字不是固定的，这些属性名字不是DataSource规范中的，而是跟各个具体DataSource实现强相关，因此配置时候可以查看DataSource具体实现进行配置。","slug":"spring-datasouce-config","published":1,"updated":"2019-06-30T10:59:27.628Z","layout":"post","photos":[],"link":"","_id":"cjxiuit4p00074x2da7ncqulw","content":"<p>整合多数据源时候，配置neo数据库连接池时候使用的Druid连接池，遇见的问题以及问题的解决方案与收获简单记录一下</p>\n<h3 id=\"方案1：\"><a href=\"#方案1：\" class=\"headerlink\" title=\"方案1：\"></a>方案1：</h3><p>配置信息：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.neo4j.jdbc.bolt.BoltDrive\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>错误信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [java.sql.Driver] <span class=\"keyword\">for</span> property <span class=\"string\">'driver'</span>: no matching editors or conversion strategy found</span><br><span class=\"line\">\tat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:<span class=\"number\">302</span>)</span><br><span class=\"line\">\tat org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:<span class=\"number\">576</span>)</span><br><span class=\"line\">\t... <span class=\"number\">89</span> more</span><br></pre></td></tr></table></figure>\n\n<p>很明显，无法将String转为Driver类型，看一下DataSource才知道原来driver配置的是Driver类型的实例，而不是Driver class名字，解决方案有两种。先介绍第一种：</p>\n<p>解决办法：</p>\n<p>将Driver以bean的方式注册到spring容器中，之后配置ref引用该Driver实例即可。代码如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将Driver注册到Spring容器</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"boltDriver\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.neo4j.jdbc.bolt.BoltDriver\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">//ref引用该实例即可。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"boltDriver\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案2：\"><a href=\"#方案2：\" class=\"headerlink\" title=\"方案2：\"></a>方案2：</h3><p>方案1中的DataSource是配置Driver类型成员；因此可以找到配置DriverName的变量配置即可，发现存在driverClass，可以配置driverClass设置Neo的Driver驱动名字即可。但是配置之后变红：</p>\n<p><img src=\"/2019/06/30/spring-datasouce-config/neo-datasouce-error.png\" alt></p>\n<p>通过对比url发现，属性名字是setXXX方法中的XXX，该set方法名字为setDriverClassName(此处稍微翻阅源码就可以得知，Bean属性注入是使用set方法，而不是反射Field注入)。因此配置信息如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.neo4j.jdbc.bolt.BoltDrive\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案3：\"><a href=\"#方案3：\" class=\"headerlink\" title=\"方案3：\"></a>方案3：</h3><p>使用Mybatis自带的DataSource：org.apache.ibatis.datasource.pooled.PooledDataSource，该类中的driver是一个String类型设置驱动名字的成员：参见org.apache.ibatis.datasource.pooled.PooledDataSource#setDriver方法。 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.neo4j.jdbc.bolt.BoltDriver\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p> <strong>收获1：</strong></p>\n<p> 对于常见的数据库连接池，不同的实现有着细微的差别，例如对于阿里Druid数据库连接池，对于常用的数据库，我们可以不用设置driver或者driverClassName属性，数据库连接池会根据url自动识别Driver，识别Driver方法com.alibaba.druid.util.JdbcUtils#getDriverClassName ；源码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getDriverClassName</span><span class=\"params\">(String rawUrl)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:derby:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"org.apache.derby.jdbc.EmbeddedDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:mysql:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MYSQL_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:log4jdbc:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LOG4JDBC_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:mariadb:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MARIADB_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:oracle:\"</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">               || rawUrl.startsWith(<span class=\"string\">\"JDBC:oracle:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ORACLE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:alibaba:oracle:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ALI_ORACLE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:microsoft:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.microsoft.jdbc.sqlserver.SQLServerDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:sqlserver:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:sybase:Tds:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.sybase.jdbc2.jdbc.SybDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:jtds:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"net.sourceforge.jtds.jdbc.Driver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:fake:\"</span>) || rawUrl.startsWith(<span class=\"string\">\"jdbc:mock:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.alibaba.druid.mock.MockDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:postgresql:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> POSTGRESQL_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:odps:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ODPS_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:hsqldb:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"org.hsqldb.jdbcDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:db2:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DB2_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:sqlite:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"org.sqlite.JDBC\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:ingres:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.ingres.jdbc.IngresDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:h2:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> H2_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:mckoi:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.mckoi.JDBCDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:cloudscape:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"COM.cloudscape.core.JDBCDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:informix-sqli:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.informix.jdbc.IfxDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:timesten:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.timesten.jdbc.TimesTenDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:as400:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.ibm.as400.access.AS400JDBCDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:sapdb:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.sap.dbtech.jdbc.DriverSapDB\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:JSQLConnect:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.jnetdirect.jsql.JSQLDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:JTurbo:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.newatlanta.jturbo.driver.Driver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:firebirdsql:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"org.firebirdsql.jdbc.FBDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:interbase:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"interbase.interclient.Driver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:pointbase:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.pointbase.jdbc.jdbcUniversalDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:edbc:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"ca.edbc.jdbc.EdbcDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:mimer:multi1:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.mimer.jdbc.Driver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:dm:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JdbcConstants.DM_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:kingbase:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JdbcConstants.KINGBASE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:hive:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JdbcConstants.HIVE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:hive2:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JdbcConstants.HIVE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"unkow jdbc driver : \"</span> + rawUrl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>阿里巴巴数据库连接池对常见的数据库都可以识别，但是对于neo没有支持，因此就需要配置driver或者driverClassName。</p>\n<p><strong>收获2：</strong></p>\n<p>对于数据库连接池的一些属性配置信息名字不是固定的，这些属性名字不是DataSource规范中的，而是跟各个具体DataSource实现强相关，因此配置时候可以查看DataSource具体实现进行配置。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>整合多数据源时候，配置neo数据库连接池时候使用的Druid连接池，遇见的问题以及问题的解决方案与收获简单记录一下</p>\n<h3 id=\"方案1：\"><a href=\"#方案1：\" class=\"headerlink\" title=\"方案1：\"></a>方案1：</h3><p>配置信息：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.neo4j.jdbc.bolt.BoltDrive\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>错误信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [java.sql.Driver] <span class=\"keyword\">for</span> property <span class=\"string\">'driver'</span>: no matching editors or conversion strategy found</span><br><span class=\"line\">\tat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:<span class=\"number\">302</span>)</span><br><span class=\"line\">\tat org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:<span class=\"number\">576</span>)</span><br><span class=\"line\">\t... <span class=\"number\">89</span> more</span><br></pre></td></tr></table></figure>\n\n<p>很明显，无法将String转为Driver类型，看一下DataSource才知道原来driver配置的是Driver类型的实例，而不是Driver class名字，解决方案有两种。先介绍第一种：</p>\n<p>解决办法：</p>\n<p>将Driver以bean的方式注册到spring容器中，之后配置ref引用该Driver实例即可。代码如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将Driver注册到Spring容器</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"boltDriver\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.neo4j.jdbc.bolt.BoltDriver\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">//ref引用该实例即可。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"boltDriver\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案2：\"><a href=\"#方案2：\" class=\"headerlink\" title=\"方案2：\"></a>方案2：</h3><p>方案1中的DataSource是配置Driver类型成员；因此可以找到配置DriverName的变量配置即可，发现存在driverClass，可以配置driverClass设置Neo的Driver驱动名字即可。但是配置之后变红：</p>\n<p><img src=\"/2019/06/30/spring-datasouce-config/neo-datasouce-error.png\" alt></p>\n<p>通过对比url发现，属性名字是setXXX方法中的XXX，该set方法名字为setDriverClassName(此处稍微翻阅源码就可以得知，Bean属性注入是使用set方法，而不是反射Field注入)。因此配置信息如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.neo4j.jdbc.bolt.BoltDrive\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案3：\"><a href=\"#方案3：\" class=\"headerlink\" title=\"方案3：\"></a>方案3：</h3><p>使用Mybatis自带的DataSource：org.apache.ibatis.datasource.pooled.PooledDataSource，该类中的driver是一个String类型设置驱动名字的成员：参见org.apache.ibatis.datasource.pooled.PooledDataSource#setDriver方法。 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.neo4j.jdbc.bolt.BoltDriver\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p> <strong>收获1：</strong></p>\n<p> 对于常见的数据库连接池，不同的实现有着细微的差别，例如对于阿里Druid数据库连接池，对于常用的数据库，我们可以不用设置driver或者driverClassName属性，数据库连接池会根据url自动识别Driver，识别Driver方法com.alibaba.druid.util.JdbcUtils#getDriverClassName ；源码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getDriverClassName</span><span class=\"params\">(String rawUrl)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:derby:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"org.apache.derby.jdbc.EmbeddedDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:mysql:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MYSQL_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:log4jdbc:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LOG4JDBC_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:mariadb:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MARIADB_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:oracle:\"</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">               || rawUrl.startsWith(<span class=\"string\">\"JDBC:oracle:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ORACLE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:alibaba:oracle:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ALI_ORACLE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:microsoft:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.microsoft.jdbc.sqlserver.SQLServerDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:sqlserver:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:sybase:Tds:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.sybase.jdbc2.jdbc.SybDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:jtds:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"net.sourceforge.jtds.jdbc.Driver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:fake:\"</span>) || rawUrl.startsWith(<span class=\"string\">\"jdbc:mock:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.alibaba.druid.mock.MockDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:postgresql:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> POSTGRESQL_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:odps:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ODPS_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:hsqldb:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"org.hsqldb.jdbcDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:db2:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DB2_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:sqlite:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"org.sqlite.JDBC\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:ingres:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.ingres.jdbc.IngresDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:h2:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> H2_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:mckoi:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.mckoi.JDBCDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:cloudscape:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"COM.cloudscape.core.JDBCDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:informix-sqli:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.informix.jdbc.IfxDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:timesten:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.timesten.jdbc.TimesTenDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:as400:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.ibm.as400.access.AS400JDBCDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:sapdb:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.sap.dbtech.jdbc.DriverSapDB\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:JSQLConnect:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.jnetdirect.jsql.JSQLDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:JTurbo:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.newatlanta.jturbo.driver.Driver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:firebirdsql:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"org.firebirdsql.jdbc.FBDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:interbase:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"interbase.interclient.Driver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:pointbase:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.pointbase.jdbc.jdbcUniversalDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:edbc:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"ca.edbc.jdbc.EdbcDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:mimer:multi1:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.mimer.jdbc.Driver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:dm:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JdbcConstants.DM_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:kingbase:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JdbcConstants.KINGBASE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:hive:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JdbcConstants.HIVE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:hive2:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JdbcConstants.HIVE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"unkow jdbc driver : \"</span> + rawUrl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>阿里巴巴数据库连接池对常见的数据库都可以识别，但是对于neo没有支持，因此就需要配置driver或者driverClassName。</p>\n<p><strong>收获2：</strong></p>\n<p>对于数据库连接池的一些属性配置信息名字不是固定的，这些属性名字不是DataSource规范中的，而是跟各个具体DataSource实现强相关，因此配置时候可以查看DataSource具体实现进行配置。</p>\n"}],"PostAsset":[{"_id":"source/_posts/hello-world/lzs7.png","slug":"lzs7.png","post":"cjxiuit4d00004x2d2z2srhzr","modified":0,"renderable":0},{"_id":"source/_posts/java-index/enum_code.png","slug":"enum_code.png","post":"cjxiuit4i00024x2dt66f4sth","modified":0,"renderable":0},{"_id":"source/_posts/spring-datasouce-config/neo-datasouce-error.png","slug":"neo-datasouce-error.png","post":"cjxiuit4p00074x2da7ncqulw","modified":0,"renderable":0},{"_id":"source/_posts/java-index/enum_method.png","slug":"enum_method.png","post":"cjxiuit4i00024x2dt66f4sth","modified":0,"renderable":0},{"_id":"source/_posts/hello-world/lzs.png","slug":"lzs.png","post":"cjxiuit4d00004x2d2z2srhzr","modified":0,"renderable":0},{"_id":"source/_posts/hello-world/lzs2.png","slug":"lzs2.png","post":"cjxiuit4d00004x2d2z2srhzr","modified":0,"renderable":0},{"_id":"source/_posts/hello-world/lzs3.png","slug":"lzs3.png","post":"cjxiuit4d00004x2d2z2srhzr","modified":0,"renderable":0},{"_id":"source/_posts/hello-world/lzs4.png","slug":"lzs4.png","post":"cjxiuit4d00004x2d2z2srhzr","modified":0,"renderable":0},{"_id":"source/_posts/hello-world/lzs5.png","slug":"lzs5.png","post":"cjxiuit4d00004x2d2z2srhzr","modified":0,"renderable":0},{"_id":"source/_posts/hello-world/lzs6.png","slug":"lzs6.png","post":"cjxiuit4d00004x2d2z2srhzr","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjxiuit4d00004x2d2z2srhzr","category_id":"cjxiuit4k00044x2d8qmf4kjo","_id":"cjxiuit4r00094x2dvsdpzcjn"},{"post_id":"cjxiuit4i00024x2dt66f4sth","category_id":"cjxiuit4q00084x2dwvx6v8zw","_id":"cjxiuit4s000b4x2diiwae0wn"},{"post_id":"cjxiuit4m00054x2d8tcg6iy9","category_id":"cjxiuit4r000a4x2dkw3iupso","_id":"cjxiuit4t000d4x2d9p3v2y7v"},{"post_id":"cjxiuit4n00064x2dpv8gw128","category_id":"cjxiuit4s000c4x2dz69r64ei","_id":"cjxiuit4t000f4x2dchzngsx3"},{"post_id":"cjxiuit4p00074x2da7ncqulw","category_id":"cjxiuit4t000e4x2dgk6dz1ut","_id":"cjxiuit4t000g4x2d7puvxluw"}],"PostTag":[],"Tag":[]}}
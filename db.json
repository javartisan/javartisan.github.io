{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/favicon.png","path":"favicon.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/landscape/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/favicon.png","path":"css/images/favicon.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"source/lee/index/lzs7.png","path":"lee/index/lzs7.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/lee/index/lzs.png","path":"lee/index/lzs.png","modified":0,"renderable":0},{"_id":"source/lee/index/lzs4.png","path":"lee/index/lzs4.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/lee/index/lzs5.png","path":"lee/index/lzs5.png","modified":0,"renderable":0},{"_id":"source/lee/index/lzs6.png","path":"lee/index/lzs6.png","modified":0,"renderable":0},{"_id":"source/lee/index/lzs2.png","path":"lee/index/lzs2.png","modified":0,"renderable":0},{"_id":"source/lee/index/lzs3.png","path":"lee/index/lzs3.png","modified":0,"renderable":0},{"_id":"themes/landscape/source/images/banner.jpg","path":"images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"c694ad3a02a60be198503c9676859f6fe25b56cf","modified":1562167895903},{"_id":"source/CNAME","hash":"70d421e385a03865a6bf559e6b6204c62116a50c","modified":1561982626709},{"_id":"source/favicon.ico","hash":"1d351a6af5be0ff45b888c4d66ae982b3d7043e9","modified":1561997994000},{"_id":"source/favicon.png","hash":"174e493758456bad816f93110f9d0d1481a32958","modified":1561997336700},{"_id":"themes/landscape/.DS_Store","hash":"7445542236268209fcaed9c2a15c9efca784a099","modified":1561867803381},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1561866437267},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1561866437244},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1561866437243},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1561866437267},{"_id":"themes/landscape/_config.yml","hash":"6afc317eaf46a133e4cca5fcaf25e82a1c9fa0b4","modified":1562074625601},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1561866437268},{"_id":"source/_posts/clickhouse-index.md","hash":"3c563715780327eff7f154ef834dc4a346052c6b","modified":1562074872211},{"_id":"source/_posts/hello-world.md","hash":"2dfdf0a67a5e53e1b7e2c8a31dedcd12001269ba","modified":1562074935343},{"_id":"source/_posts/java-index.md","hash":"24773efbe234476e33a66c11e63e7bbf0271a0b7","modified":1562075056719},{"_id":"source/_posts/mybatis-index.md","hash":"2419461dad7e40c7bff601aefda870c451bcf0c0","modified":1562074945181},{"_id":"source/_posts/redis-data-safe.md","hash":"4236b85d02044fde8abcfff6ca90db089f120ce5","modified":1562167980448},{"_id":"source/_posts/resid-distribute-lock.md","hash":"52be885e7e295c49fdd05c10f50fbf8c17d6166d","modified":1562170796110},{"_id":"source/_posts/spark-index.md","hash":"4e7da787179488977bb4627a11d130c51cab7ea3","modified":1562074956438},{"_id":"source/_posts/spring-datasouce-config.md","hash":"a3e1f6efde6975fa21cc38dc0b6a2d2320d0c941","modified":1562074963174},{"_id":"source/_posts/spring-multi-datasource.md","hash":"20970ff9888f61f886ffdb1e3cdaf811b7d38ffc","modified":1562074970626},{"_id":"source/_posts/.DS_Store","hash":"bf4d71f92951a3ac362948f8b9e622fa1898bd27","modified":1562168174780},{"_id":"source/javartisan/index.md","hash":"90dd1c9b90faf730b85692ed3682086d159af0b1","modified":1561884876673},{"_id":"source/lee/index.md","hash":"fbd2c7159650def34a55ff3a89818498253af79d","modified":1561884637248},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1561866437265},{"_id":"themes/landscape/languages/default.yml","hash":"8e2b306cb9a003dd3851ef22ba854ac5b7ee09b9","modified":1561885157286},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1561866437265},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1561866437266},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1561866437266},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1561866437265},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1561866437267},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1561866437266},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1561866437265},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1561866437266},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1561866437267},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1561866437266},{"_id":"themes/landscape/layout/.DS_Store","hash":"30597d439f8ee03019b152ceef53a7e8240e78da","modified":1562068829719},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1561866437245},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1561866437244},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1562074205441},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1561866437245},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1561866437250},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1561866437244},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1561866437245},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1561866437268},{"_id":"themes/landscape/source/.DS_Store","hash":"1f911ee4df71106270461f6291884f2477ef8364","modified":1561867809012},{"_id":"source/_posts/java-index/enum_method.png","hash":"c31e183a59b61d68f83faf26a8b0a68436858a8e","modified":1561889492758},{"_id":"source/_posts/redis-data-safe/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1562167979103},{"_id":"themes/landscape/layout/_partial/.DS_Store","hash":"0af4458db0eb004a5a78c033931219532df46e65","modified":1562068479972},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1561866437249},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1561866437247},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1561866437248},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1562074378658},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6c8077694bafffbee695c935b452d46dbc06fcbc","modified":1561871546016},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1561866437248},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1561866437248},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1561866437249},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"aa7b471087b16b482e7ca30ce25af0586ac7c63a","modified":1561880321708},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1561866437249},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1561866437250},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1561866437251},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1561866437251},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1561866437252},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1561866437251},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1561866437251},{"_id":"themes/landscape/source/css/.DS_Store","hash":"c60ef30942a1e219043dcac9811ec46a7f10f1f1","modified":1561957352046},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1561866437263},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1561866437258},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1561866437261},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1561866437255},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1561866437254},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1561866437254},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1561866437253},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1561866437253},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1561866437254},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1561866437253},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1561866437254},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1561866437253},{"_id":"themes/landscape/source/images/favicon.ico","hash":"1d351a6af5be0ff45b888c4d66ae982b3d7043e9","modified":1561997994559},{"_id":"themes/landscape/source/images/favicon.png","hash":"174e493758456bad816f93110f9d0d1481a32958","modified":1561997336000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1561866437264},{"_id":"source/_posts/spring-datasouce-config/neo-datasouce-error.png","hash":"7801dee16ad06e76e809cef889ef796eb8e69a8c","modified":1561891966314},{"_id":"source/_posts/spring-multi-datasource/mds.png","hash":"a8c01b5968f9863cb761edaa4600d70130c2aaad","modified":1561995783169},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1561866437246},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1561866437247},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1561866437247},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1561866437246},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1561866437247},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1561866437246},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1561866437260},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1561866437259},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1561866437261},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1561866437259},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1561866437260},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1561866437260},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1561866437259},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1561866437261},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1561866437259},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1561866437260},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1561866437257},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1561866437257},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1561866437262},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1561866437263},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1561866437263},{"_id":"themes/landscape/source/css/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1561868212880},{"_id":"themes/landscape/source/css/images/favicon.ico","hash":"1d351a6af5be0ff45b888c4d66ae982b3d7043e9","modified":1561997994000},{"_id":"themes/landscape/source/css/images/favicon.png","hash":"174e493758456bad816f93110f9d0d1481a32958","modified":1561997336000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1561866437255},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1561866437256},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1561866437256},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1561866437256},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1561866437255},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1561866437256},{"_id":"source/_posts/hello-world/lzs7.png","hash":"f6b40f7767d7d9bac7da80fad13ecff2d0790763","modified":1561878754000},{"_id":"source/_posts/java-index/enum_code.png","hash":"69bb784df9af607ab0d93f9fdde234777a8dd5bc","modified":1561886534247},{"_id":"source/lee/index/lzs7.png","hash":"f6b40f7767d7d9bac7da80fad13ecff2d0790763","modified":1561875365000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1561866437262},{"_id":"source/_posts/hello-world/lzs.png","hash":"7b259d2beeef223232e150fa1274bb91effe9594","modified":1561878754000},{"_id":"source/_posts/hello-world/lzs4.png","hash":"d40282f512dc72d8deb6d6ae77f84d8df959dbaf","modified":1561878754000},{"_id":"source/lee/index/lzs.png","hash":"7b259d2beeef223232e150fa1274bb91effe9594","modified":1561875539000},{"_id":"source/lee/index/lzs4.png","hash":"d40282f512dc72d8deb6d6ae77f84d8df959dbaf","modified":1561875310000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1561866437262},{"_id":"source/_posts/hello-world/lzs5.png","hash":"b3f356cc5b9f2d8ff0141f9b92f6b05fc9d0213b","modified":1561878754000},{"_id":"source/_posts/hello-world/lzs6.png","hash":"f2f04c2ed9d47b4731dc932e085f93beb8084d2e","modified":1561878754000},{"_id":"source/lee/index/lzs5.png","hash":"b3f356cc5b9f2d8ff0141f9b92f6b05fc9d0213b","modified":1561875325000},{"_id":"source/lee/index/lzs6.png","hash":"f2f04c2ed9d47b4731dc932e085f93beb8084d2e","modified":1561875349000},{"_id":"source/_posts/hello-world/lzs2.png","hash":"f255d06c931cfe4370a91c4901cb8260e84e09bb","modified":1561878754000},{"_id":"source/_posts/hello-world/lzs3.png","hash":"af6ce7f48f6401d2c43e261b6b101b2363fb1d80","modified":1561878754000},{"_id":"source/lee/index/lzs2.png","hash":"f255d06c931cfe4370a91c4901cb8260e84e09bb","modified":1561875561000},{"_id":"source/lee/index/lzs3.png","hash":"af6ce7f48f6401d2c43e261b6b101b2363fb1d80","modified":1561875276000},{"_id":"themes/landscape/source/images/banner.jpg","hash":"066236a5e853ab6ba0302264dc749eefe6acd81f","modified":1561957329000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"066236a5e853ab6ba0302264dc749eefe6acd81f","modified":1561957329419},{"_id":"public/lee/index.html","hash":"0ab24d908ffd08dbf67fa9869a2b0c8e14358b4c","modified":1562170804112},{"_id":"public/javartisan/index.html","hash":"476529dd1098cf9d581fc551f51c8f41008a00e1","modified":1562170804112},{"_id":"public/2019/07/02/hello-world/index.html","hash":"cc8823dd4dbb97855840b29367e8d79eeb53f603","modified":1562170804119},{"_id":"public/2019/07/01/clickhouse-index/index.html","hash":"e3cdf26fc61db7ee73ba3147ef8538504e7e27ca","modified":1562170804119},{"_id":"public/2019/06/30/mybatis-index/index.html","hash":"6546cf462c798503f1d44c663dcc2229b46bdd00","modified":1562170804120},{"_id":"public/2019/06/30/spark-index/index.html","hash":"86739f570215c9a0a42aac0b342b2551b8373945","modified":1562170804120},{"_id":"public/categories/Clickhouse/index.html","hash":"9a8192363cfc8dbc6f38dc9834b246814fa9667a","modified":1562170804120},{"_id":"public/categories/Jonathan-Lee/index.html","hash":"a5da79648f04820d96304dc15a0d430b7ea299a8","modified":1562170804120},{"_id":"public/categories/Java/index.html","hash":"49b90db231697424bdf4c879c0e64bdb5678f902","modified":1562170804120},{"_id":"public/categories/Mybatis/index.html","hash":"2ac7ce4f19c341ba4177a9a602405cf5241db323","modified":1562170804120},{"_id":"public/categories/Spark/index.html","hash":"13138ce2bd06078b4adacabd9363f729689ea6b8","modified":1562170804120},{"_id":"public/categories/Redis/index.html","hash":"e355664e83221da4428f006721abddd8e3d859de","modified":1562170804120},{"_id":"public/categories/Spring/index.html","hash":"b8cf83b552547e5536c62acc907fe070135f4175","modified":1562170804120},{"_id":"public/archives/index.html","hash":"66d280236ba2d40f6ad63e24e71e6e8aee2ca378","modified":1562170804121},{"_id":"public/archives/page/2/index.html","hash":"a325d1496bc77afd0378585074c8d78397ca4269","modified":1562170804121},{"_id":"public/archives/2019/index.html","hash":"ded5479318680a113cfdecff5494d6c3a765ca27","modified":1562170804121},{"_id":"public/archives/2019/page/2/index.html","hash":"509e7ee893db0476fd778acbe9bbaf2aa0a2888c","modified":1562170804121},{"_id":"public/archives/2019/06/index.html","hash":"1523c2da2bee57eea5b47981e8515a8f60ee3f99","modified":1562170804121},{"_id":"public/archives/2019/07/index.html","hash":"cda380679b41796c62e1ebc0edf0da316f1694a6","modified":1562170804121},{"_id":"public/index.html","hash":"9ba5705bdafb8002cd561dfb1df10471c9e8abdd","modified":1562170804121},{"_id":"public/page/2/index.html","hash":"670c1c6ee5b8042983542830ff99967e7726c094","modified":1562170804121},{"_id":"public/2019/07/03/redis-data-safe/index.html","hash":"1c707d9aeb883bc337961c6d9155b2e8cfbba25f","modified":1562170804122},{"_id":"public/2019/06/30/spring-datasouce-config/index.html","hash":"907f2c48baae2d1b12d31f3aa19e10b694948fde","modified":1562170804122},{"_id":"public/2019/06/30/java-index/index.html","hash":"c042fba8cdd7872269aa060496111a0a717f172d","modified":1562170804122},{"_id":"public/2019/06/29/spring-multi-datasource/index.html","hash":"3d334a4afee0428c10f03091d03ac0d326877eff","modified":1562170804122},{"_id":"public/2019/07/04/resid-distribute-lock/index.html","hash":"6250f03e2e21b988e2e4ffc8157618a4d97344f2","modified":1562170804128},{"_id":"public/CNAME","hash":"70d421e385a03865a6bf559e6b6204c62116a50c","modified":1562170804135},{"_id":"public/favicon.ico","hash":"1d351a6af5be0ff45b888c4d66ae982b3d7043e9","modified":1562170804135},{"_id":"public/favicon.png","hash":"174e493758456bad816f93110f9d0d1481a32958","modified":1562170804136},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1562170804136},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1562170804136},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1562170804136},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1562170804136},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1562170804136},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1562170804136},{"_id":"public/images/favicon.ico","hash":"1d351a6af5be0ff45b888c4d66ae982b3d7043e9","modified":1562170804136},{"_id":"public/images/favicon.png","hash":"174e493758456bad816f93110f9d0d1481a32958","modified":1562170804136},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1562170804137},{"_id":"public/css/images/favicon.ico","hash":"1d351a6af5be0ff45b888c4d66ae982b3d7043e9","modified":1562170804137},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1562170804137},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1562170804137},{"_id":"public/css/images/favicon.png","hash":"174e493758456bad816f93110f9d0d1481a32958","modified":1562170804137},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1562170804137},{"_id":"public/2019/06/30/java-index/enum_method.png","hash":"c31e183a59b61d68f83faf26a8b0a68436858a8e","modified":1562170804137},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1562170804480},{"_id":"public/2019/06/30/spring-datasouce-config/neo-datasouce-error.png","hash":"7801dee16ad06e76e809cef889ef796eb8e69a8c","modified":1562170804481},{"_id":"public/2019/06/29/spring-multi-datasource/mds.png","hash":"a8c01b5968f9863cb761edaa4600d70130c2aaad","modified":1562170804481},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1562170804488},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1562170804488},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1562170804488},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1562170804488},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1562170804489},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1562170804489},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1562170804489},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1562170804489},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1562170804489},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1562170804489},{"_id":"public/lee/index/lzs7.png","hash":"f6b40f7767d7d9bac7da80fad13ecff2d0790763","modified":1562170804497},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1562170804498},{"_id":"public/2019/07/02/hello-world/lzs7.png","hash":"f6b40f7767d7d9bac7da80fad13ecff2d0790763","modified":1562170804498},{"_id":"public/2019/06/30/java-index/enum_code.png","hash":"69bb784df9af607ab0d93f9fdde234777a8dd5bc","modified":1562170804499},{"_id":"public/lee/index/lzs.png","hash":"7b259d2beeef223232e150fa1274bb91effe9594","modified":1562170804508},{"_id":"public/lee/index/lzs4.png","hash":"d40282f512dc72d8deb6d6ae77f84d8df959dbaf","modified":1562170804508},{"_id":"public/2019/07/02/hello-world/lzs.png","hash":"7b259d2beeef223232e150fa1274bb91effe9594","modified":1562170804508},{"_id":"public/2019/07/02/hello-world/lzs4.png","hash":"d40282f512dc72d8deb6d6ae77f84d8df959dbaf","modified":1562170804508},{"_id":"public/lee/index/lzs5.png","hash":"b3f356cc5b9f2d8ff0141f9b92f6b05fc9d0213b","modified":1562170804512},{"_id":"public/lee/index/lzs6.png","hash":"f2f04c2ed9d47b4731dc932e085f93beb8084d2e","modified":1562170804512},{"_id":"public/2019/07/02/hello-world/lzs5.png","hash":"b3f356cc5b9f2d8ff0141f9b92f6b05fc9d0213b","modified":1562170804513},{"_id":"public/2019/07/02/hello-world/lzs6.png","hash":"f2f04c2ed9d47b4731dc932e085f93beb8084d2e","modified":1562170804513},{"_id":"public/lee/index/lzs2.png","hash":"f255d06c931cfe4370a91c4901cb8260e84e09bb","modified":1562170804520},{"_id":"public/lee/index/lzs3.png","hash":"af6ce7f48f6401d2c43e261b6b101b2363fb1d80","modified":1562170804520},{"_id":"public/images/banner.jpg","hash":"066236a5e853ab6ba0302264dc749eefe6acd81f","modified":1562170804520},{"_id":"public/css/images/banner.jpg","hash":"066236a5e853ab6ba0302264dc749eefe6acd81f","modified":1562170804520},{"_id":"public/2019/07/02/hello-world/lzs3.png","hash":"af6ce7f48f6401d2c43e261b6b101b2363fb1d80","modified":1562170804521},{"_id":"public/2019/07/02/hello-world/lzs2.png","hash":"f255d06c931cfe4370a91c4901cb8260e84e09bb","modified":1562170804522}],"Category":[{"name":"Clickhouse","_id":"cjxng5u7f0002hz2dj9jfc8gp"},{"name":"Jonathan Lee","_id":"cjxng5u7k0006hz2doasc2kqk"},{"name":"Java","_id":"cjxng5u7m000ahz2d9b7g2a5a"},{"name":"Mybatis","_id":"cjxng5u7o000ehz2d3ohdtdot"},{"name":"Spark","_id":"cjxng5u7o000ghz2dup1mabbm"},{"name":"Redis","_id":"cjxng5u7p000ihz2dsej2lbnp"},{"name":"Spring","_id":"cjxng5u7q000lhz2d0lf8g4bb"}],"Data":[],"Page":[{"title":"致匠心","_content":"\n<center>  \n<font face=\"微软雅黑\">  \n\n<br/>\n<br/>\n<br/>  \n\n![](./lzs.png)\n人生很多事急不得 你得等它自己熟\n我20出头入行 30年写了不到300首歌\n当然算是量少的\n我想\n一个人有多少天份 跟他出什么样的作品\n并无太大关联\n天分我还是有的\n我有能耐住性子的天份\n\n![](./lzs2.png)\n\n人不能孤独的活着\n之所以有作品 是为了沟通\n透过作品去告诉人家心里的想法\n眼中看世界的样子\n所在意的 珍惜的\n所以 作品就是自己\n\n![](./lzs3.png)\n\n所有精工制作的对象\n最珍贵 不能替代的就只有一个字 人\n人有情怀 有信念 有态度\n所以 没有理所当然\n就是要在各种变量可能之中\n仍然做到最好\n\n![](./lzs4.png)\n\n世界再吵杂\n匠人的内心绝对必须是安静安定的\n面对大自然赠与的素材\n我得先成就它\n它才有可能成就我\n\n![](./lzs5.png)\n\n我知道\n手艺人往往意味着\n固执 缓慢 少量 劳作\n但是这些背后所隐含的是\n专注 技艺 对完美的追求\n所以\n我们宁愿这样 也必须这样 也一直这样\n为什么\n我们要保留我们最珍贵的 最引以为傲的\n\n![](./lzs6.png)\n\n一辈子,总是还得让一些善意执念推着往前\n我们因此能愿意去听从内心的安排\n专注做点东西 至少对得起光阴岁月\n其他的就留给时间去说吧!\n![](./lzs7.png)\n</font>\n</center>      ","source":"lee/index.md","raw":"---\ntitle: 致匠心\n---\n\n<center>  \n<font face=\"微软雅黑\">  \n\n<br/>\n<br/>\n<br/>  \n\n![](./lzs.png)\n人生很多事急不得 你得等它自己熟\n我20出头入行 30年写了不到300首歌\n当然算是量少的\n我想\n一个人有多少天份 跟他出什么样的作品\n并无太大关联\n天分我还是有的\n我有能耐住性子的天份\n\n![](./lzs2.png)\n\n人不能孤独的活着\n之所以有作品 是为了沟通\n透过作品去告诉人家心里的想法\n眼中看世界的样子\n所在意的 珍惜的\n所以 作品就是自己\n\n![](./lzs3.png)\n\n所有精工制作的对象\n最珍贵 不能替代的就只有一个字 人\n人有情怀 有信念 有态度\n所以 没有理所当然\n就是要在各种变量可能之中\n仍然做到最好\n\n![](./lzs4.png)\n\n世界再吵杂\n匠人的内心绝对必须是安静安定的\n面对大自然赠与的素材\n我得先成就它\n它才有可能成就我\n\n![](./lzs5.png)\n\n我知道\n手艺人往往意味着\n固执 缓慢 少量 劳作\n但是这些背后所隐含的是\n专注 技艺 对完美的追求\n所以\n我们宁愿这样 也必须这样 也一直这样\n为什么\n我们要保留我们最珍贵的 最引以为傲的\n\n![](./lzs6.png)\n\n一辈子,总是还得让一些善意执念推着往前\n我们因此能愿意去听从内心的安排\n专注做点东西 至少对得起光阴岁月\n其他的就留给时间去说吧!\n![](./lzs7.png)\n</font>\n</center>      ","date":"2019-06-30T08:50:37.253Z","updated":"2019-06-30T08:50:37.248Z","path":"lee/index.html","comments":1,"layout":"page","_id":"cjxng5u8a000rhz2duloa0p6m","content":"<center>  \n<font face=\"微软雅黑\">  \n\n<br>\n<br>\n<br>  \n\n<p><img src=\"/lee/index/lzs.png\" alt><br>人生很多事急不得 你得等它自己熟<br>我20出头入行 30年写了不到300首歌<br>当然算是量少的<br>我想<br>一个人有多少天份 跟他出什么样的作品<br>并无太大关联<br>天分我还是有的<br>我有能耐住性子的天份</p>\n<p><img src=\"/lee/index/lzs2.png\" alt></p>\n<p>人不能孤独的活着<br>之所以有作品 是为了沟通<br>透过作品去告诉人家心里的想法<br>眼中看世界的样子<br>所在意的 珍惜的<br>所以 作品就是自己</p>\n<p><img src=\"/lee/index/lzs3.png\" alt></p>\n<p>所有精工制作的对象<br>最珍贵 不能替代的就只有一个字 人<br>人有情怀 有信念 有态度<br>所以 没有理所当然<br>就是要在各种变量可能之中<br>仍然做到最好</p>\n<p><img src=\"/lee/index/lzs4.png\" alt></p>\n<p>世界再吵杂<br>匠人的内心绝对必须是安静安定的<br>面对大自然赠与的素材<br>我得先成就它<br>它才有可能成就我</p>\n<p><img src=\"/lee/index/lzs5.png\" alt></p>\n<p>我知道<br>手艺人往往意味着<br>固执 缓慢 少量 劳作<br>但是这些背后所隐含的是<br>专注 技艺 对完美的追求<br>所以<br>我们宁愿这样 也必须这样 也一直这样<br>为什么<br>我们要保留我们最珍贵的 最引以为傲的</p>\n<p><img src=\"/lee/index/lzs6.png\" alt></p>\n<p>一辈子,总是还得让一些善意执念推着往前<br>我们因此能愿意去听从内心的安排<br>专注做点东西 至少对得起光阴岁月<br>其他的就留给时间去说吧!<br><img src=\"/lee/index/lzs7.png\" alt><br></p></font><p></p>\n</center>      ","site":{"data":{}},"excerpt":"","more":"<center>  \n<font face=\"微软雅黑\">  \n\n<br>\n<br>\n<br>  \n\n<p><img src=\"/lee/index/lzs.png\" alt><br>人生很多事急不得 你得等它自己熟<br>我20出头入行 30年写了不到300首歌<br>当然算是量少的<br>我想<br>一个人有多少天份 跟他出什么样的作品<br>并无太大关联<br>天分我还是有的<br>我有能耐住性子的天份</p>\n<p><img src=\"/lee/index/lzs2.png\" alt></p>\n<p>人不能孤独的活着<br>之所以有作品 是为了沟通<br>透过作品去告诉人家心里的想法<br>眼中看世界的样子<br>所在意的 珍惜的<br>所以 作品就是自己</p>\n<p><img src=\"/lee/index/lzs3.png\" alt></p>\n<p>所有精工制作的对象<br>最珍贵 不能替代的就只有一个字 人<br>人有情怀 有信念 有态度<br>所以 没有理所当然<br>就是要在各种变量可能之中<br>仍然做到最好</p>\n<p><img src=\"/lee/index/lzs4.png\" alt></p>\n<p>世界再吵杂<br>匠人的内心绝对必须是安静安定的<br>面对大自然赠与的素材<br>我得先成就它<br>它才有可能成就我</p>\n<p><img src=\"/lee/index/lzs5.png\" alt></p>\n<p>我知道<br>手艺人往往意味着<br>固执 缓慢 少量 劳作<br>但是这些背后所隐含的是<br>专注 技艺 对完美的追求<br>所以<br>我们宁愿这样 也必须这样 也一直这样<br>为什么<br>我们要保留我们最珍贵的 最引以为傲的</p>\n<p><img src=\"/lee/index/lzs6.png\" alt></p>\n<p>一辈子,总是还得让一些善意执念推着往前<br>我们因此能愿意去听从内心的安排<br>专注做点东西 至少对得起光阴岁月<br>其他的就留给时间去说吧!<br><img src=\"/lee/index/lzs7.png\" alt><br></p></font><p></p>\n</center>      "},{"title":"Javartisan","date":"2019-06-30T08:49:23.000Z","_content":"","source":"javartisan/index.md","raw":"---\ntitle: Javartisan\ndate: 2019-06-30 16:49:23\n---\n","updated":"2019-06-30T08:54:36.673Z","path":"javartisan/index.html","comments":1,"layout":"page","_id":"cjxng5u8c000shz2d4r2v9wo8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Clickhouse中的arrayjoin函数","date":"2019-07-01T11:59:36.000Z","_content":"\n通常SQL函数都是对一些rows进行一些map操作或者聚合操作，这些操作并不会导致行数的增加；然而arrayjoin是将一些rows转化为更多的rows，是一个扩增的过程。[官方文档描述](https://clickhouse.yandex/docs/en/query_language/functions/array_join/)：The 'arrayJoin' function takes each row and generates a set of rows (unfold).\n\n<!-- more -->\n\n- 示例1：\n\n```sql\n\nSELECT arrayJoin([1, 2, 3]) AS dst, 'Hello Clickhouse' as name\n\n```\n\n查询结果：\n\n| dst  | name |\n| :--: | :----------------: |\n|  1   |  Hello Clickhouse  |\n|  2   |  Hello Clickhouse  |\n|  3   |  Hello Clickhouse  |\n\n由于name是一个常量，arrayjoin数组长度为3，因此扩增为3行。\n\n\n\n- 示例2：\n\n```sql\n\nSELECT arrayJoin([1, 2]) AS src,  arrayJoin([3, 4]) AS dst\n\n```\n\n查询结果：\n\n| src  | dst  |\n| :--: | :--: |\n|  1   |  3   |\n|  1   |  4   |\n|  2   |  3   |\n|  2   |  4   |\n\n这其实就是一个笛卡尔积的计算过程。","source":"_posts/clickhouse-index.md","raw":"---\ntitle: Clickhouse中的arrayjoin函数\ndate: 2019-07-01 19:59:36\ncategories: Clickhouse\n---\n\n通常SQL函数都是对一些rows进行一些map操作或者聚合操作，这些操作并不会导致行数的增加；然而arrayjoin是将一些rows转化为更多的rows，是一个扩增的过程。[官方文档描述](https://clickhouse.yandex/docs/en/query_language/functions/array_join/)：The 'arrayJoin' function takes each row and generates a set of rows (unfold).\n\n<!-- more -->\n\n- 示例1：\n\n```sql\n\nSELECT arrayJoin([1, 2, 3]) AS dst, 'Hello Clickhouse' as name\n\n```\n\n查询结果：\n\n| dst  | name |\n| :--: | :----------------: |\n|  1   |  Hello Clickhouse  |\n|  2   |  Hello Clickhouse  |\n|  3   |  Hello Clickhouse  |\n\n由于name是一个常量，arrayjoin数组长度为3，因此扩增为3行。\n\n\n\n- 示例2：\n\n```sql\n\nSELECT arrayJoin([1, 2]) AS src,  arrayJoin([3, 4]) AS dst\n\n```\n\n查询结果：\n\n| src  | dst  |\n| :--: | :--: |\n|  1   |  3   |\n|  1   |  4   |\n|  2   |  3   |\n|  2   |  4   |\n\n这其实就是一个笛卡尔积的计算过程。","slug":"clickhouse-index","published":1,"updated":"2019-07-02T13:41:12.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxng5u790000hz2dobhpcyn9","content":"<p>通常SQL函数都是对一些rows进行一些map操作或者聚合操作，这些操作并不会导致行数的增加；然而arrayjoin是将一些rows转化为更多的rows，是一个扩增的过程。<a href=\"https://clickhouse.yandex/docs/en/query_language/functions/array_join/\" target=\"_blank\" rel=\"noopener\">官方文档描述</a>：The ‘arrayJoin’ function takes each row and generates a set of rows (unfold).</p>\n<a id=\"more\"></a>\n\n<ul>\n<li>示例1：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> arrayJoin([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) <span class=\"keyword\">AS</span> dst, <span class=\"string\">'Hello Clickhouse'</span> <span class=\"keyword\">as</span> <span class=\"keyword\">name</span></span><br></pre></td></tr></table></figure>\n\n<p>查询结果：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">dst</th>\n<th align=\"center\">name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">Hello Clickhouse</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">Hello Clickhouse</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">Hello Clickhouse</td>\n</tr>\n</tbody></table>\n<p>由于name是一个常量，arrayjoin数组长度为3，因此扩增为3行。</p>\n<ul>\n<li>示例2：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> arrayJoin([<span class=\"number\">1</span>, <span class=\"number\">2</span>]) <span class=\"keyword\">AS</span> src,  arrayJoin([<span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"keyword\">AS</span> dst</span><br></pre></td></tr></table></figure>\n\n<p>查询结果：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">src</th>\n<th align=\"center\">dst</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">4</td>\n</tr>\n</tbody></table>\n<p>这其实就是一个笛卡尔积的计算过程。</p>\n","site":{"data":{}},"excerpt":"<p>通常SQL函数都是对一些rows进行一些map操作或者聚合操作，这些操作并不会导致行数的增加；然而arrayjoin是将一些rows转化为更多的rows，是一个扩增的过程。<a href=\"https://clickhouse.yandex/docs/en/query_language/functions/array_join/\" target=\"_blank\" rel=\"noopener\">官方文档描述</a>：The ‘arrayJoin’ function takes each row and generates a set of rows (unfold).</p>","more":"<ul>\n<li>示例1：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> arrayJoin([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) <span class=\"keyword\">AS</span> dst, <span class=\"string\">'Hello Clickhouse'</span> <span class=\"keyword\">as</span> <span class=\"keyword\">name</span></span><br></pre></td></tr></table></figure>\n\n<p>查询结果：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">dst</th>\n<th align=\"center\">name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">Hello Clickhouse</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">Hello Clickhouse</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">Hello Clickhouse</td>\n</tr>\n</tbody></table>\n<p>由于name是一个常量，arrayjoin数组长度为3，因此扩增为3行。</p>\n<ul>\n<li>示例2：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> arrayJoin([<span class=\"number\">1</span>, <span class=\"number\">2</span>]) <span class=\"keyword\">AS</span> src,  arrayJoin([<span class=\"number\">3</span>, <span class=\"number\">4</span>]) <span class=\"keyword\">AS</span> dst</span><br></pre></td></tr></table></figure>\n\n<p>查询结果：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">src</th>\n<th align=\"center\">dst</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">4</td>\n</tr>\n</tbody></table>\n<p>这其实就是一个笛卡尔积的计算过程。</p>"},{"title":"致匠心","_content":"\n<center>  \n<font face=\"微软雅黑\">  \n<br/>\n<br/>  \n\n![](./lzs.png)\n人生很多事急不得 你得等它自己熟\n我20出头入行 30年写了不到300首歌\n当然算是量少的\n我想\n一个人有多少天份 跟他出什么样的作品\n并无太大关联\n天分我还是有的\n我有能耐住性子的天份\n\n<!-- more -->\n\n![](./lzs2.png)\n\n人不能孤独的活着\n之所以有作品 是为了沟通\n透过作品去告诉人家心里的想法\n眼中看世界的样子\n所在意的 珍惜的\n所以 作品就是自己\n\n![](./lzs3.png)\n\n所有精工制作的对象\n最珍贵 不能替代的就只有一个字 人\n人有情怀 有信念 有态度\n所以 没有理所当然\n就是要在各种变量可能之中\n仍然做到最好\n\n![](./lzs4.png)\n\n世界再吵杂\n匠人的内心绝对必须是安静安定的\n面对大自然赠与的素材\n我得先成就它\n它才有可能成就我\n\n![](./lzs5.png)\n\n我知道\n手艺人往往意味着\n固执 缓慢 少量 劳作\n但是这些背后所隐含的是\n专注 技艺 对完美的追求\n所以\n我们宁愿这样 也必须这样 也一直这样\n为什么\n我们要保留我们最珍贵的 最引以为傲的\n\n![](./lzs6.png)\n\n一辈子,总是还得让一些善意执念推着往前\n我们因此能愿意去听从内心的安排\n专注做点东西 至少对得起光阴岁月\n其他的就留给时间去说吧!\n![](./lzs7.png)\n</font>\n</center> ","source":"_posts/hello-world.md","raw":"---\ntitle: 致匠心\ncategories: Jonathan Lee\n---\n\n<center>  \n<font face=\"微软雅黑\">  \n<br/>\n<br/>  \n\n![](./lzs.png)\n人生很多事急不得 你得等它自己熟\n我20出头入行 30年写了不到300首歌\n当然算是量少的\n我想\n一个人有多少天份 跟他出什么样的作品\n并无太大关联\n天分我还是有的\n我有能耐住性子的天份\n\n<!-- more -->\n\n![](./lzs2.png)\n\n人不能孤独的活着\n之所以有作品 是为了沟通\n透过作品去告诉人家心里的想法\n眼中看世界的样子\n所在意的 珍惜的\n所以 作品就是自己\n\n![](./lzs3.png)\n\n所有精工制作的对象\n最珍贵 不能替代的就只有一个字 人\n人有情怀 有信念 有态度\n所以 没有理所当然\n就是要在各种变量可能之中\n仍然做到最好\n\n![](./lzs4.png)\n\n世界再吵杂\n匠人的内心绝对必须是安静安定的\n面对大自然赠与的素材\n我得先成就它\n它才有可能成就我\n\n![](./lzs5.png)\n\n我知道\n手艺人往往意味着\n固执 缓慢 少量 劳作\n但是这些背后所隐含的是\n专注 技艺 对完美的追求\n所以\n我们宁愿这样 也必须这样 也一直这样\n为什么\n我们要保留我们最珍贵的 最引以为傲的\n\n![](./lzs6.png)\n\n一辈子,总是还得让一些善意执念推着往前\n我们因此能愿意去听从内心的安排\n专注做点东西 至少对得起光阴岁月\n其他的就留给时间去说吧!\n![](./lzs7.png)\n</font>\n</center> ","slug":"hello-world","published":1,"date":"2019-07-02T13:42:15.343Z","updated":"2019-07-02T13:42:15.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxng5u7d0001hz2detl0jtyg","content":"<center>  \n<font face=\"微软雅黑\">  \n<br>\n<br>  \n\n<p><img src=\"/2019/07/02/hello-world/lzs.png\" alt><br>人生很多事急不得 你得等它自己熟<br>我20出头入行 30年写了不到300首歌<br>当然算是量少的<br>我想<br>一个人有多少天份 跟他出什么样的作品<br>并无太大关联<br>天分我还是有的<br>我有能耐住性子的天份</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/2019/07/02/hello-world/lzs2.png\" alt></p>\n<p>人不能孤独的活着<br>之所以有作品 是为了沟通<br>透过作品去告诉人家心里的想法<br>眼中看世界的样子<br>所在意的 珍惜的<br>所以 作品就是自己</p>\n<p><img src=\"/2019/07/02/hello-world/lzs3.png\" alt></p>\n<p>所有精工制作的对象<br>最珍贵 不能替代的就只有一个字 人<br>人有情怀 有信念 有态度<br>所以 没有理所当然<br>就是要在各种变量可能之中<br>仍然做到最好</p>\n<p><img src=\"/2019/07/02/hello-world/lzs4.png\" alt></p>\n<p>世界再吵杂<br>匠人的内心绝对必须是安静安定的<br>面对大自然赠与的素材<br>我得先成就它<br>它才有可能成就我</p>\n<p><img src=\"/2019/07/02/hello-world/lzs5.png\" alt></p>\n<p>我知道<br>手艺人往往意味着<br>固执 缓慢 少量 劳作<br>但是这些背后所隐含的是<br>专注 技艺 对完美的追求<br>所以<br>我们宁愿这样 也必须这样 也一直这样<br>为什么<br>我们要保留我们最珍贵的 最引以为傲的</p>\n<p><img src=\"/2019/07/02/hello-world/lzs6.png\" alt></p>\n<p>一辈子,总是还得让一些善意执念推着往前<br>我们因此能愿意去听从内心的安排<br>专注做点东西 至少对得起光阴岁月<br>其他的就留给时间去说吧!<br><img src=\"/2019/07/02/hello-world/lzs7.png\" alt><br></p></font><p></p>\n</center> ","site":{"data":{}},"excerpt":"<center>  \n<font face=\"微软雅黑\">  \n<br>\n<br>  \n\n<p><img src=\"/2019/07/02/hello-world/lzs.png\" alt><br>人生很多事急不得 你得等它自己熟<br>我20出头入行 30年写了不到300首歌<br>当然算是量少的<br>我想<br>一个人有多少天份 跟他出什么样的作品<br>并无太大关联<br>天分我还是有的<br>我有能耐住性子的天份</p></font></center>","more":"<p><img src=\"/2019/07/02/hello-world/lzs2.png\" alt></p>\n<p>人不能孤独的活着<br>之所以有作品 是为了沟通<br>透过作品去告诉人家心里的想法<br>眼中看世界的样子<br>所在意的 珍惜的<br>所以 作品就是自己</p>\n<p><img src=\"/2019/07/02/hello-world/lzs3.png\" alt></p>\n<p>所有精工制作的对象<br>最珍贵 不能替代的就只有一个字 人<br>人有情怀 有信念 有态度<br>所以 没有理所当然<br>就是要在各种变量可能之中<br>仍然做到最好</p>\n<p><img src=\"/2019/07/02/hello-world/lzs4.png\" alt></p>\n<p>世界再吵杂<br>匠人的内心绝对必须是安静安定的<br>面对大自然赠与的素材<br>我得先成就它<br>它才有可能成就我</p>\n<p><img src=\"/2019/07/02/hello-world/lzs5.png\" alt></p>\n<p>我知道<br>手艺人往往意味着<br>固执 缓慢 少量 劳作<br>但是这些背后所隐含的是<br>专注 技艺 对完美的追求<br>所以<br>我们宁愿这样 也必须这样 也一直这样<br>为什么<br>我们要保留我们最珍贵的 最引以为傲的</p>\n<p><img src=\"/2019/07/02/hello-world/lzs6.png\" alt></p>\n<p>一辈子,总是还得让一些善意执念推着往前<br>我们因此能愿意去听从内心的安排<br>专注做点东西 至少对得起光阴岁月<br>其他的就留给时间去说吧!<br><img src=\"/2019/07/02/hello-world/lzs7.png\" alt><br></p><p></p>\n"},{"title":"Java枚举类型在RPC调用时由于版本不一致遇见的问题","date":"2019-06-30T08:52:09.000Z","_content":"\n### 枚举值在RPC调用时反序列化与序列化的值不一致\n\n- **场景**\n\n  一次业务联调测试时候发现，客户端以RPC方式调用服务提供方执行作业，作业类型存在多种，作业类型的区分使用的是Java枚举类表示，在每次调用服务接口时候传入枚举值以表示要执行的作业类型。\n\n <!-- more -->\n\n- **问题发现**\n  \n\n进行联调测试时候发现每次客户端传入的类型与服务提供方真实执行的作业类型不匹配，便开始进行寻找原因！当时怀疑是服务提供方的业务代码判断逻辑存在问题，经过查看服务提供方代码发现并没有问题。可能的猜想并没有解决问题，因此只能进行Debug寻找原因。将服务提供方代码Clone下来在本地的测试RPC环境进行调试，调试发现在服务提供方反序列化之后枚举值就是错误的，因此可以将问题锁定在枚举值类的序列化上。因此只好跟踪序列化与反序列化参数代码，序列化代码：\n\n  ```java\n      public void writeEnum(Enum<?> value) {\n          if (value == null) {\n              // null\n              this.writeNull();\n          } else {\n              String strVal = null;\n              if (this.writeEnumUsingName && !this.writeEnumUsingToString) {\n                  // 判断是否是根据名字序列化\n                  strVal = value.name();\n              } else if (this.writeEnumUsingToString) {\n                  // 是否使用tostring序列化枚举值\n                  strVal = value.toString();\n              }\n  \n              if (strVal != null) {\n                  // 不为空，则可能是根据名字或者toString的方式序列化\n                  char quote = this.isEnabled(SerializerFeature.UseSingleQuotes) ? 39 : 34;\n                  this.write(quote);\n                  this.write(strVal);\n                  this.write(quote);\n              } else {\n                  // 根据ordinal值序列化(ordinal：序列数)\n                  this.writeInt(value.ordinal());\n              }\n  \n          }\n      }\n  ```\n\n  *跟进java.lang.Enum#ordinal方法发现原来是JDK提供的方法，文档描述如下：*\n\n  ```java\n  Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero). Most programmers will have no use for this method. It is designed for use by sophisticated enum-based data structures, such as java.util.EnumSet and java.util.EnumMap.\n  ```\n\n  *返回枚举值的的序数，也就是声明时候的位置序号，序号从0开始计数。大多数程序员不会使用这个方法，此方法的设计主要是为了那些基于枚举的复杂数据类型，例如：EnumSet与EnumMap。*\n\n  \n\n  到序列化代码this.writeInt(value.ordinal()),此时就可以明白了，RPC调用参数序列化枚举值是根据枚举值的序号进行序列化的（**注意：**序列化机制是跟序列化框架强相关的，一定要根据自己的序列化框架进行实际分析问题）。此时客户端序列化已经完成，接下来便开始Debug服务提供方的代码，经过Debug发现服务提供方法的枚举值数组中的size与客户端不一致，经过对比源码发现：       ![](./enum_code.png)  \n\n  客户端与服务端的类库版本不一致，而又由于枚举值序列化与反序列化是按照ordinal值进行的，因此便可以确定问题产生原因了，通过重新发布类库此问题得以解决！\n\n  \n\n\n\n###  枚举值中ordinal的用法\n\n- Java**枚举类型中存在的方法**\n\n  ![](./enum_method.png)\n\n- **ordinal值的用法**\n\n  通过JDK文档，可以发现ordinal主要是为了基于枚举的复杂数据结构使用，在JDK中有EnumSet与EnumMap。\n\n  **EnumSet：**\n\n  是JDK的一个工具类，主要用于枚举值的Set相关操作，例如：\n\n  ```java\n  import java.util.EnumMap;\n  import java.util.EnumSet;\n  \n  public enum JobType {\n      SPARK_JOB, HADOOP_JOB, FLINK_JOB;\n  }\n  \n  enum JobType2 {\n      SPARK_JOB, HADOOP_JOB, FLINK_JOB;;\n  }\n  \n  class Boot {\n      public static void main(String[] args) {\n          // 将指定类型枚举值的所有值存初始化到EnumSet中\n          EnumSet es = EnumSet.allOf(JobType.class);\n          System.out.println(es.contains(JobType.SPARK_JOB));\n          System.out.println(es.contains(JobType2.SPARK_JOB));\n      }\n  }\n  ```\n\n  EnumSet是一个抽象类，是不支持自定义实现的（内部有一个默认权限的addAll方法无法重写），JDK提供的方法已经可以满足我们的需要了。\n\n  **EnumMap:**\n\n  是枚举值有关Map的操作，实例代码:\n\n  ```java\npublic enum JobType {\n      SPARK_JOB, HADOOP_JOB, FLINK_JOB;\n  }\n  \n  enum JobType2 {\n      SPARK_JOB, HADOOP_JOB, FLINK_JOB;;\n  }\n  \n  class Boot {\n      public static void main(String[] args) {\n          //构造器参数是一个泛型参数，表示该EnumMap的key只能是JobType2枚举类型\n          EnumMap  em = new EnumMap(JobType2.class);\n          em.put(JobType2.SPARK_JOB, new Object());\n          // 报错\n          em.put(JobType.SPARK_JOB, new Object());\n          System.out.println(em);\n      }\n  }\n  ```\n  \n  \n\n**注意：**\n\n上面只是针具具体某一个序列化框架而言，具体问题一定要具体分析！\n\n\n\n**拓展阅读：**\n\n阿里Java编码规范中：“二方库”中第五条：\n\n```\n\n【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用 枚举类型或者包含枚举类型的 POJO 对象。\n\n```\n\n约定参数可以使用枚举，但是返回值禁止含有枚举值。主要原因：\n\n- **允许使用参数是因为客户端可以显式传入枚举值证明客户端存在枚举值，所以一般不会存在问题（但是前提必须保证客户端与服务器端依赖的枚举值版本一致，例如枚举值都一致，但是声明顺序不一致可能就会存在问题，因此在添加枚举值字段时候要保证在最后添加枚举值，不要打乱现有的枚举值顺序）。**\n\n- **返回值禁止是因为返回值在客户端启动时候无法校验客户端是否包含所有枚举值字段，例如客户端枚举值含有：SPARK_JOB,HADOOP_JOB；但是服务器端包含：SPARK_JOB,HADOOP_JOB，HIVE_JOB,FLINK_JOB；此时客户端返回一个FLINK_JOB客户端反序列化就会报错。**\n\n因此需要注意枚举值作为参数在RPC接口调用存在的如上问题。（all in one的模式则不会存在此问题）。\n\n\n\n**拓展阅读**：[Java枚举什么不好，《阿里巴巴JAVA开发手册》对于枚举规定的考量是什么？](https://www.zhihu.com/question/52760637)\n\n","source":"_posts/java-index.md","raw":"---\ntitle: Java枚举类型在RPC调用时由于版本不一致遇见的问题\ndate: 2019-06-30 16:52:09\ncategories: Java\n---\n\n### 枚举值在RPC调用时反序列化与序列化的值不一致\n\n- **场景**\n\n  一次业务联调测试时候发现，客户端以RPC方式调用服务提供方执行作业，作业类型存在多种，作业类型的区分使用的是Java枚举类表示，在每次调用服务接口时候传入枚举值以表示要执行的作业类型。\n\n <!-- more -->\n\n- **问题发现**\n  \n\n进行联调测试时候发现每次客户端传入的类型与服务提供方真实执行的作业类型不匹配，便开始进行寻找原因！当时怀疑是服务提供方的业务代码判断逻辑存在问题，经过查看服务提供方代码发现并没有问题。可能的猜想并没有解决问题，因此只能进行Debug寻找原因。将服务提供方代码Clone下来在本地的测试RPC环境进行调试，调试发现在服务提供方反序列化之后枚举值就是错误的，因此可以将问题锁定在枚举值类的序列化上。因此只好跟踪序列化与反序列化参数代码，序列化代码：\n\n  ```java\n      public void writeEnum(Enum<?> value) {\n          if (value == null) {\n              // null\n              this.writeNull();\n          } else {\n              String strVal = null;\n              if (this.writeEnumUsingName && !this.writeEnumUsingToString) {\n                  // 判断是否是根据名字序列化\n                  strVal = value.name();\n              } else if (this.writeEnumUsingToString) {\n                  // 是否使用tostring序列化枚举值\n                  strVal = value.toString();\n              }\n  \n              if (strVal != null) {\n                  // 不为空，则可能是根据名字或者toString的方式序列化\n                  char quote = this.isEnabled(SerializerFeature.UseSingleQuotes) ? 39 : 34;\n                  this.write(quote);\n                  this.write(strVal);\n                  this.write(quote);\n              } else {\n                  // 根据ordinal值序列化(ordinal：序列数)\n                  this.writeInt(value.ordinal());\n              }\n  \n          }\n      }\n  ```\n\n  *跟进java.lang.Enum#ordinal方法发现原来是JDK提供的方法，文档描述如下：*\n\n  ```java\n  Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero). Most programmers will have no use for this method. It is designed for use by sophisticated enum-based data structures, such as java.util.EnumSet and java.util.EnumMap.\n  ```\n\n  *返回枚举值的的序数，也就是声明时候的位置序号，序号从0开始计数。大多数程序员不会使用这个方法，此方法的设计主要是为了那些基于枚举的复杂数据类型，例如：EnumSet与EnumMap。*\n\n  \n\n  到序列化代码this.writeInt(value.ordinal()),此时就可以明白了，RPC调用参数序列化枚举值是根据枚举值的序号进行序列化的（**注意：**序列化机制是跟序列化框架强相关的，一定要根据自己的序列化框架进行实际分析问题）。此时客户端序列化已经完成，接下来便开始Debug服务提供方的代码，经过Debug发现服务提供方法的枚举值数组中的size与客户端不一致，经过对比源码发现：       ![](./enum_code.png)  \n\n  客户端与服务端的类库版本不一致，而又由于枚举值序列化与反序列化是按照ordinal值进行的，因此便可以确定问题产生原因了，通过重新发布类库此问题得以解决！\n\n  \n\n\n\n###  枚举值中ordinal的用法\n\n- Java**枚举类型中存在的方法**\n\n  ![](./enum_method.png)\n\n- **ordinal值的用法**\n\n  通过JDK文档，可以发现ordinal主要是为了基于枚举的复杂数据结构使用，在JDK中有EnumSet与EnumMap。\n\n  **EnumSet：**\n\n  是JDK的一个工具类，主要用于枚举值的Set相关操作，例如：\n\n  ```java\n  import java.util.EnumMap;\n  import java.util.EnumSet;\n  \n  public enum JobType {\n      SPARK_JOB, HADOOP_JOB, FLINK_JOB;\n  }\n  \n  enum JobType2 {\n      SPARK_JOB, HADOOP_JOB, FLINK_JOB;;\n  }\n  \n  class Boot {\n      public static void main(String[] args) {\n          // 将指定类型枚举值的所有值存初始化到EnumSet中\n          EnumSet es = EnumSet.allOf(JobType.class);\n          System.out.println(es.contains(JobType.SPARK_JOB));\n          System.out.println(es.contains(JobType2.SPARK_JOB));\n      }\n  }\n  ```\n\n  EnumSet是一个抽象类，是不支持自定义实现的（内部有一个默认权限的addAll方法无法重写），JDK提供的方法已经可以满足我们的需要了。\n\n  **EnumMap:**\n\n  是枚举值有关Map的操作，实例代码:\n\n  ```java\npublic enum JobType {\n      SPARK_JOB, HADOOP_JOB, FLINK_JOB;\n  }\n  \n  enum JobType2 {\n      SPARK_JOB, HADOOP_JOB, FLINK_JOB;;\n  }\n  \n  class Boot {\n      public static void main(String[] args) {\n          //构造器参数是一个泛型参数，表示该EnumMap的key只能是JobType2枚举类型\n          EnumMap  em = new EnumMap(JobType2.class);\n          em.put(JobType2.SPARK_JOB, new Object());\n          // 报错\n          em.put(JobType.SPARK_JOB, new Object());\n          System.out.println(em);\n      }\n  }\n  ```\n  \n  \n\n**注意：**\n\n上面只是针具具体某一个序列化框架而言，具体问题一定要具体分析！\n\n\n\n**拓展阅读：**\n\n阿里Java编码规范中：“二方库”中第五条：\n\n```\n\n【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用 枚举类型或者包含枚举类型的 POJO 对象。\n\n```\n\n约定参数可以使用枚举，但是返回值禁止含有枚举值。主要原因：\n\n- **允许使用参数是因为客户端可以显式传入枚举值证明客户端存在枚举值，所以一般不会存在问题（但是前提必须保证客户端与服务器端依赖的枚举值版本一致，例如枚举值都一致，但是声明顺序不一致可能就会存在问题，因此在添加枚举值字段时候要保证在最后添加枚举值，不要打乱现有的枚举值顺序）。**\n\n- **返回值禁止是因为返回值在客户端启动时候无法校验客户端是否包含所有枚举值字段，例如客户端枚举值含有：SPARK_JOB,HADOOP_JOB；但是服务器端包含：SPARK_JOB,HADOOP_JOB，HIVE_JOB,FLINK_JOB；此时客户端返回一个FLINK_JOB客户端反序列化就会报错。**\n\n因此需要注意枚举值作为参数在RPC接口调用存在的如上问题。（all in one的模式则不会存在此问题）。\n\n\n\n**拓展阅读**：[Java枚举什么不好，《阿里巴巴JAVA开发手册》对于枚举规定的考量是什么？](https://www.zhihu.com/question/52760637)\n\n","slug":"java-index","published":1,"updated":"2019-07-02T13:44:16.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxng5u7h0003hz2dhfm3hqua","content":"<h3 id=\"枚举值在RPC调用时反序列化与序列化的值不一致\"><a href=\"#枚举值在RPC调用时反序列化与序列化的值不一致\" class=\"headerlink\" title=\"枚举值在RPC调用时反序列化与序列化的值不一致\"></a>枚举值在RPC调用时反序列化与序列化的值不一致</h3><ul>\n<li><p><strong>场景</strong></p>\n<p>一次业务联调测试时候发现，客户端以RPC方式调用服务提供方执行作业，作业类型存在多种，作业类型的区分使用的是Java枚举类表示，在每次调用服务接口时候传入枚举值以表示要执行的作业类型。</p>\n<a id=\"more\"></a>\n</li>\n<li><p><strong>问题发现</strong></p>\n</li>\n</ul>\n<p>进行联调测试时候发现每次客户端传入的类型与服务提供方真实执行的作业类型不匹配，便开始进行寻找原因！当时怀疑是服务提供方的业务代码判断逻辑存在问题，经过查看服务提供方代码发现并没有问题。可能的猜想并没有解决问题，因此只能进行Debug寻找原因。将服务提供方代码Clone下来在本地的测试RPC环境进行调试，调试发现在服务提供方反序列化之后枚举值就是错误的，因此可以将问题锁定在枚举值类的序列化上。因此只好跟踪序列化与反序列化参数代码，序列化代码：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeEnum</span><span class=\"params\">(Enum&lt;?&gt; value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// null</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.writeNull();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        String strVal = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.writeEnumUsingName &amp;&amp; !<span class=\"keyword\">this</span>.writeEnumUsingToString) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断是否是根据名字序列化</span></span><br><span class=\"line\">            strVal = value.name();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.writeEnumUsingToString) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 是否使用tostring序列化枚举值</span></span><br><span class=\"line\">            strVal = value.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strVal != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不为空，则可能是根据名字或者toString的方式序列化</span></span><br><span class=\"line\">            <span class=\"keyword\">char</span> quote = <span class=\"keyword\">this</span>.isEnabled(SerializerFeature.UseSingleQuotes) ? <span class=\"number\">39</span> : <span class=\"number\">34</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.write(quote);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.write(strVal);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.write(quote);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 根据ordinal值序列化(ordinal：序列数)</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.writeInt(value.ordinal());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <em>跟进java.lang.Enum#ordinal方法发现原来是JDK提供的方法，文档描述如下：</em></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Returns the ordinal of <span class=\"keyword\">this</span> enumeration <span class=\"title\">constant</span> <span class=\"params\">(its position in its <span class=\"keyword\">enum</span> declaration, where the initial constant is assigned an ordinal of zero)</span>. Most programmers will have no use <span class=\"keyword\">for</span> <span class=\"keyword\">this</span> method. It is designed <span class=\"keyword\">for</span> use by sophisticated <span class=\"keyword\">enum</span>-based data structures, such as java.util.EnumSet and java.util.EnumMap.</span></span><br></pre></td></tr></table></figure>\n\n<p>  <em>返回枚举值的的序数，也就是声明时候的位置序号，序号从0开始计数。大多数程序员不会使用这个方法，此方法的设计主要是为了那些基于枚举的复杂数据类型，例如：EnumSet与EnumMap。</em></p>\n<p>  到序列化代码this.writeInt(value.ordinal()),此时就可以明白了，RPC调用参数序列化枚举值是根据枚举值的序号进行序列化的（<strong>注意：</strong>序列化机制是跟序列化框架强相关的，一定要根据自己的序列化框架进行实际分析问题）。此时客户端序列化已经完成，接下来便开始Debug服务提供方的代码，经过Debug发现服务提供方法的枚举值数组中的size与客户端不一致，经过对比源码发现：       <img src=\"/2019/06/30/java-index/enum_code.png\" alt>  </p>\n<p>  客户端与服务端的类库版本不一致，而又由于枚举值序列化与反序列化是按照ordinal值进行的，因此便可以确定问题产生原因了，通过重新发布类库此问题得以解决！</p>\n<h3 id=\"枚举值中ordinal的用法\"><a href=\"#枚举值中ordinal的用法\" class=\"headerlink\" title=\"枚举值中ordinal的用法\"></a>枚举值中ordinal的用法</h3><ul>\n<li><p>Java<strong>枚举类型中存在的方法</strong></p>\n<p><img src=\"/2019/06/30/java-index/enum_method.png\" alt></p>\n</li>\n<li><p><strong>ordinal值的用法</strong></p>\n<p>通过JDK文档，可以发现ordinal主要是为了基于枚举的复杂数据结构使用，在JDK中有EnumSet与EnumMap。</p>\n<p><strong>EnumSet：</strong></p>\n<p>是JDK的一个工具类，主要用于枚举值的Set相关操作，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.EnumMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.EnumSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> JobType &#123;</span><br><span class=\"line\">    SPARK_JOB, HADOOP_JOB, FLINK_JOB;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> JobType2 &#123;</span><br><span class=\"line\">    SPARK_JOB, HADOOP_JOB, FLINK_JOB;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boot</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将指定类型枚举值的所有值存初始化到EnumSet中</span></span><br><span class=\"line\">        EnumSet es = EnumSet.allOf(JobType.class);</span><br><span class=\"line\">        System.out.println(es.contains(JobType.SPARK_JOB));</span><br><span class=\"line\">        System.out.println(es.contains(JobType2.SPARK_JOB));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>EnumSet是一个抽象类，是不支持自定义实现的（内部有一个默认权限的addAll方法无法重写），JDK提供的方法已经可以满足我们的需要了。</p>\n<p><strong>EnumMap:</strong></p>\n<p>是枚举值有关Map的操作，实例代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> JobType &#123;</span><br><span class=\"line\">      SPARK_JOB, HADOOP_JOB, FLINK_JOB;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">enum</span> JobType2 &#123;</span><br><span class=\"line\">      SPARK_JOB, HADOOP_JOB, FLINK_JOB;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boot</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//构造器参数是一个泛型参数，表示该EnumMap的key只能是JobType2枚举类型</span></span><br><span class=\"line\">          EnumMap  em = <span class=\"keyword\">new</span> EnumMap(JobType2.class);</span><br><span class=\"line\">          em.put(JobType2.SPARK_JOB, <span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">          <span class=\"comment\">// 报错</span></span><br><span class=\"line\">          em.put(JobType.SPARK_JOB, <span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">          System.out.println(em);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n</li>\n</ul>\n<p><strong>注意：</strong></p>\n<p>上面只是针具具体某一个序列化框架而言，具体问题一定要具体分析！</p>\n<p><strong>拓展阅读：</strong></p>\n<p>阿里Java编码规范中：“二方库”中第五条：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用 枚举类型或者包含枚举类型的 POJO 对象。</span><br></pre></td></tr></table></figure>\n\n<p>约定参数可以使用枚举，但是返回值禁止含有枚举值。主要原因：</p>\n<ul>\n<li><p><strong>允许使用参数是因为客户端可以显式传入枚举值证明客户端存在枚举值，所以一般不会存在问题（但是前提必须保证客户端与服务器端依赖的枚举值版本一致，例如枚举值都一致，但是声明顺序不一致可能就会存在问题，因此在添加枚举值字段时候要保证在最后添加枚举值，不要打乱现有的枚举值顺序）。</strong></p>\n</li>\n<li><p><strong>返回值禁止是因为返回值在客户端启动时候无法校验客户端是否包含所有枚举值字段，例如客户端枚举值含有：SPARK_JOB,HADOOP_JOB；但是服务器端包含：SPARK_JOB,HADOOP_JOB，HIVE_JOB,FLINK_JOB；此时客户端返回一个FLINK_JOB客户端反序列化就会报错。</strong></p>\n</li>\n</ul>\n<p>因此需要注意枚举值作为参数在RPC接口调用存在的如上问题。（all in one的模式则不会存在此问题）。</p>\n<p><strong>拓展阅读</strong>：<a href=\"https://www.zhihu.com/question/52760637\" target=\"_blank\" rel=\"noopener\">Java枚举什么不好，《阿里巴巴JAVA开发手册》对于枚举规定的考量是什么？</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"枚举值在RPC调用时反序列化与序列化的值不一致\"><a href=\"#枚举值在RPC调用时反序列化与序列化的值不一致\" class=\"headerlink\" title=\"枚举值在RPC调用时反序列化与序列化的值不一致\"></a>枚举值在RPC调用时反序列化与序列化的值不一致</h3><ul>\n<li><p><strong>场景</strong></p>\n<p>一次业务联调测试时候发现，客户端以RPC方式调用服务提供方执行作业，作业类型存在多种，作业类型的区分使用的是Java枚举类表示，在每次调用服务接口时候传入枚举值以表示要执行的作业类型。</p></li></ul>","more":"\n<li><p><strong>问题发现</strong></p>\n</li>\n\n<p>进行联调测试时候发现每次客户端传入的类型与服务提供方真实执行的作业类型不匹配，便开始进行寻找原因！当时怀疑是服务提供方的业务代码判断逻辑存在问题，经过查看服务提供方代码发现并没有问题。可能的猜想并没有解决问题，因此只能进行Debug寻找原因。将服务提供方代码Clone下来在本地的测试RPC环境进行调试，调试发现在服务提供方反序列化之后枚举值就是错误的，因此可以将问题锁定在枚举值类的序列化上。因此只好跟踪序列化与反序列化参数代码，序列化代码：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeEnum</span><span class=\"params\">(Enum&lt;?&gt; value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// null</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.writeNull();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        String strVal = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.writeEnumUsingName &amp;&amp; !<span class=\"keyword\">this</span>.writeEnumUsingToString) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断是否是根据名字序列化</span></span><br><span class=\"line\">            strVal = value.name();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.writeEnumUsingToString) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 是否使用tostring序列化枚举值</span></span><br><span class=\"line\">            strVal = value.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strVal != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不为空，则可能是根据名字或者toString的方式序列化</span></span><br><span class=\"line\">            <span class=\"keyword\">char</span> quote = <span class=\"keyword\">this</span>.isEnabled(SerializerFeature.UseSingleQuotes) ? <span class=\"number\">39</span> : <span class=\"number\">34</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.write(quote);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.write(strVal);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.write(quote);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 根据ordinal值序列化(ordinal：序列数)</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.writeInt(value.ordinal());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  <em>跟进java.lang.Enum#ordinal方法发现原来是JDK提供的方法，文档描述如下：</em></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Returns the ordinal of <span class=\"keyword\">this</span> enumeration <span class=\"title\">constant</span> <span class=\"params\">(its position in its <span class=\"keyword\">enum</span> declaration, where the initial constant is assigned an ordinal of zero)</span>. Most programmers will have no use <span class=\"keyword\">for</span> <span class=\"keyword\">this</span> method. It is designed <span class=\"keyword\">for</span> use by sophisticated <span class=\"keyword\">enum</span>-based data structures, such as java.util.EnumSet and java.util.EnumMap.</span></span><br></pre></td></tr></table></figure>\n\n<p>  <em>返回枚举值的的序数，也就是声明时候的位置序号，序号从0开始计数。大多数程序员不会使用这个方法，此方法的设计主要是为了那些基于枚举的复杂数据类型，例如：EnumSet与EnumMap。</em></p>\n<p>  到序列化代码this.writeInt(value.ordinal()),此时就可以明白了，RPC调用参数序列化枚举值是根据枚举值的序号进行序列化的（<strong>注意：</strong>序列化机制是跟序列化框架强相关的，一定要根据自己的序列化框架进行实际分析问题）。此时客户端序列化已经完成，接下来便开始Debug服务提供方的代码，经过Debug发现服务提供方法的枚举值数组中的size与客户端不一致，经过对比源码发现：       <img src=\"/2019/06/30/java-index/enum_code.png\" alt>  </p>\n<p>  客户端与服务端的类库版本不一致，而又由于枚举值序列化与反序列化是按照ordinal值进行的，因此便可以确定问题产生原因了，通过重新发布类库此问题得以解决！</p>\n<h3 id=\"枚举值中ordinal的用法\"><a href=\"#枚举值中ordinal的用法\" class=\"headerlink\" title=\"枚举值中ordinal的用法\"></a>枚举值中ordinal的用法</h3><ul>\n<li><p>Java<strong>枚举类型中存在的方法</strong></p>\n<p><img src=\"/2019/06/30/java-index/enum_method.png\" alt></p>\n</li>\n<li><p><strong>ordinal值的用法</strong></p>\n<p>通过JDK文档，可以发现ordinal主要是为了基于枚举的复杂数据结构使用，在JDK中有EnumSet与EnumMap。</p>\n<p><strong>EnumSet：</strong></p>\n<p>是JDK的一个工具类，主要用于枚举值的Set相关操作，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.EnumMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.EnumSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> JobType &#123;</span><br><span class=\"line\">    SPARK_JOB, HADOOP_JOB, FLINK_JOB;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> JobType2 &#123;</span><br><span class=\"line\">    SPARK_JOB, HADOOP_JOB, FLINK_JOB;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boot</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将指定类型枚举值的所有值存初始化到EnumSet中</span></span><br><span class=\"line\">        EnumSet es = EnumSet.allOf(JobType.class);</span><br><span class=\"line\">        System.out.println(es.contains(JobType.SPARK_JOB));</span><br><span class=\"line\">        System.out.println(es.contains(JobType2.SPARK_JOB));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>EnumSet是一个抽象类，是不支持自定义实现的（内部有一个默认权限的addAll方法无法重写），JDK提供的方法已经可以满足我们的需要了。</p>\n<p><strong>EnumMap:</strong></p>\n<p>是枚举值有关Map的操作，实例代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> JobType &#123;</span><br><span class=\"line\">      SPARK_JOB, HADOOP_JOB, FLINK_JOB;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">enum</span> JobType2 &#123;</span><br><span class=\"line\">      SPARK_JOB, HADOOP_JOB, FLINK_JOB;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boot</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//构造器参数是一个泛型参数，表示该EnumMap的key只能是JobType2枚举类型</span></span><br><span class=\"line\">          EnumMap  em = <span class=\"keyword\">new</span> EnumMap(JobType2.class);</span><br><span class=\"line\">          em.put(JobType2.SPARK_JOB, <span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">          <span class=\"comment\">// 报错</span></span><br><span class=\"line\">          em.put(JobType.SPARK_JOB, <span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">          System.out.println(em);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n</li>\n</ul>\n<p><strong>注意：</strong></p>\n<p>上面只是针具具体某一个序列化框架而言，具体问题一定要具体分析！</p>\n<p><strong>拓展阅读：</strong></p>\n<p>阿里Java编码规范中：“二方库”中第五条：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">【强制】二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用 枚举类型或者包含枚举类型的 POJO 对象。</span><br></pre></td></tr></table></figure>\n\n<p>约定参数可以使用枚举，但是返回值禁止含有枚举值。主要原因：</p>\n<ul>\n<li><p><strong>允许使用参数是因为客户端可以显式传入枚举值证明客户端存在枚举值，所以一般不会存在问题（但是前提必须保证客户端与服务器端依赖的枚举值版本一致，例如枚举值都一致，但是声明顺序不一致可能就会存在问题，因此在添加枚举值字段时候要保证在最后添加枚举值，不要打乱现有的枚举值顺序）。</strong></p>\n</li>\n<li><p><strong>返回值禁止是因为返回值在客户端启动时候无法校验客户端是否包含所有枚举值字段，例如客户端枚举值含有：SPARK_JOB,HADOOP_JOB；但是服务器端包含：SPARK_JOB,HADOOP_JOB，HIVE_JOB,FLINK_JOB；此时客户端返回一个FLINK_JOB客户端反序列化就会报错。</strong></p>\n</li>\n</ul>\n<p>因此需要注意枚举值作为参数在RPC接口调用存在的如上问题。（all in one的模式则不会存在此问题）。</p>\n<p><strong>拓展阅读</strong>：<a href=\"https://www.zhihu.com/question/52760637\" target=\"_blank\" rel=\"noopener\">Java枚举什么不好，《阿里巴巴JAVA开发手册》对于枚举规定的考量是什么？</a></p>"},{"title":"mybatis_index","date":"2019-06-30T08:49:29.000Z","_content":"mybatis_index\n<!-- more -->","source":"_posts/mybatis-index.md","raw":"---\ntitle: mybatis_index\ndate: 2019-06-30 16:49:29\ncategories: Mybatis\n---\nmybatis_index\n<!-- more -->","slug":"mybatis-index","published":1,"updated":"2019-07-02T13:42:25.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxng5u7i0004hz2dv73dku49","content":"<p>mybatis_index</p>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<p>mybatis_index</p>","more":""},{"title":"spark_index","date":"2019-06-30T08:49:23.000Z","_content":"\nspark_index\n<!-- more -->","source":"_posts/spark-index.md","raw":"---\ntitle: spark_index\ndate: 2019-06-30 16:49:23\ncategories: Spark\n---\n\nspark_index\n<!-- more -->","slug":"spark-index","published":1,"updated":"2019-07-02T13:42:36.438Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxng5u7j0005hz2dilxi1iap","content":"<p>spark_index</p>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<p>spark_index</p>","more":""},{"title":"基于Redis实现的分布式锁","date":"2019-07-03T16:04:38.000Z","_content":"\n分布式场景下，普遍存在同一资源的并发访问，因此对于资源需要进行同步操作，避免出现线程安全问题导致出具错乱，本节将会记录一下基于Redis实现分布式锁的相关细节。\n\n<!-- more -->\n\n\n\n**悲观锁：**\n\n所谓的悲观锁，就是比较保守，一旦进行一些需要锁的操作，就立刻需要获取到锁才能执行，没有获取到锁则失败或者等待获取锁。\n\n**乐观锁：**\n\n乐观锁比悲观锁宽松，在执行需要加锁的操作时候，先假设获取到了锁，然后对需要进行副本修改，最后进行提交时候会去比对是否存在其他线程修改了数据，如果没有修改则提交，否则失败。\n\n举例：\n\n例如对于银行某一账户的高并发操作（假设只存在排他锁，不存在共享锁），如果有大量用户进行读取和修改操作，对于悲观锁当有大量用户进行读取操作时候每一个都需要进行获取锁会严重降低性能；但是使用乐观锁就可以缓解此问题（乐观锁一般都是基于数据的版本进行实现），例如A读取数据时，B写入数据，两者同时执行时候都会假设获取到乐观锁，因此都会进行操作，假设写操作先与读操作完成，此时就会修改数据版本，随后读操作完成之后会校验数据版本，此时会发现数据版本不一致，因此本次读取就会失败。\n\n\n\n\n\n","source":"_posts/resid-distribute-lock.md","raw":"---\ntitle: 基于Redis实现的分布式锁\ndate: 2019-07-04 00:04:38\ncategories: Redis\n---\n\n分布式场景下，普遍存在同一资源的并发访问，因此对于资源需要进行同步操作，避免出现线程安全问题导致出具错乱，本节将会记录一下基于Redis实现分布式锁的相关细节。\n\n<!-- more -->\n\n\n\n**悲观锁：**\n\n所谓的悲观锁，就是比较保守，一旦进行一些需要锁的操作，就立刻需要获取到锁才能执行，没有获取到锁则失败或者等待获取锁。\n\n**乐观锁：**\n\n乐观锁比悲观锁宽松，在执行需要加锁的操作时候，先假设获取到了锁，然后对需要进行副本修改，最后进行提交时候会去比对是否存在其他线程修改了数据，如果没有修改则提交，否则失败。\n\n举例：\n\n例如对于银行某一账户的高并发操作（假设只存在排他锁，不存在共享锁），如果有大量用户进行读取和修改操作，对于悲观锁当有大量用户进行读取操作时候每一个都需要进行获取锁会严重降低性能；但是使用乐观锁就可以缓解此问题（乐观锁一般都是基于数据的版本进行实现），例如A读取数据时，B写入数据，两者同时执行时候都会假设获取到乐观锁，因此都会进行操作，假设写操作先与读操作完成，此时就会修改数据版本，随后读操作完成之后会校验数据版本，此时会发现数据版本不一致，因此本次读取就会失败。\n\n\n\n\n\n","slug":"resid-distribute-lock","published":1,"updated":"2019-07-03T16:20:47.343Z","_id":"cjxng5u7k0007hz2dyjyfqbz7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>分布式场景下，普遍存在同一资源的并发访问，因此对于资源需要进行同步操作，避免出现线程安全问题导致出具错乱，本节将会记录一下基于Redis实现分布式锁的相关细节。</p>\n<a id=\"more\"></a>\n\n\n\n<p><strong>悲观锁：</strong></p>\n<p>所谓的悲观锁，就是比较保守，一旦进行一些需要锁的操作，就立刻需要获取到锁才能执行，没有获取到锁则失败或者等待获取锁。</p>\n<p><strong>乐观锁：</strong></p>\n<p>乐观锁比悲观锁宽松，在执行需要加锁的操作时候，先假设获取到了锁，然后对需要进行副本修改，最后进行提交时候会去比对是否存在其他线程修改了数据，如果没有修改则提交，否则失败。</p>\n<p>举例：</p>\n<p>例如对于银行某一账户的高并发操作（假设只存在排他锁，不存在共享锁），如果有大量用户进行读取和修改操作，对于悲观锁当有大量用户进行读取操作时候每一个都需要进行获取锁会严重降低性能；但是使用乐观锁就可以缓解此问题（乐观锁一般都是基于数据的版本进行实现），例如A读取数据时，B写入数据，两者同时执行时候都会假设获取到乐观锁，因此都会进行操作，假设写操作先与读操作完成，此时就会修改数据版本，随后读操作完成之后会校验数据版本，此时会发现数据版本不一致，因此本次读取就会失败。</p>\n","site":{"data":{}},"excerpt":"<p>分布式场景下，普遍存在同一资源的并发访问，因此对于资源需要进行同步操作，避免出现线程安全问题导致出具错乱，本节将会记录一下基于Redis实现分布式锁的相关细节。</p>","more":"<p><strong>悲观锁：</strong></p>\n<p>所谓的悲观锁，就是比较保守，一旦进行一些需要锁的操作，就立刻需要获取到锁才能执行，没有获取到锁则失败或者等待获取锁。</p>\n<p><strong>乐观锁：</strong></p>\n<p>乐观锁比悲观锁宽松，在执行需要加锁的操作时候，先假设获取到了锁，然后对需要进行副本修改，最后进行提交时候会去比对是否存在其他线程修改了数据，如果没有修改则提交，否则失败。</p>\n<p>举例：</p>\n<p>例如对于银行某一账户的高并发操作（假设只存在排他锁，不存在共享锁），如果有大量用户进行读取和修改操作，对于悲观锁当有大量用户进行读取操作时候每一个都需要进行获取锁会严重降低性能；但是使用乐观锁就可以缓解此问题（乐观锁一般都是基于数据的版本进行实现），例如A读取数据时，B写入数据，两者同时执行时候都会假设获取到乐观锁，因此都会进行操作，假设写操作先与读操作完成，此时就会修改数据版本，随后读操作完成之后会校验数据版本，此时会发现数据版本不一致，因此本次读取就会失败。</p>"},{"title":"Redis数据安全之数据持久化","date":"2019-07-03T13:28:57.000Z","_content":"\n​\t\t\n\n\n\n​\t\t本文是一篇基于Redis In Action的读书笔记，记录一些有关学习过程中涉及的知识点。本文主要是关于Redis数据持久化相关的内容。主要是关于Redis提供的一些持久化选项如何将数据落盘到磁盘。以及Redis的复制特性，不断的将数据复制到其他节点容错已提供数据的可靠性。同时分析有关复制与持久化的优劣，如何去选择一种适合自己业务场景的方案。\n\n<!-- more -->\n\n### 数据持久化方案\n\nRedis支持两种数据方案，分别是：\n\n- 快照：它可以将某一时刻的所有数据都持久化到磁盘中。\n- 追加文件（AOF）：它会将在执行写的时候讲数据变化追加到磁盘上。\n- 如上两种方式可以单独使用，也可以结合使用甚至可以都不适用。\n\n如上方案的选择依据，主要还是需要结合数据的性质进行选择，例如对于业务系统的数据缓存，可能会随着时间经常变化，这种数据由于经常变化而且获取相对比较容易，一般就可以不开启持久化选项。但是如果数据通常不可变或者很长时间变化一次并且获取数据方式比较繁琐，例如通过大量计算得到的，这种一般开启持久化比较适合。\n\n\n\n#### 快照持久化方案\n\nRedis可以通过快照的方式获取某一时刻的数据副本，可以将数据副本拷贝到其他Redis中初始化一个具有相同数据的Redis实例。如果在新的快照数据创建完毕之前，Redis，操作系统或者硬件崩溃则会导致上次做完快照之后的数据丢失。创建快照有如下方法：\n\n- 通过客户端给Redis发送BGSAVE命令，此时Redis会Fork一个子进程进行数据快照，主进程可以继续处理客户端的数据请求操作。\n- 也可以通过客户端发送SAVE命令给Redis，此时Redis也会进行快照操作，但是此时并不是子进程进行快照，而是服务进行进行快照操作，此期间Redis服务不可用，通常不会使用这种方式，一般都是在内存不足无法同时服务并进行快照操作时候才会使用SAVE\n- 通过配置save操作，save配置格式，例如：save 60 10000 表示60秒内有10000次写操作则进行一次快照，系统会自动触发BGSAVE。如果用户配置了多个save只要有一个符合条件即可进行快照操作。\n- 当Redis收到SHUTDOWN或者标准TERM时候会执行一个SAVE命令，阻塞客户端不在提供服务，进行数据快照。\n- 当一个Redis A连接到Redis B，同时向B发送一个SYNC时，B服务器最近没有执行快照，那么B将会执行快照然后复制数据到A。\n\n使用快照方式保存数据，**一定要记住：**上一次快照与系统崩溃期间的数据丢失是可以忍受的，否则不应该选择此方案。应该选择追加文件的方式，即AOF。\n\n\n\n**实战案例：**\n\n- 如果考虑降低快照对资源的消耗，同时对于硬件比较信任的话，可以考虑持久化时间设置的长一些，例如：\n\n  save 900 1 ，也就是说15分钟内又一次写操作便进行一个快照。如果使用快照的方式并且存储大量的数据，尽可能在开发环境中模拟一个预生产环境相同的环境，包括：软件环境，已经环境以及负载，在开发环境中找到一个比较适合的Save方案，避免过于频繁或者过于稀少的快照操作。过于频繁会导致资源浪费，过于稀少会导致数据丢失。\n\n  \n\n- 对日志进行聚合计算\n\n  例如我们在对日志进行处理的时候，计算页面浏览量时候；可以将页面浏览次数以及处理的日志文件名称以及处理的日志的文件偏移一并快照起来，这样如果系统崩溃的话可以重新通过日志偏移得到一个正确的结果。\n\n  \n\n- 快照数据量大\n\n  如果Redis中需要进行快照的数据量只有几GB级别，那么进行快照操作还是可比较快的，但是如果需要快照的数据量在即十GB的话并且操作系统剩余内存不充足的情况下进行快照可能会导致系统停顿，也可能导致系统大量使用虚拟页最终导致Redis性能降低至不可用状态。对于Redis执行BGSAVE操作耗时主要取决于所在的操作系统的资源情况。Redis进程没占用1GB内存则创建子进程就需要多花费10-20毫秒，当我们占用50GB时候可能会挺准0.5-1.0秒。为了方案Redis创建子进程导致停顿的出现，我们可以考虑关闭Redis的自动保存选项，从而我们通过定时任务触发BGSAVE或者SAVE，这样我们可以控制停顿出现的时间。\n\n  如果集群资源不充足的话我们可以考虑使用SAVE进行快照，虽然SAVE或阻塞Redis服务，但是SAVE不会Fork一个子进程，而是独自一个进程进行快照没有资源争夺，通常在资源不充足时候比BGSAVE要快的多。据Redis In Action作者经验，对于一个64GB内存的XEN的虚拟上，Redis占用50GB内存，执行BGSAVE时候光Fork一个子进程就需要15秒以上，生成快照需要10-20分钟。但是对于使用SAVE的话则3-5分钟即可完成。对于关闭了自动快照选项转向手动快照而言，我们可以通过脚本在业务流量低的时候进行数据快照，例如在凌晨三点时刻，此时可以通过一些手段在此期间暂定业务系统对Redis的方案，等待快照完毕之后Redis继续提供服务。\n\n  如果用户可以妥善的备份数据的话，并且可以接受偶尔数据丢失的问题，此方案比较适合，但是无法忍受的话需要转向AOF。\n\n\n\n#### AOF持久化\n\n对于AOF持久化，通常执行写操作时候会将写操作命令追加到文件的末尾，以此记录数据的变化。因此对于数据恢复时候只需要从头至尾的执行一遍AOF文件即可恢复AOF记录的所有数据。在AOF模式下存在一个比较重要的参数：appendfsync配置对AOF文件的同步频率。\n\n**注意⚠️：**\n\n<u>文件同步将会发生三件事情，分别是：1、file.write方法调用，2、然后将数据写到操作系统的缓冲区，3、然后操作系统在将来某一个时刻将数据写到磁盘中；而只有当数据被写到磁盘才算真正的保存到磁盘中。用户可以通过file.flush方法请求操作系统尽快(注意是尽快)将缓存区数据写到磁盘，具体何时真正写由操作系统决定。</u>\n<u>除了上面方法之外，用户可以命令操作系统将文件同步（sync）到磁盘，这种方案将会阻塞，直到缓冲区数据写到磁盘上。</u>\n\n**重要参数appendfsync说明：**\n\n|   选项   |                        同步频率                        |\n| :------: | :----------------------------------------------------: |\n|  always  | 每一个Redis写命令都要立刻同步到磁盘，严重降低Redis性能 |\n| everysec |               每秒执行一个线式同步到磁盘               |\n|    no    |              让操作系统决定何时同步到磁盘              |\n\n备注：如果用户设置的**always**的话，Redis每秒都要同步到磁盘，这种方式虽然出现丢失的数据少，但是这种方式需要频繁的写磁盘，因而Redis的性能会受到磁盘的限制：转盘式磁盘在这种方式下每秒最终能处理200个写命令；而固态硬盘每秒最多只能写几万个命令。\n\n**警告⚠️：**\n\n<u>虽然always对于固态每秒可以处理几万个写命令，但是这种每次写入少量数据的方式会导致写入放大进而降低固态磁盘的寿命，可能会几年降低到几个月。</u>\n\n对于**everysec**选项一般比较合适，用户可以考虑使用此配置让Redis每秒进行一个AOF文件同步。**开启此方案与不适用任何持久化方案的性能所差无几。**而且每秒同步一次数据，当系统崩溃时候最多只会丢失一秒的数据。\n\n最后不推荐使用no，此方案当操作系统需要同步数据的缓冲区被写满之后。可能写磁盘需要耗费较多的时间，因此Redis的写操作将会被阻塞，导致Redis处理请求的速度下降。因此不推荐使用no选项。AOF持久化存在一个缺陷就是AOF文件太大。\n\n\n\n**AOF文件重写**\n\nAOF方式可以将数据丢失窗口降低到一秒并且性能有保证；那么还有什么理由不选择AOF呢？AOF也存在其问题，就是随着Redis的长期运行会导致AOF文件过大，极端情况下会占满系统磁盘，还有另一个问题就是Redis重启时候执行AOF文件耗时。\n\n为了解决AOF文件不断扩大问题，用户可以向Redis发送BGREWRITEAOF命令进行AOF文件重写，缩写大小。BGREWRITEAOF与BGSAVE命令类似，Redis会创建一个子进程进行AOF重写，因为BGREWRITEAOF也同样需要创建子进程，因而也存在影响Redis性能问题。如果不对AOF文件加以控制的话,AOF文件将会是快照文件的几倍，同时删除一个比较大的AOF文件时候也会导致操作系统hang数秒。\n\n为了解决如上的问题，Redis也提供了类似与save的配置项来自动的进行AOF文件重写，以避免AOF文件过大。两个比较重要配置参数：\n\n```properties\n# 重写文件的最小大小，是一个参考基值\nauto-aof-rewrite-min-size 64mb\n# 大于文件大小基值的百分比进行重写\nauto-aof-rewrite-percentage 100\n```\n\n如上配置含义是当AOF文件大于64MB的二倍，即大于128MB时候进行重写，**也就是操作100%**。\n\n\n\n**总结：**\n\n无论是快照方式还是AOF方式，数据持久化到磁盘都是必要的，持久化之外还需要将持久化文件备份到其他节点容灾。Redis持久化数据完整性得以保证，但是随着系统并发量（或者负载）的上升，对Redis扩展为集群的方案是必不可少的，因此对于集群内部节点之间的数据同步便是一个重要的认为。下一篇将会讲解一些Redis集群内节点数据复制的方案。","source":"_posts/redis-data-safe.md","raw":"---\ntitle: Redis数据安全之数据持久化\ndate: 2019-07-03 21:28:57\ncategories: Redis\n---\n\n​\t\t\n\n\n\n​\t\t本文是一篇基于Redis In Action的读书笔记，记录一些有关学习过程中涉及的知识点。本文主要是关于Redis数据持久化相关的内容。主要是关于Redis提供的一些持久化选项如何将数据落盘到磁盘。以及Redis的复制特性，不断的将数据复制到其他节点容错已提供数据的可靠性。同时分析有关复制与持久化的优劣，如何去选择一种适合自己业务场景的方案。\n\n<!-- more -->\n\n### 数据持久化方案\n\nRedis支持两种数据方案，分别是：\n\n- 快照：它可以将某一时刻的所有数据都持久化到磁盘中。\n- 追加文件（AOF）：它会将在执行写的时候讲数据变化追加到磁盘上。\n- 如上两种方式可以单独使用，也可以结合使用甚至可以都不适用。\n\n如上方案的选择依据，主要还是需要结合数据的性质进行选择，例如对于业务系统的数据缓存，可能会随着时间经常变化，这种数据由于经常变化而且获取相对比较容易，一般就可以不开启持久化选项。但是如果数据通常不可变或者很长时间变化一次并且获取数据方式比较繁琐，例如通过大量计算得到的，这种一般开启持久化比较适合。\n\n\n\n#### 快照持久化方案\n\nRedis可以通过快照的方式获取某一时刻的数据副本，可以将数据副本拷贝到其他Redis中初始化一个具有相同数据的Redis实例。如果在新的快照数据创建完毕之前，Redis，操作系统或者硬件崩溃则会导致上次做完快照之后的数据丢失。创建快照有如下方法：\n\n- 通过客户端给Redis发送BGSAVE命令，此时Redis会Fork一个子进程进行数据快照，主进程可以继续处理客户端的数据请求操作。\n- 也可以通过客户端发送SAVE命令给Redis，此时Redis也会进行快照操作，但是此时并不是子进程进行快照，而是服务进行进行快照操作，此期间Redis服务不可用，通常不会使用这种方式，一般都是在内存不足无法同时服务并进行快照操作时候才会使用SAVE\n- 通过配置save操作，save配置格式，例如：save 60 10000 表示60秒内有10000次写操作则进行一次快照，系统会自动触发BGSAVE。如果用户配置了多个save只要有一个符合条件即可进行快照操作。\n- 当Redis收到SHUTDOWN或者标准TERM时候会执行一个SAVE命令，阻塞客户端不在提供服务，进行数据快照。\n- 当一个Redis A连接到Redis B，同时向B发送一个SYNC时，B服务器最近没有执行快照，那么B将会执行快照然后复制数据到A。\n\n使用快照方式保存数据，**一定要记住：**上一次快照与系统崩溃期间的数据丢失是可以忍受的，否则不应该选择此方案。应该选择追加文件的方式，即AOF。\n\n\n\n**实战案例：**\n\n- 如果考虑降低快照对资源的消耗，同时对于硬件比较信任的话，可以考虑持久化时间设置的长一些，例如：\n\n  save 900 1 ，也就是说15分钟内又一次写操作便进行一个快照。如果使用快照的方式并且存储大量的数据，尽可能在开发环境中模拟一个预生产环境相同的环境，包括：软件环境，已经环境以及负载，在开发环境中找到一个比较适合的Save方案，避免过于频繁或者过于稀少的快照操作。过于频繁会导致资源浪费，过于稀少会导致数据丢失。\n\n  \n\n- 对日志进行聚合计算\n\n  例如我们在对日志进行处理的时候，计算页面浏览量时候；可以将页面浏览次数以及处理的日志文件名称以及处理的日志的文件偏移一并快照起来，这样如果系统崩溃的话可以重新通过日志偏移得到一个正确的结果。\n\n  \n\n- 快照数据量大\n\n  如果Redis中需要进行快照的数据量只有几GB级别，那么进行快照操作还是可比较快的，但是如果需要快照的数据量在即十GB的话并且操作系统剩余内存不充足的情况下进行快照可能会导致系统停顿，也可能导致系统大量使用虚拟页最终导致Redis性能降低至不可用状态。对于Redis执行BGSAVE操作耗时主要取决于所在的操作系统的资源情况。Redis进程没占用1GB内存则创建子进程就需要多花费10-20毫秒，当我们占用50GB时候可能会挺准0.5-1.0秒。为了方案Redis创建子进程导致停顿的出现，我们可以考虑关闭Redis的自动保存选项，从而我们通过定时任务触发BGSAVE或者SAVE，这样我们可以控制停顿出现的时间。\n\n  如果集群资源不充足的话我们可以考虑使用SAVE进行快照，虽然SAVE或阻塞Redis服务，但是SAVE不会Fork一个子进程，而是独自一个进程进行快照没有资源争夺，通常在资源不充足时候比BGSAVE要快的多。据Redis In Action作者经验，对于一个64GB内存的XEN的虚拟上，Redis占用50GB内存，执行BGSAVE时候光Fork一个子进程就需要15秒以上，生成快照需要10-20分钟。但是对于使用SAVE的话则3-5分钟即可完成。对于关闭了自动快照选项转向手动快照而言，我们可以通过脚本在业务流量低的时候进行数据快照，例如在凌晨三点时刻，此时可以通过一些手段在此期间暂定业务系统对Redis的方案，等待快照完毕之后Redis继续提供服务。\n\n  如果用户可以妥善的备份数据的话，并且可以接受偶尔数据丢失的问题，此方案比较适合，但是无法忍受的话需要转向AOF。\n\n\n\n#### AOF持久化\n\n对于AOF持久化，通常执行写操作时候会将写操作命令追加到文件的末尾，以此记录数据的变化。因此对于数据恢复时候只需要从头至尾的执行一遍AOF文件即可恢复AOF记录的所有数据。在AOF模式下存在一个比较重要的参数：appendfsync配置对AOF文件的同步频率。\n\n**注意⚠️：**\n\n<u>文件同步将会发生三件事情，分别是：1、file.write方法调用，2、然后将数据写到操作系统的缓冲区，3、然后操作系统在将来某一个时刻将数据写到磁盘中；而只有当数据被写到磁盘才算真正的保存到磁盘中。用户可以通过file.flush方法请求操作系统尽快(注意是尽快)将缓存区数据写到磁盘，具体何时真正写由操作系统决定。</u>\n<u>除了上面方法之外，用户可以命令操作系统将文件同步（sync）到磁盘，这种方案将会阻塞，直到缓冲区数据写到磁盘上。</u>\n\n**重要参数appendfsync说明：**\n\n|   选项   |                        同步频率                        |\n| :------: | :----------------------------------------------------: |\n|  always  | 每一个Redis写命令都要立刻同步到磁盘，严重降低Redis性能 |\n| everysec |               每秒执行一个线式同步到磁盘               |\n|    no    |              让操作系统决定何时同步到磁盘              |\n\n备注：如果用户设置的**always**的话，Redis每秒都要同步到磁盘，这种方式虽然出现丢失的数据少，但是这种方式需要频繁的写磁盘，因而Redis的性能会受到磁盘的限制：转盘式磁盘在这种方式下每秒最终能处理200个写命令；而固态硬盘每秒最多只能写几万个命令。\n\n**警告⚠️：**\n\n<u>虽然always对于固态每秒可以处理几万个写命令，但是这种每次写入少量数据的方式会导致写入放大进而降低固态磁盘的寿命，可能会几年降低到几个月。</u>\n\n对于**everysec**选项一般比较合适，用户可以考虑使用此配置让Redis每秒进行一个AOF文件同步。**开启此方案与不适用任何持久化方案的性能所差无几。**而且每秒同步一次数据，当系统崩溃时候最多只会丢失一秒的数据。\n\n最后不推荐使用no，此方案当操作系统需要同步数据的缓冲区被写满之后。可能写磁盘需要耗费较多的时间，因此Redis的写操作将会被阻塞，导致Redis处理请求的速度下降。因此不推荐使用no选项。AOF持久化存在一个缺陷就是AOF文件太大。\n\n\n\n**AOF文件重写**\n\nAOF方式可以将数据丢失窗口降低到一秒并且性能有保证；那么还有什么理由不选择AOF呢？AOF也存在其问题，就是随着Redis的长期运行会导致AOF文件过大，极端情况下会占满系统磁盘，还有另一个问题就是Redis重启时候执行AOF文件耗时。\n\n为了解决AOF文件不断扩大问题，用户可以向Redis发送BGREWRITEAOF命令进行AOF文件重写，缩写大小。BGREWRITEAOF与BGSAVE命令类似，Redis会创建一个子进程进行AOF重写，因为BGREWRITEAOF也同样需要创建子进程，因而也存在影响Redis性能问题。如果不对AOF文件加以控制的话,AOF文件将会是快照文件的几倍，同时删除一个比较大的AOF文件时候也会导致操作系统hang数秒。\n\n为了解决如上的问题，Redis也提供了类似与save的配置项来自动的进行AOF文件重写，以避免AOF文件过大。两个比较重要配置参数：\n\n```properties\n# 重写文件的最小大小，是一个参考基值\nauto-aof-rewrite-min-size 64mb\n# 大于文件大小基值的百分比进行重写\nauto-aof-rewrite-percentage 100\n```\n\n如上配置含义是当AOF文件大于64MB的二倍，即大于128MB时候进行重写，**也就是操作100%**。\n\n\n\n**总结：**\n\n无论是快照方式还是AOF方式，数据持久化到磁盘都是必要的，持久化之外还需要将持久化文件备份到其他节点容灾。Redis持久化数据完整性得以保证，但是随着系统并发量（或者负载）的上升，对Redis扩展为集群的方案是必不可少的，因此对于集群内部节点之间的数据同步便是一个重要的认为。下一篇将会讲解一些Redis集群内节点数据复制的方案。","slug":"redis-data-safe","published":1,"updated":"2019-07-03T15:33:00.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxng5u7l0008hz2dj5i44esr","content":"<p>​        </p>\n<p>​        本文是一篇基于Redis In Action的读书笔记，记录一些有关学习过程中涉及的知识点。本文主要是关于Redis数据持久化相关的内容。主要是关于Redis提供的一些持久化选项如何将数据落盘到磁盘。以及Redis的复制特性，不断的将数据复制到其他节点容错已提供数据的可靠性。同时分析有关复制与持久化的优劣，如何去选择一种适合自己业务场景的方案。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"数据持久化方案\"><a href=\"#数据持久化方案\" class=\"headerlink\" title=\"数据持久化方案\"></a>数据持久化方案</h3><p>Redis支持两种数据方案，分别是：</p>\n<ul>\n<li>快照：它可以将某一时刻的所有数据都持久化到磁盘中。</li>\n<li>追加文件（AOF）：它会将在执行写的时候讲数据变化追加到磁盘上。</li>\n<li>如上两种方式可以单独使用，也可以结合使用甚至可以都不适用。</li>\n</ul>\n<p>如上方案的选择依据，主要还是需要结合数据的性质进行选择，例如对于业务系统的数据缓存，可能会随着时间经常变化，这种数据由于经常变化而且获取相对比较容易，一般就可以不开启持久化选项。但是如果数据通常不可变或者很长时间变化一次并且获取数据方式比较繁琐，例如通过大量计算得到的，这种一般开启持久化比较适合。</p>\n<h4 id=\"快照持久化方案\"><a href=\"#快照持久化方案\" class=\"headerlink\" title=\"快照持久化方案\"></a>快照持久化方案</h4><p>Redis可以通过快照的方式获取某一时刻的数据副本，可以将数据副本拷贝到其他Redis中初始化一个具有相同数据的Redis实例。如果在新的快照数据创建完毕之前，Redis，操作系统或者硬件崩溃则会导致上次做完快照之后的数据丢失。创建快照有如下方法：</p>\n<ul>\n<li>通过客户端给Redis发送BGSAVE命令，此时Redis会Fork一个子进程进行数据快照，主进程可以继续处理客户端的数据请求操作。</li>\n<li>也可以通过客户端发送SAVE命令给Redis，此时Redis也会进行快照操作，但是此时并不是子进程进行快照，而是服务进行进行快照操作，此期间Redis服务不可用，通常不会使用这种方式，一般都是在内存不足无法同时服务并进行快照操作时候才会使用SAVE</li>\n<li>通过配置save操作，save配置格式，例如：save 60 10000 表示60秒内有10000次写操作则进行一次快照，系统会自动触发BGSAVE。如果用户配置了多个save只要有一个符合条件即可进行快照操作。</li>\n<li>当Redis收到SHUTDOWN或者标准TERM时候会执行一个SAVE命令，阻塞客户端不在提供服务，进行数据快照。</li>\n<li>当一个Redis A连接到Redis B，同时向B发送一个SYNC时，B服务器最近没有执行快照，那么B将会执行快照然后复制数据到A。</li>\n</ul>\n<p>使用快照方式保存数据，<strong>一定要记住：</strong>上一次快照与系统崩溃期间的数据丢失是可以忍受的，否则不应该选择此方案。应该选择追加文件的方式，即AOF。</p>\n<p><strong>实战案例：</strong></p>\n<ul>\n<li><p>如果考虑降低快照对资源的消耗，同时对于硬件比较信任的话，可以考虑持久化时间设置的长一些，例如：</p>\n<p>save 900 1 ，也就是说15分钟内又一次写操作便进行一个快照。如果使用快照的方式并且存储大量的数据，尽可能在开发环境中模拟一个预生产环境相同的环境，包括：软件环境，已经环境以及负载，在开发环境中找到一个比较适合的Save方案，避免过于频繁或者过于稀少的快照操作。过于频繁会导致资源浪费，过于稀少会导致数据丢失。</p>\n</li>\n</ul>\n<ul>\n<li><p>对日志进行聚合计算</p>\n<p>例如我们在对日志进行处理的时候，计算页面浏览量时候；可以将页面浏览次数以及处理的日志文件名称以及处理的日志的文件偏移一并快照起来，这样如果系统崩溃的话可以重新通过日志偏移得到一个正确的结果。</p>\n</li>\n</ul>\n<ul>\n<li><p>快照数据量大</p>\n<p>如果Redis中需要进行快照的数据量只有几GB级别，那么进行快照操作还是可比较快的，但是如果需要快照的数据量在即十GB的话并且操作系统剩余内存不充足的情况下进行快照可能会导致系统停顿，也可能导致系统大量使用虚拟页最终导致Redis性能降低至不可用状态。对于Redis执行BGSAVE操作耗时主要取决于所在的操作系统的资源情况。Redis进程没占用1GB内存则创建子进程就需要多花费10-20毫秒，当我们占用50GB时候可能会挺准0.5-1.0秒。为了方案Redis创建子进程导致停顿的出现，我们可以考虑关闭Redis的自动保存选项，从而我们通过定时任务触发BGSAVE或者SAVE，这样我们可以控制停顿出现的时间。</p>\n<p>如果集群资源不充足的话我们可以考虑使用SAVE进行快照，虽然SAVE或阻塞Redis服务，但是SAVE不会Fork一个子进程，而是独自一个进程进行快照没有资源争夺，通常在资源不充足时候比BGSAVE要快的多。据Redis In Action作者经验，对于一个64GB内存的XEN的虚拟上，Redis占用50GB内存，执行BGSAVE时候光Fork一个子进程就需要15秒以上，生成快照需要10-20分钟。但是对于使用SAVE的话则3-5分钟即可完成。对于关闭了自动快照选项转向手动快照而言，我们可以通过脚本在业务流量低的时候进行数据快照，例如在凌晨三点时刻，此时可以通过一些手段在此期间暂定业务系统对Redis的方案，等待快照完毕之后Redis继续提供服务。</p>\n<p>如果用户可以妥善的备份数据的话，并且可以接受偶尔数据丢失的问题，此方案比较适合，但是无法忍受的话需要转向AOF。</p>\n</li>\n</ul>\n<h4 id=\"AOF持久化\"><a href=\"#AOF持久化\" class=\"headerlink\" title=\"AOF持久化\"></a>AOF持久化</h4><p>对于AOF持久化，通常执行写操作时候会将写操作命令追加到文件的末尾，以此记录数据的变化。因此对于数据恢复时候只需要从头至尾的执行一遍AOF文件即可恢复AOF记录的所有数据。在AOF模式下存在一个比较重要的参数：appendfsync配置对AOF文件的同步频率。</p>\n<p><strong>注意⚠️：</strong></p>\n<p><u>文件同步将会发生三件事情，分别是：1、file.write方法调用，2、然后将数据写到操作系统的缓冲区，3、然后操作系统在将来某一个时刻将数据写到磁盘中；而只有当数据被写到磁盘才算真正的保存到磁盘中。用户可以通过file.flush方法请求操作系统尽快(注意是尽快)将缓存区数据写到磁盘，具体何时真正写由操作系统决定。</u><br><u>除了上面方法之外，用户可以命令操作系统将文件同步（sync）到磁盘，这种方案将会阻塞，直到缓冲区数据写到磁盘上。</u></p>\n<p><strong>重要参数appendfsync说明：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">选项</th>\n<th align=\"center\">同步频率</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">always</td>\n<td align=\"center\">每一个Redis写命令都要立刻同步到磁盘，严重降低Redis性能</td>\n</tr>\n<tr>\n<td align=\"center\">everysec</td>\n<td align=\"center\">每秒执行一个线式同步到磁盘</td>\n</tr>\n<tr>\n<td align=\"center\">no</td>\n<td align=\"center\">让操作系统决定何时同步到磁盘</td>\n</tr>\n</tbody></table>\n<p>备注：如果用户设置的<strong>always</strong>的话，Redis每秒都要同步到磁盘，这种方式虽然出现丢失的数据少，但是这种方式需要频繁的写磁盘，因而Redis的性能会受到磁盘的限制：转盘式磁盘在这种方式下每秒最终能处理200个写命令；而固态硬盘每秒最多只能写几万个命令。</p>\n<p><strong>警告⚠️：</strong></p>\n<p><u>虽然always对于固态每秒可以处理几万个写命令，但是这种每次写入少量数据的方式会导致写入放大进而降低固态磁盘的寿命，可能会几年降低到几个月。</u></p>\n<p>对于<strong>everysec</strong>选项一般比较合适，用户可以考虑使用此配置让Redis每秒进行一个AOF文件同步。<strong>开启此方案与不适用任何持久化方案的性能所差无几。</strong>而且每秒同步一次数据，当系统崩溃时候最多只会丢失一秒的数据。</p>\n<p>最后不推荐使用no，此方案当操作系统需要同步数据的缓冲区被写满之后。可能写磁盘需要耗费较多的时间，因此Redis的写操作将会被阻塞，导致Redis处理请求的速度下降。因此不推荐使用no选项。AOF持久化存在一个缺陷就是AOF文件太大。</p>\n<p><strong>AOF文件重写</strong></p>\n<p>AOF方式可以将数据丢失窗口降低到一秒并且性能有保证；那么还有什么理由不选择AOF呢？AOF也存在其问题，就是随着Redis的长期运行会导致AOF文件过大，极端情况下会占满系统磁盘，还有另一个问题就是Redis重启时候执行AOF文件耗时。</p>\n<p>为了解决AOF文件不断扩大问题，用户可以向Redis发送BGREWRITEAOF命令进行AOF文件重写，缩写大小。BGREWRITEAOF与BGSAVE命令类似，Redis会创建一个子进程进行AOF重写，因为BGREWRITEAOF也同样需要创建子进程，因而也存在影响Redis性能问题。如果不对AOF文件加以控制的话,AOF文件将会是快照文件的几倍，同时删除一个比较大的AOF文件时候也会导致操作系统hang数秒。</p>\n<p>为了解决如上的问题，Redis也提供了类似与save的配置项来自动的进行AOF文件重写，以避免AOF文件过大。两个比较重要配置参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 重写文件的最小大小，是一个参考基值</span><br><span class=\"line\">auto-aof-rewrite-min-size 64mb</span><br><span class=\"line\"># 大于文件大小基值的百分比进行重写</span><br><span class=\"line\">auto-aof-rewrite-percentage 100</span><br></pre></td></tr></table></figure>\n\n<p>如上配置含义是当AOF文件大于64MB的二倍，即大于128MB时候进行重写，<strong>也就是操作100%</strong>。</p>\n<p><strong>总结：</strong></p>\n<p>无论是快照方式还是AOF方式，数据持久化到磁盘都是必要的，持久化之外还需要将持久化文件备份到其他节点容灾。Redis持久化数据完整性得以保证，但是随着系统并发量（或者负载）的上升，对Redis扩展为集群的方案是必不可少的，因此对于集群内部节点之间的数据同步便是一个重要的认为。下一篇将会讲解一些Redis集群内节点数据复制的方案。</p>\n","site":{"data":{}},"excerpt":"<p>​        </p>\n<p>​        本文是一篇基于Redis In Action的读书笔记，记录一些有关学习过程中涉及的知识点。本文主要是关于Redis数据持久化相关的内容。主要是关于Redis提供的一些持久化选项如何将数据落盘到磁盘。以及Redis的复制特性，不断的将数据复制到其他节点容错已提供数据的可靠性。同时分析有关复制与持久化的优劣，如何去选择一种适合自己业务场景的方案。</p>","more":"<h3 id=\"数据持久化方案\"><a href=\"#数据持久化方案\" class=\"headerlink\" title=\"数据持久化方案\"></a>数据持久化方案</h3><p>Redis支持两种数据方案，分别是：</p>\n<ul>\n<li>快照：它可以将某一时刻的所有数据都持久化到磁盘中。</li>\n<li>追加文件（AOF）：它会将在执行写的时候讲数据变化追加到磁盘上。</li>\n<li>如上两种方式可以单独使用，也可以结合使用甚至可以都不适用。</li>\n</ul>\n<p>如上方案的选择依据，主要还是需要结合数据的性质进行选择，例如对于业务系统的数据缓存，可能会随着时间经常变化，这种数据由于经常变化而且获取相对比较容易，一般就可以不开启持久化选项。但是如果数据通常不可变或者很长时间变化一次并且获取数据方式比较繁琐，例如通过大量计算得到的，这种一般开启持久化比较适合。</p>\n<h4 id=\"快照持久化方案\"><a href=\"#快照持久化方案\" class=\"headerlink\" title=\"快照持久化方案\"></a>快照持久化方案</h4><p>Redis可以通过快照的方式获取某一时刻的数据副本，可以将数据副本拷贝到其他Redis中初始化一个具有相同数据的Redis实例。如果在新的快照数据创建完毕之前，Redis，操作系统或者硬件崩溃则会导致上次做完快照之后的数据丢失。创建快照有如下方法：</p>\n<ul>\n<li>通过客户端给Redis发送BGSAVE命令，此时Redis会Fork一个子进程进行数据快照，主进程可以继续处理客户端的数据请求操作。</li>\n<li>也可以通过客户端发送SAVE命令给Redis，此时Redis也会进行快照操作，但是此时并不是子进程进行快照，而是服务进行进行快照操作，此期间Redis服务不可用，通常不会使用这种方式，一般都是在内存不足无法同时服务并进行快照操作时候才会使用SAVE</li>\n<li>通过配置save操作，save配置格式，例如：save 60 10000 表示60秒内有10000次写操作则进行一次快照，系统会自动触发BGSAVE。如果用户配置了多个save只要有一个符合条件即可进行快照操作。</li>\n<li>当Redis收到SHUTDOWN或者标准TERM时候会执行一个SAVE命令，阻塞客户端不在提供服务，进行数据快照。</li>\n<li>当一个Redis A连接到Redis B，同时向B发送一个SYNC时，B服务器最近没有执行快照，那么B将会执行快照然后复制数据到A。</li>\n</ul>\n<p>使用快照方式保存数据，<strong>一定要记住：</strong>上一次快照与系统崩溃期间的数据丢失是可以忍受的，否则不应该选择此方案。应该选择追加文件的方式，即AOF。</p>\n<p><strong>实战案例：</strong></p>\n<ul>\n<li><p>如果考虑降低快照对资源的消耗，同时对于硬件比较信任的话，可以考虑持久化时间设置的长一些，例如：</p>\n<p>save 900 1 ，也就是说15分钟内又一次写操作便进行一个快照。如果使用快照的方式并且存储大量的数据，尽可能在开发环境中模拟一个预生产环境相同的环境，包括：软件环境，已经环境以及负载，在开发环境中找到一个比较适合的Save方案，避免过于频繁或者过于稀少的快照操作。过于频繁会导致资源浪费，过于稀少会导致数据丢失。</p>\n</li>\n</ul>\n<ul>\n<li><p>对日志进行聚合计算</p>\n<p>例如我们在对日志进行处理的时候，计算页面浏览量时候；可以将页面浏览次数以及处理的日志文件名称以及处理的日志的文件偏移一并快照起来，这样如果系统崩溃的话可以重新通过日志偏移得到一个正确的结果。</p>\n</li>\n</ul>\n<ul>\n<li><p>快照数据量大</p>\n<p>如果Redis中需要进行快照的数据量只有几GB级别，那么进行快照操作还是可比较快的，但是如果需要快照的数据量在即十GB的话并且操作系统剩余内存不充足的情况下进行快照可能会导致系统停顿，也可能导致系统大量使用虚拟页最终导致Redis性能降低至不可用状态。对于Redis执行BGSAVE操作耗时主要取决于所在的操作系统的资源情况。Redis进程没占用1GB内存则创建子进程就需要多花费10-20毫秒，当我们占用50GB时候可能会挺准0.5-1.0秒。为了方案Redis创建子进程导致停顿的出现，我们可以考虑关闭Redis的自动保存选项，从而我们通过定时任务触发BGSAVE或者SAVE，这样我们可以控制停顿出现的时间。</p>\n<p>如果集群资源不充足的话我们可以考虑使用SAVE进行快照，虽然SAVE或阻塞Redis服务，但是SAVE不会Fork一个子进程，而是独自一个进程进行快照没有资源争夺，通常在资源不充足时候比BGSAVE要快的多。据Redis In Action作者经验，对于一个64GB内存的XEN的虚拟上，Redis占用50GB内存，执行BGSAVE时候光Fork一个子进程就需要15秒以上，生成快照需要10-20分钟。但是对于使用SAVE的话则3-5分钟即可完成。对于关闭了自动快照选项转向手动快照而言，我们可以通过脚本在业务流量低的时候进行数据快照，例如在凌晨三点时刻，此时可以通过一些手段在此期间暂定业务系统对Redis的方案，等待快照完毕之后Redis继续提供服务。</p>\n<p>如果用户可以妥善的备份数据的话，并且可以接受偶尔数据丢失的问题，此方案比较适合，但是无法忍受的话需要转向AOF。</p>\n</li>\n</ul>\n<h4 id=\"AOF持久化\"><a href=\"#AOF持久化\" class=\"headerlink\" title=\"AOF持久化\"></a>AOF持久化</h4><p>对于AOF持久化，通常执行写操作时候会将写操作命令追加到文件的末尾，以此记录数据的变化。因此对于数据恢复时候只需要从头至尾的执行一遍AOF文件即可恢复AOF记录的所有数据。在AOF模式下存在一个比较重要的参数：appendfsync配置对AOF文件的同步频率。</p>\n<p><strong>注意⚠️：</strong></p>\n<p><u>文件同步将会发生三件事情，分别是：1、file.write方法调用，2、然后将数据写到操作系统的缓冲区，3、然后操作系统在将来某一个时刻将数据写到磁盘中；而只有当数据被写到磁盘才算真正的保存到磁盘中。用户可以通过file.flush方法请求操作系统尽快(注意是尽快)将缓存区数据写到磁盘，具体何时真正写由操作系统决定。</u><br><u>除了上面方法之外，用户可以命令操作系统将文件同步（sync）到磁盘，这种方案将会阻塞，直到缓冲区数据写到磁盘上。</u></p>\n<p><strong>重要参数appendfsync说明：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">选项</th>\n<th align=\"center\">同步频率</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">always</td>\n<td align=\"center\">每一个Redis写命令都要立刻同步到磁盘，严重降低Redis性能</td>\n</tr>\n<tr>\n<td align=\"center\">everysec</td>\n<td align=\"center\">每秒执行一个线式同步到磁盘</td>\n</tr>\n<tr>\n<td align=\"center\">no</td>\n<td align=\"center\">让操作系统决定何时同步到磁盘</td>\n</tr>\n</tbody></table>\n<p>备注：如果用户设置的<strong>always</strong>的话，Redis每秒都要同步到磁盘，这种方式虽然出现丢失的数据少，但是这种方式需要频繁的写磁盘，因而Redis的性能会受到磁盘的限制：转盘式磁盘在这种方式下每秒最终能处理200个写命令；而固态硬盘每秒最多只能写几万个命令。</p>\n<p><strong>警告⚠️：</strong></p>\n<p><u>虽然always对于固态每秒可以处理几万个写命令，但是这种每次写入少量数据的方式会导致写入放大进而降低固态磁盘的寿命，可能会几年降低到几个月。</u></p>\n<p>对于<strong>everysec</strong>选项一般比较合适，用户可以考虑使用此配置让Redis每秒进行一个AOF文件同步。<strong>开启此方案与不适用任何持久化方案的性能所差无几。</strong>而且每秒同步一次数据，当系统崩溃时候最多只会丢失一秒的数据。</p>\n<p>最后不推荐使用no，此方案当操作系统需要同步数据的缓冲区被写满之后。可能写磁盘需要耗费较多的时间，因此Redis的写操作将会被阻塞，导致Redis处理请求的速度下降。因此不推荐使用no选项。AOF持久化存在一个缺陷就是AOF文件太大。</p>\n<p><strong>AOF文件重写</strong></p>\n<p>AOF方式可以将数据丢失窗口降低到一秒并且性能有保证；那么还有什么理由不选择AOF呢？AOF也存在其问题，就是随着Redis的长期运行会导致AOF文件过大，极端情况下会占满系统磁盘，还有另一个问题就是Redis重启时候执行AOF文件耗时。</p>\n<p>为了解决AOF文件不断扩大问题，用户可以向Redis发送BGREWRITEAOF命令进行AOF文件重写，缩写大小。BGREWRITEAOF与BGSAVE命令类似，Redis会创建一个子进程进行AOF重写，因为BGREWRITEAOF也同样需要创建子进程，因而也存在影响Redis性能问题。如果不对AOF文件加以控制的话,AOF文件将会是快照文件的几倍，同时删除一个比较大的AOF文件时候也会导致操作系统hang数秒。</p>\n<p>为了解决如上的问题，Redis也提供了类似与save的配置项来自动的进行AOF文件重写，以避免AOF文件过大。两个比较重要配置参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 重写文件的最小大小，是一个参考基值</span><br><span class=\"line\">auto-aof-rewrite-min-size 64mb</span><br><span class=\"line\"># 大于文件大小基值的百分比进行重写</span><br><span class=\"line\">auto-aof-rewrite-percentage 100</span><br></pre></td></tr></table></figure>\n\n<p>如上配置含义是当AOF文件大于64MB的二倍，即大于128MB时候进行重写，<strong>也就是操作100%</strong>。</p>\n<p><strong>总结：</strong></p>\n<p>无论是快照方式还是AOF方式，数据持久化到磁盘都是必要的，持久化之外还需要将持久化文件备份到其他节点容灾。Redis持久化数据完整性得以保证，但是随着系统并发量（或者负载）的上升，对Redis扩展为集群的方案是必不可少的，因此对于集群内部节点之间的数据同步便是一个重要的认为。下一篇将会讲解一些Redis集群内节点数据复制的方案。</p>"},{"title":"整合多数据源Neo连接池时遇见的问题以及方案与收获","date":"2019-06-30T10:49:41.000Z","comments":1,"_content":"\n整合多数据源时候，配置neo数据库连接池时候使用的Druid连接池，遇见的问题以及问题的解决方案与收获简单记录一下\n<!-- more -->\n### 方案1：\n\n配置信息：\n\n```xml\n<bean name=\"neoDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driver\" value=\"org.neo4j.jdbc.bolt.BoltDrive\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n</bean>\n```\n\n错误信息：\n\n```java\nCaused by: java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [java.sql.Driver] for property 'driver': no matching editors or conversion strategy found\n\tat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:302)\n\tat org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:576)\n\t... 89 more\n```\n\n很明显，无法将String转为Driver类型，看一下DataSource才知道原来driver配置的是Driver类型的实例，而不是Driver class名字，解决方案有两种。先介绍第一种：\n\n解决办法：\n\n将Driver以bean的方式注册到spring容器中，之后配置ref引用该Driver实例即可。代码如下:\n\n```xml\n    // 将Driver注册到Spring容器\n    <bean id=\"boltDriver\" class=\"org.neo4j.jdbc.bolt.BoltDriver\"></bean>\n \n    //ref引用该实例即可。\n    <bean name=\"neoDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driver\" ref=\"boltDriver\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n    </bean>\n```\n\n### 方案2：\n\n方案1中的DataSource是配置Driver类型成员；因此可以找到配置DriverName的变量配置即可，发现存在driverClass，可以配置driverClass设置Neo的Driver驱动名字即可。但是配置之后变红：\n\n![](./neo-datasouce-error.png)\n\n通过对比url发现，属性名字是setXXX方法中的XXX，该set方法名字为setDriverClassName(此处稍微翻阅源码就可以得知，Bean属性注入是使用set方法，而不是反射Field注入)。因此配置信息如下：\n\n```xml\n    <bean name=\"neoDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driverClassName\" value=\"org.neo4j.jdbc.bolt.BoltDrive\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n    </bean>\n```\n\n\n\n### 方案3：\n\n使用Mybatis自带的DataSource：org.apache.ibatis.datasource.pooled.PooledDataSource，该类中的driver是一个String类型设置驱动名字的成员：参见org.apache.ibatis.datasource.pooled.PooledDataSource#setDriver方法。 \n\n```xml\n    <bean name=\"neoDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driverClassName\" value=\"org.neo4j.jdbc.bolt.BoltDriver\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n    </bean>\n```\n\n\n\n### 总结：\n\n **收获1：**\n\n 对于常见的数据库连接池，不同的实现有着细微的差别，例如对于阿里Druid数据库连接池，对于常用的数据库，我们可以不用设置driver或者driverClassName属性，数据库连接池会根据url自动识别Driver，识别Driver方法com.alibaba.druid.util.JdbcUtils#getDriverClassName ；源码如下:\n\n```java\n \n    public static String getDriverClassName(String rawUrl) throws SQLException {\n        if (rawUrl.startsWith(\"jdbc:derby:\")) {\n            return \"org.apache.derby.jdbc.EmbeddedDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:mysql:\")) {\n            return MYSQL_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:log4jdbc:\")) {\n            return LOG4JDBC_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:mariadb:\")) {\n            return MARIADB_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:oracle:\") //\n                   || rawUrl.startsWith(\"JDBC:oracle:\")) {\n            return ORACLE_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:alibaba:oracle:\")) {\n            return ALI_ORACLE_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:microsoft:\")) {\n            return \"com.microsoft.jdbc.sqlserver.SQLServerDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:sqlserver:\")) {\n            return \"com.microsoft.sqlserver.jdbc.SQLServerDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:sybase:Tds:\")) {\n            return \"com.sybase.jdbc2.jdbc.SybDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:jtds:\")) {\n            return \"net.sourceforge.jtds.jdbc.Driver\";\n        } else if (rawUrl.startsWith(\"jdbc:fake:\") || rawUrl.startsWith(\"jdbc:mock:\")) {\n            return \"com.alibaba.druid.mock.MockDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:postgresql:\")) {\n            return POSTGRESQL_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:odps:\")) {\n            return ODPS_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:hsqldb:\")) {\n            return \"org.hsqldb.jdbcDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:db2:\")) {\n            return DB2_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:sqlite:\")) {\n            return \"org.sqlite.JDBC\";\n        } else if (rawUrl.startsWith(\"jdbc:ingres:\")) {\n            return \"com.ingres.jdbc.IngresDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:h2:\")) {\n            return H2_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:mckoi:\")) {\n            return \"com.mckoi.JDBCDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:cloudscape:\")) {\n            return \"COM.cloudscape.core.JDBCDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:informix-sqli:\")) {\n            return \"com.informix.jdbc.IfxDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:timesten:\")) {\n            return \"com.timesten.jdbc.TimesTenDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:as400:\")) {\n            return \"com.ibm.as400.access.AS400JDBCDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:sapdb:\")) {\n            return \"com.sap.dbtech.jdbc.DriverSapDB\";\n        } else if (rawUrl.startsWith(\"jdbc:JSQLConnect:\")) {\n            return \"com.jnetdirect.jsql.JSQLDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:JTurbo:\")) {\n            return \"com.newatlanta.jturbo.driver.Driver\";\n        } else if (rawUrl.startsWith(\"jdbc:firebirdsql:\")) {\n            return \"org.firebirdsql.jdbc.FBDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:interbase:\")) {\n            return \"interbase.interclient.Driver\";\n        } else if (rawUrl.startsWith(\"jdbc:pointbase:\")) {\n            return \"com.pointbase.jdbc.jdbcUniversalDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:edbc:\")) {\n            return \"ca.edbc.jdbc.EdbcDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:mimer:multi1:\")) {\n            return \"com.mimer.jdbc.Driver\";\n        } else if (rawUrl.startsWith(\"jdbc:dm:\")) {\n            return JdbcConstants.DM_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:kingbase:\")) {\n            return JdbcConstants.KINGBASE_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:hive:\")) {\n            return JdbcConstants.HIVE_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:hive2:\")) {\n            return JdbcConstants.HIVE_DRIVER;\n        } else {\n            throw new SQLException(\"unkow jdbc driver : \" + rawUrl);\n        }\n    }\n```\n\n阿里巴巴数据库连接池对常见的数据库都可以识别，但是对于neo没有支持，因此就需要配置driver或者driverClassName。\n\n\n\n**收获2：**\n\n对于数据库连接池的一些属性配置信息名字不是固定的，这些属性名字不是DataSource规范中的，而是跟各个具体DataSource实现强相关，因此配置时候可以查看DataSource具体实现进行配置。","source":"_posts/spring-datasouce-config.md","raw":"---\ntitle: 整合多数据源Neo连接池时遇见的问题以及方案与收获\ndate: 2019-06-30 18:49:41\ncomments: true\ncategories: Spring\n---\n\n整合多数据源时候，配置neo数据库连接池时候使用的Druid连接池，遇见的问题以及问题的解决方案与收获简单记录一下\n<!-- more -->\n### 方案1：\n\n配置信息：\n\n```xml\n<bean name=\"neoDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driver\" value=\"org.neo4j.jdbc.bolt.BoltDrive\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n</bean>\n```\n\n错误信息：\n\n```java\nCaused by: java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [java.sql.Driver] for property 'driver': no matching editors or conversion strategy found\n\tat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:302)\n\tat org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:576)\n\t... 89 more\n```\n\n很明显，无法将String转为Driver类型，看一下DataSource才知道原来driver配置的是Driver类型的实例，而不是Driver class名字，解决方案有两种。先介绍第一种：\n\n解决办法：\n\n将Driver以bean的方式注册到spring容器中，之后配置ref引用该Driver实例即可。代码如下:\n\n```xml\n    // 将Driver注册到Spring容器\n    <bean id=\"boltDriver\" class=\"org.neo4j.jdbc.bolt.BoltDriver\"></bean>\n \n    //ref引用该实例即可。\n    <bean name=\"neoDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driver\" ref=\"boltDriver\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n    </bean>\n```\n\n### 方案2：\n\n方案1中的DataSource是配置Driver类型成员；因此可以找到配置DriverName的变量配置即可，发现存在driverClass，可以配置driverClass设置Neo的Driver驱动名字即可。但是配置之后变红：\n\n![](./neo-datasouce-error.png)\n\n通过对比url发现，属性名字是setXXX方法中的XXX，该set方法名字为setDriverClassName(此处稍微翻阅源码就可以得知，Bean属性注入是使用set方法，而不是反射Field注入)。因此配置信息如下：\n\n```xml\n    <bean name=\"neoDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driverClassName\" value=\"org.neo4j.jdbc.bolt.BoltDrive\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n    </bean>\n```\n\n\n\n### 方案3：\n\n使用Mybatis自带的DataSource：org.apache.ibatis.datasource.pooled.PooledDataSource，该类中的driver是一个String类型设置驱动名字的成员：参见org.apache.ibatis.datasource.pooled.PooledDataSource#setDriver方法。 \n\n```xml\n    <bean name=\"neoDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"driverClassName\" value=\"org.neo4j.jdbc.bolt.BoltDriver\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n    </bean>\n```\n\n\n\n### 总结：\n\n **收获1：**\n\n 对于常见的数据库连接池，不同的实现有着细微的差别，例如对于阿里Druid数据库连接池，对于常用的数据库，我们可以不用设置driver或者driverClassName属性，数据库连接池会根据url自动识别Driver，识别Driver方法com.alibaba.druid.util.JdbcUtils#getDriverClassName ；源码如下:\n\n```java\n \n    public static String getDriverClassName(String rawUrl) throws SQLException {\n        if (rawUrl.startsWith(\"jdbc:derby:\")) {\n            return \"org.apache.derby.jdbc.EmbeddedDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:mysql:\")) {\n            return MYSQL_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:log4jdbc:\")) {\n            return LOG4JDBC_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:mariadb:\")) {\n            return MARIADB_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:oracle:\") //\n                   || rawUrl.startsWith(\"JDBC:oracle:\")) {\n            return ORACLE_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:alibaba:oracle:\")) {\n            return ALI_ORACLE_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:microsoft:\")) {\n            return \"com.microsoft.jdbc.sqlserver.SQLServerDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:sqlserver:\")) {\n            return \"com.microsoft.sqlserver.jdbc.SQLServerDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:sybase:Tds:\")) {\n            return \"com.sybase.jdbc2.jdbc.SybDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:jtds:\")) {\n            return \"net.sourceforge.jtds.jdbc.Driver\";\n        } else if (rawUrl.startsWith(\"jdbc:fake:\") || rawUrl.startsWith(\"jdbc:mock:\")) {\n            return \"com.alibaba.druid.mock.MockDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:postgresql:\")) {\n            return POSTGRESQL_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:odps:\")) {\n            return ODPS_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:hsqldb:\")) {\n            return \"org.hsqldb.jdbcDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:db2:\")) {\n            return DB2_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:sqlite:\")) {\n            return \"org.sqlite.JDBC\";\n        } else if (rawUrl.startsWith(\"jdbc:ingres:\")) {\n            return \"com.ingres.jdbc.IngresDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:h2:\")) {\n            return H2_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:mckoi:\")) {\n            return \"com.mckoi.JDBCDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:cloudscape:\")) {\n            return \"COM.cloudscape.core.JDBCDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:informix-sqli:\")) {\n            return \"com.informix.jdbc.IfxDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:timesten:\")) {\n            return \"com.timesten.jdbc.TimesTenDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:as400:\")) {\n            return \"com.ibm.as400.access.AS400JDBCDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:sapdb:\")) {\n            return \"com.sap.dbtech.jdbc.DriverSapDB\";\n        } else if (rawUrl.startsWith(\"jdbc:JSQLConnect:\")) {\n            return \"com.jnetdirect.jsql.JSQLDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:JTurbo:\")) {\n            return \"com.newatlanta.jturbo.driver.Driver\";\n        } else if (rawUrl.startsWith(\"jdbc:firebirdsql:\")) {\n            return \"org.firebirdsql.jdbc.FBDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:interbase:\")) {\n            return \"interbase.interclient.Driver\";\n        } else if (rawUrl.startsWith(\"jdbc:pointbase:\")) {\n            return \"com.pointbase.jdbc.jdbcUniversalDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:edbc:\")) {\n            return \"ca.edbc.jdbc.EdbcDriver\";\n        } else if (rawUrl.startsWith(\"jdbc:mimer:multi1:\")) {\n            return \"com.mimer.jdbc.Driver\";\n        } else if (rawUrl.startsWith(\"jdbc:dm:\")) {\n            return JdbcConstants.DM_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:kingbase:\")) {\n            return JdbcConstants.KINGBASE_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:hive:\")) {\n            return JdbcConstants.HIVE_DRIVER;\n        } else if (rawUrl.startsWith(\"jdbc:hive2:\")) {\n            return JdbcConstants.HIVE_DRIVER;\n        } else {\n            throw new SQLException(\"unkow jdbc driver : \" + rawUrl);\n        }\n    }\n```\n\n阿里巴巴数据库连接池对常见的数据库都可以识别，但是对于neo没有支持，因此就需要配置driver或者driverClassName。\n\n\n\n**收获2：**\n\n对于数据库连接池的一些属性配置信息名字不是固定的，这些属性名字不是DataSource规范中的，而是跟各个具体DataSource实现强相关，因此配置时候可以查看DataSource具体实现进行配置。","slug":"spring-datasouce-config","published":1,"updated":"2019-07-02T13:42:43.174Z","layout":"post","photos":[],"link":"","_id":"cjxng5u7m000bhz2dtdofupbt","content":"<p>整合多数据源时候，配置neo数据库连接池时候使用的Druid连接池，遇见的问题以及问题的解决方案与收获简单记录一下</p>\n<a id=\"more\"></a>\n<h3 id=\"方案1：\"><a href=\"#方案1：\" class=\"headerlink\" title=\"方案1：\"></a>方案1：</h3><p>配置信息：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.neo4j.jdbc.bolt.BoltDrive\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>错误信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [java.sql.Driver] <span class=\"keyword\">for</span> property <span class=\"string\">'driver'</span>: no matching editors or conversion strategy found</span><br><span class=\"line\">\tat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:<span class=\"number\">302</span>)</span><br><span class=\"line\">\tat org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:<span class=\"number\">576</span>)</span><br><span class=\"line\">\t... <span class=\"number\">89</span> more</span><br></pre></td></tr></table></figure>\n\n<p>很明显，无法将String转为Driver类型，看一下DataSource才知道原来driver配置的是Driver类型的实例，而不是Driver class名字，解决方案有两种。先介绍第一种：</p>\n<p>解决办法：</p>\n<p>将Driver以bean的方式注册到spring容器中，之后配置ref引用该Driver实例即可。代码如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将Driver注册到Spring容器</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"boltDriver\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.neo4j.jdbc.bolt.BoltDriver\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">//ref引用该实例即可。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"boltDriver\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案2：\"><a href=\"#方案2：\" class=\"headerlink\" title=\"方案2：\"></a>方案2：</h3><p>方案1中的DataSource是配置Driver类型成员；因此可以找到配置DriverName的变量配置即可，发现存在driverClass，可以配置driverClass设置Neo的Driver驱动名字即可。但是配置之后变红：</p>\n<p><img src=\"/2019/06/30/spring-datasouce-config/neo-datasouce-error.png\" alt></p>\n<p>通过对比url发现，属性名字是setXXX方法中的XXX，该set方法名字为setDriverClassName(此处稍微翻阅源码就可以得知，Bean属性注入是使用set方法，而不是反射Field注入)。因此配置信息如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.neo4j.jdbc.bolt.BoltDrive\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案3：\"><a href=\"#方案3：\" class=\"headerlink\" title=\"方案3：\"></a>方案3：</h3><p>使用Mybatis自带的DataSource：org.apache.ibatis.datasource.pooled.PooledDataSource，该类中的driver是一个String类型设置驱动名字的成员：参见org.apache.ibatis.datasource.pooled.PooledDataSource#setDriver方法。 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.neo4j.jdbc.bolt.BoltDriver\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p> <strong>收获1：</strong></p>\n<p> 对于常见的数据库连接池，不同的实现有着细微的差别，例如对于阿里Druid数据库连接池，对于常用的数据库，我们可以不用设置driver或者driverClassName属性，数据库连接池会根据url自动识别Driver，识别Driver方法com.alibaba.druid.util.JdbcUtils#getDriverClassName ；源码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getDriverClassName</span><span class=\"params\">(String rawUrl)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:derby:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"org.apache.derby.jdbc.EmbeddedDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:mysql:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MYSQL_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:log4jdbc:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LOG4JDBC_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:mariadb:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MARIADB_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:oracle:\"</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">               || rawUrl.startsWith(<span class=\"string\">\"JDBC:oracle:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ORACLE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:alibaba:oracle:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ALI_ORACLE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:microsoft:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.microsoft.jdbc.sqlserver.SQLServerDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:sqlserver:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:sybase:Tds:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.sybase.jdbc2.jdbc.SybDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:jtds:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"net.sourceforge.jtds.jdbc.Driver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:fake:\"</span>) || rawUrl.startsWith(<span class=\"string\">\"jdbc:mock:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.alibaba.druid.mock.MockDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:postgresql:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> POSTGRESQL_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:odps:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ODPS_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:hsqldb:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"org.hsqldb.jdbcDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:db2:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DB2_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:sqlite:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"org.sqlite.JDBC\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:ingres:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.ingres.jdbc.IngresDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:h2:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> H2_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:mckoi:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.mckoi.JDBCDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:cloudscape:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"COM.cloudscape.core.JDBCDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:informix-sqli:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.informix.jdbc.IfxDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:timesten:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.timesten.jdbc.TimesTenDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:as400:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.ibm.as400.access.AS400JDBCDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:sapdb:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.sap.dbtech.jdbc.DriverSapDB\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:JSQLConnect:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.jnetdirect.jsql.JSQLDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:JTurbo:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.newatlanta.jturbo.driver.Driver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:firebirdsql:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"org.firebirdsql.jdbc.FBDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:interbase:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"interbase.interclient.Driver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:pointbase:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.pointbase.jdbc.jdbcUniversalDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:edbc:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"ca.edbc.jdbc.EdbcDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:mimer:multi1:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.mimer.jdbc.Driver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:dm:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JdbcConstants.DM_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:kingbase:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JdbcConstants.KINGBASE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:hive:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JdbcConstants.HIVE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:hive2:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JdbcConstants.HIVE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"unkow jdbc driver : \"</span> + rawUrl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>阿里巴巴数据库连接池对常见的数据库都可以识别，但是对于neo没有支持，因此就需要配置driver或者driverClassName。</p>\n<p><strong>收获2：</strong></p>\n<p>对于数据库连接池的一些属性配置信息名字不是固定的，这些属性名字不是DataSource规范中的，而是跟各个具体DataSource实现强相关，因此配置时候可以查看DataSource具体实现进行配置。</p>\n","site":{"data":{}},"excerpt":"<p>整合多数据源时候，配置neo数据库连接池时候使用的Druid连接池，遇见的问题以及问题的解决方案与收获简单记录一下</p>","more":"<h3 id=\"方案1：\"><a href=\"#方案1：\" class=\"headerlink\" title=\"方案1：\"></a>方案1：</h3><p>配置信息：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.neo4j.jdbc.bolt.BoltDrive\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>错误信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: java.lang.IllegalStateException: Cannot convert value of type [java.lang.String] to required type [java.sql.Driver] <span class=\"keyword\">for</span> property <span class=\"string\">'driver'</span>: no matching editors or conversion strategy found</span><br><span class=\"line\">\tat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:<span class=\"number\">302</span>)</span><br><span class=\"line\">\tat org.springframework.beans.AbstractNestablePropertyAccessor.convertIfNecessary(AbstractNestablePropertyAccessor.java:<span class=\"number\">576</span>)</span><br><span class=\"line\">\t... <span class=\"number\">89</span> more</span><br></pre></td></tr></table></figure>\n\n<p>很明显，无法将String转为Driver类型，看一下DataSource才知道原来driver配置的是Driver类型的实例，而不是Driver class名字，解决方案有两种。先介绍第一种：</p>\n<p>解决办法：</p>\n<p>将Driver以bean的方式注册到spring容器中，之后配置ref引用该Driver实例即可。代码如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将Driver注册到Spring容器</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"boltDriver\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.neo4j.jdbc.bolt.BoltDriver\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">//ref引用该实例即可。</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"boltDriver\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案2：\"><a href=\"#方案2：\" class=\"headerlink\" title=\"方案2：\"></a>方案2：</h3><p>方案1中的DataSource是配置Driver类型成员；因此可以找到配置DriverName的变量配置即可，发现存在driverClass，可以配置driverClass设置Neo的Driver驱动名字即可。但是配置之后变红：</p>\n<p><img src=\"/2019/06/30/spring-datasouce-config/neo-datasouce-error.png\" alt></p>\n<p>通过对比url发现，属性名字是setXXX方法中的XXX，该set方法名字为setDriverClassName(此处稍微翻阅源码就可以得知，Bean属性注入是使用set方法，而不是反射Field注入)。因此配置信息如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.neo4j.jdbc.bolt.BoltDrive\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案3：\"><a href=\"#方案3：\" class=\"headerlink\" title=\"方案3：\"></a>方案3：</h3><p>使用Mybatis自带的DataSource：org.apache.ibatis.datasource.pooled.PooledDataSource，该类中的driver是一个String类型设置驱动名字的成员：参见org.apache.ibatis.datasource.pooled.PooledDataSource#setDriver方法。 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.neo4j.jdbc.bolt.BoltDriver\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p> <strong>收获1：</strong></p>\n<p> 对于常见的数据库连接池，不同的实现有着细微的差别，例如对于阿里Druid数据库连接池，对于常用的数据库，我们可以不用设置driver或者driverClassName属性，数据库连接池会根据url自动识别Driver，识别Driver方法com.alibaba.druid.util.JdbcUtils#getDriverClassName ；源码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getDriverClassName</span><span class=\"params\">(String rawUrl)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:derby:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"org.apache.derby.jdbc.EmbeddedDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:mysql:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MYSQL_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:log4jdbc:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LOG4JDBC_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:mariadb:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MARIADB_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:oracle:\"</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">               || rawUrl.startsWith(<span class=\"string\">\"JDBC:oracle:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ORACLE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:alibaba:oracle:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ALI_ORACLE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:microsoft:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.microsoft.jdbc.sqlserver.SQLServerDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:sqlserver:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:sybase:Tds:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.sybase.jdbc2.jdbc.SybDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:jtds:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"net.sourceforge.jtds.jdbc.Driver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:fake:\"</span>) || rawUrl.startsWith(<span class=\"string\">\"jdbc:mock:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.alibaba.druid.mock.MockDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:postgresql:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> POSTGRESQL_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:odps:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ODPS_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:hsqldb:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"org.hsqldb.jdbcDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:db2:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DB2_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:sqlite:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"org.sqlite.JDBC\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:ingres:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.ingres.jdbc.IngresDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:h2:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> H2_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:mckoi:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.mckoi.JDBCDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:cloudscape:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"COM.cloudscape.core.JDBCDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:informix-sqli:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.informix.jdbc.IfxDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:timesten:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.timesten.jdbc.TimesTenDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:as400:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.ibm.as400.access.AS400JDBCDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:sapdb:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.sap.dbtech.jdbc.DriverSapDB\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:JSQLConnect:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.jnetdirect.jsql.JSQLDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:JTurbo:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.newatlanta.jturbo.driver.Driver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:firebirdsql:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"org.firebirdsql.jdbc.FBDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:interbase:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"interbase.interclient.Driver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:pointbase:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.pointbase.jdbc.jdbcUniversalDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:edbc:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"ca.edbc.jdbc.EdbcDriver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:mimer:multi1:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"com.mimer.jdbc.Driver\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:dm:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JdbcConstants.DM_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:kingbase:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JdbcConstants.KINGBASE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:hive:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JdbcConstants.HIVE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rawUrl.startsWith(<span class=\"string\">\"jdbc:hive2:\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JdbcConstants.HIVE_DRIVER;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"unkow jdbc driver : \"</span> + rawUrl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>阿里巴巴数据库连接池对常见的数据库都可以识别，但是对于neo没有支持，因此就需要配置driver或者driverClassName。</p>\n<p><strong>收获2：</strong></p>\n<p>对于数据库连接池的一些属性配置信息名字不是固定的，这些属性名字不是DataSource规范中的，而是跟各个具体DataSource实现强相关，因此配置时候可以查看DataSource具体实现进行配置。</p>"},{"title":"借助Spring框架实现多数据源进行动态路由数据源进行数据查询","date":"2019-06-29T15:32:35.000Z","_content":"\n- 场景\n\n  业务需要，不同类型数据分布在不同集群以提高查询性能，为此系统存在多个数据源。数据源实现方式如下。\n<!-- more -->\n  \n  \n- 解决方案  \n  \n  **方案1 ：**\n  \n   静态配置多个数据源，按需使用，不具备动态调整能力。示例代码：\n\n2. ```xml\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <beans xmlns=\"http://www.springframework.org/schema/beans\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xmlns:context=\"http://www.springframework.org/schema/context\"\n          xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n    \n       <context:component-scan base-package=\"com.javartisan.data.*\"/>\n       <context:property-placeholder location=\"classpath:config/env.properties\" ignore-unresolvable=\"true\"/>\n       <!-- 配置数据源1“ -->\n       <bean name=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\"\n             init-method=\"init\" destroy-method=\"close\">\n           <property name=\"url\" value=\"${mysql.url}\"/>\n           <property name=\"username\" value=\"${mysql.username}\"/>\n           <property name=\"password\" value=\"${mysql.password}\"/>\n           <property name=\"initialSize\" value=\"1\"/>\n           <property name=\"maxActive\" value=\"5\"/>\n           <property name=\"minIdle\" value=\"0\"/>\n       </bean>\n       <!-- 数据源1的SessionFactory -->\n       <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n           <property name=\"dataSource\" ref=\"dataSource\"/>\n           <property name=\"configLocation\" value=\"classpath:config/mybatis-config.xml\"/>\n           <property name=\"mapperLocations\">\n               <list>\n                   <value>classpath:com/javartisan/data/day/report/mapper/*.xml</value>\n               </list>\n           </property>\n       </bean>\n        <!-- 数据源1的MapperScannerConfigurer -->\n       <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n           <property name=\"basePackage\" value=\"com.javartisan.data.day.report.mapper\"/>\n           <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"/>\n       </bean>\n    \n    \n       <!--数据源2：Spark DataSource -->\n       <bean name=\"sparkDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\"\n             init-method=\"init\" destroy-method=\"close\">\n           <property name=\"url\" value=\"${spark.mysql.url}\"/>\n           <property name=\"username\" value=\"${spark.mysql.username}\"/>\n           <property name=\"password\" value=\"${spark.mysql.password}\"/>\n           <property name=\"initialSize\" value=\"1\"/>\n           <property name=\"maxActive\" value=\"5\"/>\n           <property name=\"minIdle\" value=\"0\"/>\n           <property name=\"maxWait\" value=\"60000\"/>\n           <property name=\"validationQuery\" value=\"${validationQuery}\"/>\n           <property name=\"testOnBorrow\" value=\"false\"/>\n           <property name=\"testOnReturn\" value=\"false\"/>\n           <property name=\"testWhileIdle\" value=\"true\"/>\n           <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\"/>\n           <property name=\"minEvictableIdleTimeMillis\" value=\"25200000\"/>\n           <property name=\"removeAbandoned\" value=\"true\"/>\n           <property name=\"removeAbandonedTimeout\" value=\"1800\"/>\n           <property name=\"logAbandoned\" value=\"true\"/>\n           <property name=\"filters\" value=\"mergeStat\"/>\n       </bean>\n    \n       <!-- 数据源2的SessionFactory -->\n       <bean id=\"sparkSqlSessionFactory\" class=\"org.mybatis.spring.\">\n           <property name=\"dataSource\" ref=\"sparkDataSource\"/>\n           <property name=\"configLocation\" value=\"classpath:config/mybatis-config.xml\"/>\n           <property name=\"mapperLocations\">\n               <list>\n                   <value>classpath:com/javartisan/data/week/report/mapper/*.xml</value>\n               </list>\n           </property>\n       </bean>\n    \n         <!-- 数据源2的MapperScannerConfigurer -->    \n       <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n           <property name=\"basePackage\" value=\"com.javartisan.data.week.report.mapper\"/>\n           <property name=\"sqlSessionFactoryBeanName\" value=\"sparkSqlSessionFactory\"/>\n       </bean>\n   </beans>\n   ```\n\n   主要是根据Mapper的文件包路径区分数据源,Mapper包路径如下：com.javartisan.data.day.report.mapper与com.javartisan.data.week.report.mapper; 分别表示日报与周报的数据源（业务原因，日报与周报的数据源分布在两个不同MYSQL环境，因此需要多数据源）；这种多数据源就是根据Mapper文件的静态分布规则进行构建的多数据源。\n\n\n\n​\t\t**方案2：**\n\n​\t\tAop实现的多数据源，在查询期间根据数据分布规则进行动态选择dataSource进行查询。具体细节如下：\n​\t\t这种实现是根据业务显示情况有关，业务数据根据Hash值进行分布式存储，因此在业务实现时候，我们根据   \t\t规则自行实现了一套数据库连接池；在基于自行实现连接池之上，我们结合Aop拦截查询语句（定义数据源注\t\t解），根据规则得到数据源所在的某个节点，然后在连接池中拿到指定节点的Connection进行查询。虽然比\t\t方案1优雅并且拓展性好，但是代码相对比较复杂，维护成本高。最好的方案还是借力而行！借力而行就是使\t\t用Spring框架支持的组件拓展，那就是如下方案3。\n\n​\t\t\n\n​\t\t**方案3：**\n\n​\t\tAbstractRoutingDataSource多数据源的拓展类,AbstractRoutingDataSource是Spring为了多数据源拓展开放\t\t的抽象类；继承结构：\n\n​\t\t![](./mds.png)\n\n​\t\tSpring一个具体实现：IsolationLevelDataSourceRouter，基于事务的隔离级别选择DataSource；原理其实很简单，启动时候将一些DataSource以key/value形似存储到Map<数据源规则的Key，DataSource>，然后获取DataSource时候按照规则的Key获取即可。也就是父类中的抽象方法；关键抽象方法：\n\n```java\n\t/**\n\t * Determine the current lookup key. This will typically be\n\t * implemented to check a thread-bound transaction context.\n\t * <p>Allows for arbitrary keys. The returned key needs\n\t * to match the stored lookup key type, as resolved by the\n\t * {@link #resolveSpecifiedLookupKey} method.\n\t */\n\tprotected abstract Object determineCurrentLookupKey();\n```\n\n这个方法的实现时候，可以将我们的一些规则借助线程局部变量传入到其中进行一些规则计算，便于选择合适的数据源。首先简单描述一下业务场景：起初，系统的所有数据都是在MySQL中，因此不存在多数据源问题，但是后来由于架构改造；变化为如下：在原有的MYSQL关系数据源之外，又添加了一种是图数据库Neo，将原来存储在MySQL中的账户数据改造存储到图数据库中；这也就是所谓的变为两种数据源；由于数据源的变化，下游查询就会引起变化，而我的需求是这样：每天需要根据MySQL中的业务数据计算业务相关指标同时还要计算一些账户指标，例如每天新注册用户数等。因此就需要在原有基础之上进行扩展，因此改用Spring支持的多数据源。实例代码如下；数据源路由器：\n\n```java\npublic class DataMillDataSourceRouter extends AbstractRoutingDataSource {\n \n    @Override\n    protected Object determineCurrentLookupKey() {\n        String dataSourceType = MDC.get(DataSourceTypes.NEO.type);\n        if (Objects.equals(dataSourceType, DataSourceTypes.NEO.type)) {\n            // NEO DATASOURCE\n            return DataSourceTypes.NEO.type;\n        }\n        return DataSourceTypes.MYSQL.type;\n    }\n}\n```\n\n数据源类型枚举值：\n\n```java\npublic enum DataSourceTypes {\n \n    NEO(\"NEO\"), MYSQL(\"MYSQL\");\n \n    public final String type;\n \n    private DataSourceTypes(String type) {\n        this.type = type;\n    }\n}\n```\n\nNEO数据源注解（默认没有注解则数据源为MySQL,也可以借助路由器指定默认数据源）：\n\n```java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface NeoDataSource {\n \n}\n```\n\n进行数据源选择的切面类：\n\n```java\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.Signature;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.slf4j.MDC;\nimport org.springframework.context.annotation.EnableAspectJAutoProxy;\nimport org.springframework.stereotype.Component;\n \nimport java.util.Arrays;\n \n@Aspect\n@Component\n//@EnableAspectJAutoProxy 与<aop:aspectj-autoproxy/>配置二选一即可\npublic class NeoDataSourceApect {\n \n    public static Logger LOGGER = LoggerFactory.getLogger(NeoDataSourceApect.class);\n \n    @Around(value = \"@annotation(com.javartisan.data.day.report.multi.datasource.annotation.NeoDataSource)\")\n    public Object process(ProceedingJoinPoint pjp) throws Throwable {\n \n        String args = Arrays.toString(pjp.getArgs());\n        Signature methodName = pjp.getSignature();\n        LOGGER.info(\"methodName = {} and args = {} start proceed !\", methodName.getName(), args);\n        MDC.put(DataSourceTypes.NEO.type, DataSourceTypes.NEO.type);\n        Object returnValue = pjp.proceed();\n        LOGGER.info(\"methodName = {} and args = {}  and returnValue ={} proceed finished !\", methodName.getName(), args, returnValue);\n        MDC.remove(DataSourceTypes.NEO.type);\n        return returnValue;\n    }\n \n}\n```\n\n备注：<u>只要方法存在NeoDataSource注解就会被拦截添加一个线程局部变量到MDC中，MDC是slf4j中的一个工具类，也可以自行实现一个ThreadLocal工具。</u>\n\n\n\nSpring配置文件：\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\n       http://www.springframework.org/schema/aop\n       http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\">\n    <context:annotation-config/>\n    <context:component-scan base-package=\"com.javartisan.data.*\"/>\n    <aop:aspectj-autoproxy/>\n    <!-- 通过import方式将配置放到子文件中 -->\n    <import resource=\"spring-mybatis.xml\"/>\n</beans>\n```\n\n子配置文件：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n \n \n    <context:property-placeholder location=\"classpath:config/env.properties\" ignore-unresolvable=\"true\"/>\n    <!-- 配置数据源 -->\n    <bean name=\"mysqlDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\"\n          init-method=\"init\" destroy-method=\"close\">\n        <property name=\"url\" value=\"${mysql.url}\"/>\n        <property name=\"username\" value=\"${mysql.username}\"/>\n        <property name=\"password\" value=\"${mysql.password}\"/>\n        <property name=\"initialSize\" value=\"1\"/>\n        <property name=\"maxActive\" value=\"5\"/>\n        <property name=\"minIdle\" value=\"0\"/>\n        <property name=\"maxWait\" value=\"60000\"/>\n    </bean>\n \n    <bean id=\"dataSource\" class=\"com.javartisan.datamill.day.report.multi.datasource.router.DataMillDataSourceRouter\">\n        <property name=\"targetDataSources\">\n            <map>\n                <entry key=\"MYSQL\" value-ref=\"mysqlDataSource\"/>\n                <entry key=\"NEO\" value-ref=\"neoDataSource\"/>\n            </map>\n        </property>\n    </bean>\n \n \n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n        <property name=\"configLocation\" value=\"classpath:config/mybatis-config.xml\"/>\n        <property name=\"mapperLocations\">\n            <list>\n                <value>classpath:com/javartisan/datamill/day/report/mapper/*.xml</value>\n            </list>\n        </property>\n    </bean>\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"basePackage\" value=\"com.javartisan.datamill.day.report.mapper\"/>\n        <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"/>\n    </bean>\n \n    <!--NEO4J DataSource-->\n    <bean name=\"neoDataSource\" class=\"org.apache.ibatis.datasource.pooled.PooledDataSource\">\n        <property name=\"driver\" value=\"org.neo4j.javartisanbc.bolt.BoltDriver\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n    </bean>\n</beans>\n```\n\n到此就完成了多数据源的配置，接下来看一下Service实现：\n\n```java\npublic class DataComputeService{\n \n    /**\n     * \n     * 查询Neo数据源方法，使用注解即可\n     * @return\n     */\n    @Override\n    @NeoDataSource\n    public Integer getAllOpenAccountCount(String startDate) {\n            // 伪代码，表达清楚含义即可\n            return  mapper.someMethod(startDate);\n    }\n \n    /**\n     * \n     * 查询MYSQL数据源\n     * @return\n     */\n    @Override\n    public Integer getMysqlIndex(String startDate) {\n            // 伪代码，表达清楚含义即可\n            return  mapper.someMethod(startDate);\n    }\n \n}\n```\n\nService实现如上即可，这样就完成了多数据源的配置；这种方式对新引入的数据源的拓展性比较好，代码也比较清晰简单易于理解与维护。\n\n\n\n**注意：**\n\n当我们在一个Service内部内嵌套调用同类的其他Neo数据源方法需要使用：\n\n```java\n((DataComputeService) AopContext.currentProxy()).someMethod（）\n```\n\n此时需要在修改Aspectj配置：\n\n```xml\n <aop:aspectj-autoproxy expose-proxy=\"true\"/>\n```\n\nexpose-proxy是为了将代理类暴露到当前线程局部变量中，这样就可以通过线程局部变量获取代理类了。","source":"_posts/spring-multi-datasource.md","raw":"---\ntitle: 借助Spring框架实现多数据源进行动态路由数据源进行数据查询\ndate: 2019-06-29 23:32:35\ncategories: Spring\n---\n\n- 场景\n\n  业务需要，不同类型数据分布在不同集群以提高查询性能，为此系统存在多个数据源。数据源实现方式如下。\n<!-- more -->\n  \n  \n- 解决方案  \n  \n  **方案1 ：**\n  \n   静态配置多个数据源，按需使用，不具备动态调整能力。示例代码：\n\n2. ```xml\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <beans xmlns=\"http://www.springframework.org/schema/beans\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xmlns:context=\"http://www.springframework.org/schema/context\"\n          xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n    \n       <context:component-scan base-package=\"com.javartisan.data.*\"/>\n       <context:property-placeholder location=\"classpath:config/env.properties\" ignore-unresolvable=\"true\"/>\n       <!-- 配置数据源1“ -->\n       <bean name=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\"\n             init-method=\"init\" destroy-method=\"close\">\n           <property name=\"url\" value=\"${mysql.url}\"/>\n           <property name=\"username\" value=\"${mysql.username}\"/>\n           <property name=\"password\" value=\"${mysql.password}\"/>\n           <property name=\"initialSize\" value=\"1\"/>\n           <property name=\"maxActive\" value=\"5\"/>\n           <property name=\"minIdle\" value=\"0\"/>\n       </bean>\n       <!-- 数据源1的SessionFactory -->\n       <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n           <property name=\"dataSource\" ref=\"dataSource\"/>\n           <property name=\"configLocation\" value=\"classpath:config/mybatis-config.xml\"/>\n           <property name=\"mapperLocations\">\n               <list>\n                   <value>classpath:com/javartisan/data/day/report/mapper/*.xml</value>\n               </list>\n           </property>\n       </bean>\n        <!-- 数据源1的MapperScannerConfigurer -->\n       <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n           <property name=\"basePackage\" value=\"com.javartisan.data.day.report.mapper\"/>\n           <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"/>\n       </bean>\n    \n    \n       <!--数据源2：Spark DataSource -->\n       <bean name=\"sparkDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\"\n             init-method=\"init\" destroy-method=\"close\">\n           <property name=\"url\" value=\"${spark.mysql.url}\"/>\n           <property name=\"username\" value=\"${spark.mysql.username}\"/>\n           <property name=\"password\" value=\"${spark.mysql.password}\"/>\n           <property name=\"initialSize\" value=\"1\"/>\n           <property name=\"maxActive\" value=\"5\"/>\n           <property name=\"minIdle\" value=\"0\"/>\n           <property name=\"maxWait\" value=\"60000\"/>\n           <property name=\"validationQuery\" value=\"${validationQuery}\"/>\n           <property name=\"testOnBorrow\" value=\"false\"/>\n           <property name=\"testOnReturn\" value=\"false\"/>\n           <property name=\"testWhileIdle\" value=\"true\"/>\n           <property name=\"timeBetweenEvictionRunsMillis\" value=\"60000\"/>\n           <property name=\"minEvictableIdleTimeMillis\" value=\"25200000\"/>\n           <property name=\"removeAbandoned\" value=\"true\"/>\n           <property name=\"removeAbandonedTimeout\" value=\"1800\"/>\n           <property name=\"logAbandoned\" value=\"true\"/>\n           <property name=\"filters\" value=\"mergeStat\"/>\n       </bean>\n    \n       <!-- 数据源2的SessionFactory -->\n       <bean id=\"sparkSqlSessionFactory\" class=\"org.mybatis.spring.\">\n           <property name=\"dataSource\" ref=\"sparkDataSource\"/>\n           <property name=\"configLocation\" value=\"classpath:config/mybatis-config.xml\"/>\n           <property name=\"mapperLocations\">\n               <list>\n                   <value>classpath:com/javartisan/data/week/report/mapper/*.xml</value>\n               </list>\n           </property>\n       </bean>\n    \n         <!-- 数据源2的MapperScannerConfigurer -->    \n       <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n           <property name=\"basePackage\" value=\"com.javartisan.data.week.report.mapper\"/>\n           <property name=\"sqlSessionFactoryBeanName\" value=\"sparkSqlSessionFactory\"/>\n       </bean>\n   </beans>\n   ```\n\n   主要是根据Mapper的文件包路径区分数据源,Mapper包路径如下：com.javartisan.data.day.report.mapper与com.javartisan.data.week.report.mapper; 分别表示日报与周报的数据源（业务原因，日报与周报的数据源分布在两个不同MYSQL环境，因此需要多数据源）；这种多数据源就是根据Mapper文件的静态分布规则进行构建的多数据源。\n\n\n\n​\t\t**方案2：**\n\n​\t\tAop实现的多数据源，在查询期间根据数据分布规则进行动态选择dataSource进行查询。具体细节如下：\n​\t\t这种实现是根据业务显示情况有关，业务数据根据Hash值进行分布式存储，因此在业务实现时候，我们根据   \t\t规则自行实现了一套数据库连接池；在基于自行实现连接池之上，我们结合Aop拦截查询语句（定义数据源注\t\t解），根据规则得到数据源所在的某个节点，然后在连接池中拿到指定节点的Connection进行查询。虽然比\t\t方案1优雅并且拓展性好，但是代码相对比较复杂，维护成本高。最好的方案还是借力而行！借力而行就是使\t\t用Spring框架支持的组件拓展，那就是如下方案3。\n\n​\t\t\n\n​\t\t**方案3：**\n\n​\t\tAbstractRoutingDataSource多数据源的拓展类,AbstractRoutingDataSource是Spring为了多数据源拓展开放\t\t的抽象类；继承结构：\n\n​\t\t![](./mds.png)\n\n​\t\tSpring一个具体实现：IsolationLevelDataSourceRouter，基于事务的隔离级别选择DataSource；原理其实很简单，启动时候将一些DataSource以key/value形似存储到Map<数据源规则的Key，DataSource>，然后获取DataSource时候按照规则的Key获取即可。也就是父类中的抽象方法；关键抽象方法：\n\n```java\n\t/**\n\t * Determine the current lookup key. This will typically be\n\t * implemented to check a thread-bound transaction context.\n\t * <p>Allows for arbitrary keys. The returned key needs\n\t * to match the stored lookup key type, as resolved by the\n\t * {@link #resolveSpecifiedLookupKey} method.\n\t */\n\tprotected abstract Object determineCurrentLookupKey();\n```\n\n这个方法的实现时候，可以将我们的一些规则借助线程局部变量传入到其中进行一些规则计算，便于选择合适的数据源。首先简单描述一下业务场景：起初，系统的所有数据都是在MySQL中，因此不存在多数据源问题，但是后来由于架构改造；变化为如下：在原有的MYSQL关系数据源之外，又添加了一种是图数据库Neo，将原来存储在MySQL中的账户数据改造存储到图数据库中；这也就是所谓的变为两种数据源；由于数据源的变化，下游查询就会引起变化，而我的需求是这样：每天需要根据MySQL中的业务数据计算业务相关指标同时还要计算一些账户指标，例如每天新注册用户数等。因此就需要在原有基础之上进行扩展，因此改用Spring支持的多数据源。实例代码如下；数据源路由器：\n\n```java\npublic class DataMillDataSourceRouter extends AbstractRoutingDataSource {\n \n    @Override\n    protected Object determineCurrentLookupKey() {\n        String dataSourceType = MDC.get(DataSourceTypes.NEO.type);\n        if (Objects.equals(dataSourceType, DataSourceTypes.NEO.type)) {\n            // NEO DATASOURCE\n            return DataSourceTypes.NEO.type;\n        }\n        return DataSourceTypes.MYSQL.type;\n    }\n}\n```\n\n数据源类型枚举值：\n\n```java\npublic enum DataSourceTypes {\n \n    NEO(\"NEO\"), MYSQL(\"MYSQL\");\n \n    public final String type;\n \n    private DataSourceTypes(String type) {\n        this.type = type;\n    }\n}\n```\n\nNEO数据源注解（默认没有注解则数据源为MySQL,也可以借助路由器指定默认数据源）：\n\n```java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface NeoDataSource {\n \n}\n```\n\n进行数据源选择的切面类：\n\n```java\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.Signature;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.slf4j.MDC;\nimport org.springframework.context.annotation.EnableAspectJAutoProxy;\nimport org.springframework.stereotype.Component;\n \nimport java.util.Arrays;\n \n@Aspect\n@Component\n//@EnableAspectJAutoProxy 与<aop:aspectj-autoproxy/>配置二选一即可\npublic class NeoDataSourceApect {\n \n    public static Logger LOGGER = LoggerFactory.getLogger(NeoDataSourceApect.class);\n \n    @Around(value = \"@annotation(com.javartisan.data.day.report.multi.datasource.annotation.NeoDataSource)\")\n    public Object process(ProceedingJoinPoint pjp) throws Throwable {\n \n        String args = Arrays.toString(pjp.getArgs());\n        Signature methodName = pjp.getSignature();\n        LOGGER.info(\"methodName = {} and args = {} start proceed !\", methodName.getName(), args);\n        MDC.put(DataSourceTypes.NEO.type, DataSourceTypes.NEO.type);\n        Object returnValue = pjp.proceed();\n        LOGGER.info(\"methodName = {} and args = {}  and returnValue ={} proceed finished !\", methodName.getName(), args, returnValue);\n        MDC.remove(DataSourceTypes.NEO.type);\n        return returnValue;\n    }\n \n}\n```\n\n备注：<u>只要方法存在NeoDataSource注解就会被拦截添加一个线程局部变量到MDC中，MDC是slf4j中的一个工具类，也可以自行实现一个ThreadLocal工具。</u>\n\n\n\nSpring配置文件：\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\n       http://www.springframework.org/schema/aop\n       http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\">\n    <context:annotation-config/>\n    <context:component-scan base-package=\"com.javartisan.data.*\"/>\n    <aop:aspectj-autoproxy/>\n    <!-- 通过import方式将配置放到子文件中 -->\n    <import resource=\"spring-mybatis.xml\"/>\n</beans>\n```\n\n子配置文件：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n \n \n    <context:property-placeholder location=\"classpath:config/env.properties\" ignore-unresolvable=\"true\"/>\n    <!-- 配置数据源 -->\n    <bean name=\"mysqlDataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\"\n          init-method=\"init\" destroy-method=\"close\">\n        <property name=\"url\" value=\"${mysql.url}\"/>\n        <property name=\"username\" value=\"${mysql.username}\"/>\n        <property name=\"password\" value=\"${mysql.password}\"/>\n        <property name=\"initialSize\" value=\"1\"/>\n        <property name=\"maxActive\" value=\"5\"/>\n        <property name=\"minIdle\" value=\"0\"/>\n        <property name=\"maxWait\" value=\"60000\"/>\n    </bean>\n \n    <bean id=\"dataSource\" class=\"com.javartisan.datamill.day.report.multi.datasource.router.DataMillDataSourceRouter\">\n        <property name=\"targetDataSources\">\n            <map>\n                <entry key=\"MYSQL\" value-ref=\"mysqlDataSource\"/>\n                <entry key=\"NEO\" value-ref=\"neoDataSource\"/>\n            </map>\n        </property>\n    </bean>\n \n \n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n        <property name=\"configLocation\" value=\"classpath:config/mybatis-config.xml\"/>\n        <property name=\"mapperLocations\">\n            <list>\n                <value>classpath:com/javartisan/datamill/day/report/mapper/*.xml</value>\n            </list>\n        </property>\n    </bean>\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"basePackage\" value=\"com.javartisan.datamill.day.report.mapper\"/>\n        <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"/>\n    </bean>\n \n    <!--NEO4J DataSource-->\n    <bean name=\"neoDataSource\" class=\"org.apache.ibatis.datasource.pooled.PooledDataSource\">\n        <property name=\"driver\" value=\"org.neo4j.javartisanbc.bolt.BoltDriver\"/>\n        <property name=\"url\" value=\"${neo.url}\"/>\n        <property name=\"username\" value=\"${neo.username}\"/>\n        <property name=\"password\" value=\"${neo.password}\"/>\n    </bean>\n</beans>\n```\n\n到此就完成了多数据源的配置，接下来看一下Service实现：\n\n```java\npublic class DataComputeService{\n \n    /**\n     * \n     * 查询Neo数据源方法，使用注解即可\n     * @return\n     */\n    @Override\n    @NeoDataSource\n    public Integer getAllOpenAccountCount(String startDate) {\n            // 伪代码，表达清楚含义即可\n            return  mapper.someMethod(startDate);\n    }\n \n    /**\n     * \n     * 查询MYSQL数据源\n     * @return\n     */\n    @Override\n    public Integer getMysqlIndex(String startDate) {\n            // 伪代码，表达清楚含义即可\n            return  mapper.someMethod(startDate);\n    }\n \n}\n```\n\nService实现如上即可，这样就完成了多数据源的配置；这种方式对新引入的数据源的拓展性比较好，代码也比较清晰简单易于理解与维护。\n\n\n\n**注意：**\n\n当我们在一个Service内部内嵌套调用同类的其他Neo数据源方法需要使用：\n\n```java\n((DataComputeService) AopContext.currentProxy()).someMethod（）\n```\n\n此时需要在修改Aspectj配置：\n\n```xml\n <aop:aspectj-autoproxy expose-proxy=\"true\"/>\n```\n\nexpose-proxy是为了将代理类暴露到当前线程局部变量中，这样就可以通过线程局部变量获取代理类了。","slug":"spring-multi-datasource","published":1,"updated":"2019-07-02T13:42:50.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxng5u7n000chz2d0899fe2r","content":"<ul>\n<li><p>场景</p>\n<p>业务需要，不同类型数据分布在不同集群以提高查询性能，为此系统存在多个数据源。数据源实现方式如下。</p>\n<a id=\"more\"></a>\n\n\n</li>\n</ul>\n<ul>\n<li><p>解决方案  </p>\n<p><strong>方案1 ：</strong></p>\n<p> 静态配置多个数据源，按需使用，不具备动态调整能力。示例代码：</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.javartisan.data.*\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:config/env.properties\"</span> <span class=\"attr\">ignore-unresolvable</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置数据源1“ --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">init-method</span>=<span class=\"string\">\"init\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"initialSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxActive\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据源1的SessionFactory --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:config/mybatis-config.xml\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath:com/javartisan/data/day/report/mapper/*.xml<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!-- 数据源1的MapperScannerConfigurer --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.javartisan.data.day.report.mapper\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--数据源2：Spark DataSource --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sparkDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">init-method</span>=<span class=\"string\">\"init\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;spark.mysql.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;spark.mysql.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;spark.mysql.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"initialSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxActive\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxWait\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"60000\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"validationQuery\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;validationQuery&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testOnBorrow\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testOnReturn\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testWhileIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"timeBetweenEvictionRunsMillis\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"60000\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minEvictableIdleTimeMillis\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"25200000\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"removeAbandoned\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"removeAbandonedTimeout\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1800\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logAbandoned\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"filters\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"mergeStat\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据源2的SessionFactory --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sparkSqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"sparkDataSource\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:config/mybatis-config.xml\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath:com/javartisan/data/week/report/mapper/*.xml<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 数据源2的MapperScannerConfigurer --&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.javartisan.data.week.report.mapper\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sparkSqlSessionFactory\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>主要是根据Mapper的文件包路径区分数据源,Mapper包路径如下：com.javartisan.data.day.report.mapper与com.javartisan.data.week.report.mapper; 分别表示日报与周报的数据源（业务原因，日报与周报的数据源分布在两个不同MYSQL环境，因此需要多数据源）；这种多数据源就是根据Mapper文件的静态分布规则进行构建的多数据源。</p>\n</li>\n</ol>\n<p>​        <strong>方案2：</strong></p>\n<p>​        Aop实现的多数据源，在查询期间根据数据分布规则进行动态选择dataSource进行查询。具体细节如下：<br>​        这种实现是根据业务显示情况有关，业务数据根据Hash值进行分布式存储，因此在业务实现时候，我们根据           规则自行实现了一套数据库连接池；在基于自行实现连接池之上，我们结合Aop拦截查询语句（定义数据源注        解），根据规则得到数据源所在的某个节点，然后在连接池中拿到指定节点的Connection进行查询。虽然比        方案1优雅并且拓展性好，但是代码相对比较复杂，维护成本高。最好的方案还是借力而行！借力而行就是使        用Spring框架支持的组件拓展，那就是如下方案3。</p>\n<p>​        </p>\n<p>​        <strong>方案3：</strong></p>\n<p>​        AbstractRoutingDataSource多数据源的拓展类,AbstractRoutingDataSource是Spring为了多数据源拓展开放        的抽象类；继承结构：</p>\n<p>​        <img src=\"/2019/06/29/spring-multi-datasource/mds.png\" alt></p>\n<p>​        Spring一个具体实现：IsolationLevelDataSourceRouter，基于事务的隔离级别选择DataSource；原理其实很简单，启动时候将一些DataSource以key/value形似存储到Map&lt;数据源规则的Key，DataSource&gt;，然后获取DataSource时候按照规则的Key获取即可。也就是父类中的抽象方法；关键抽象方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Determine the current lookup key. This will typically be</span></span><br><span class=\"line\"><span class=\"comment\"> * implemented to check a thread-bound transaction context.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Allows for arbitrary keys. The returned key needs</span></span><br><span class=\"line\"><span class=\"comment\"> * to match the stored lookup key type, as resolved by the</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #resolveSpecifiedLookupKey&#125; method.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Object <span class=\"title\">determineCurrentLookupKey</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的实现时候，可以将我们的一些规则借助线程局部变量传入到其中进行一些规则计算，便于选择合适的数据源。首先简单描述一下业务场景：起初，系统的所有数据都是在MySQL中，因此不存在多数据源问题，但是后来由于架构改造；变化为如下：在原有的MYSQL关系数据源之外，又添加了一种是图数据库Neo，将原来存储在MySQL中的账户数据改造存储到图数据库中；这也就是所谓的变为两种数据源；由于数据源的变化，下游查询就会引起变化，而我的需求是这样：每天需要根据MySQL中的业务数据计算业务相关指标同时还要计算一些账户指标，例如每天新注册用户数等。因此就需要在原有基础之上进行扩展，因此改用Spring支持的多数据源。实例代码如下；数据源路由器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataMillDataSourceRouter</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">determineCurrentLookupKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String dataSourceType = MDC.get(DataSourceTypes.NEO.type);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.equals(dataSourceType, DataSourceTypes.NEO.type)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// NEO DATASOURCE</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> DataSourceTypes.NEO.type;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DataSourceTypes.MYSQL.type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数据源类型枚举值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> DataSourceTypes &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    NEO(<span class=\"string\">\"NEO\"</span>), MYSQL(<span class=\"string\">\"MYSQL\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String type;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DataSourceTypes</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>NEO数据源注解（默认没有注解则数据源为MySQL,也可以借助路由器指定默认数据源）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> NeoDataSource &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进行数据源选择的切面类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.Signature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.MDC;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"comment\">//@EnableAspectJAutoProxy 与&lt;aop:aspectj-autoproxy/&gt;配置二选一即可</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NeoDataSourceApect</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Logger LOGGER = LoggerFactory.getLogger(NeoDataSourceApect.class);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(value = <span class=\"string\">\"@annotation(com.javartisan.data.day.report.multi.datasource.annotation.NeoDataSource)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">process</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        String args = Arrays.toString(pjp.getArgs());</span><br><span class=\"line\">        Signature methodName = pjp.getSignature();</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">\"methodName = &#123;&#125; and args = &#123;&#125; start proceed !\"</span>, methodName.getName(), args);</span><br><span class=\"line\">        MDC.put(DataSourceTypes.NEO.type, DataSourceTypes.NEO.type);</span><br><span class=\"line\">        Object returnValue = pjp.proceed();</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">\"methodName = &#123;&#125; and args = &#123;&#125;  and returnValue =&#123;&#125; proceed finished !\"</span>, methodName.getName(), args, returnValue);</span><br><span class=\"line\">        MDC.remove(DataSourceTypes.NEO.type);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>备注：<u>只要方法存在NeoDataSource注解就会被拦截添加一个线程局部变量到MDC中，MDC是slf4j中的一个工具类，也可以自行实现一个ThreadLocal工具。</u></p>\n<p>Spring配置文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:annotation-config</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.javartisan.data.*\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 通过import方式将配置放到子文件中 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"spring-mybatis.xml\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>子配置文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:config/env.properties\"</span> <span class=\"attr\">ignore-unresolvable</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置数据源 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mysqlDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">init-method</span>=<span class=\"string\">\"init\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"initialSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxActive\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxWait\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"60000\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.javartisan.datamill.day.report.multi.datasource.router.DataMillDataSourceRouter\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"targetDataSources\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"MYSQL\"</span> <span class=\"attr\">value-ref</span>=<span class=\"string\">\"mysqlDataSource\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"NEO\"</span> <span class=\"attr\">value-ref</span>=<span class=\"string\">\"neoDataSource\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:config/mybatis-config.xml\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath:com/javartisan/datamill/day/report/mapper/*.xml<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.javartisan.datamill.day.report.mapper\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--NEO4J DataSource--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.ibatis.datasource.pooled.PooledDataSource\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.neo4j.javartisanbc.bolt.BoltDriver\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>到此就完成了多数据源的配置，接下来看一下Service实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataComputeService</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 查询Neo数据源方法，使用注解即可</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@NeoDataSource</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAllOpenAccountCount</span><span class=\"params\">(String startDate)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 伪代码，表达清楚含义即可</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>  mapper.someMethod(startDate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 查询MYSQL数据源</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getMysqlIndex</span><span class=\"params\">(String startDate)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 伪代码，表达清楚含义即可</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>  mapper.someMethod(startDate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Service实现如上即可，这样就完成了多数据源的配置；这种方式对新引入的数据源的拓展性比较好，代码也比较清晰简单易于理解与维护。</p>\n<p><strong>注意：</strong></p>\n<p>当我们在一个Service内部内嵌套调用同类的其他Neo数据源方法需要使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">((DataComputeService) AopContext.currentProxy()).someMethod（）</span><br></pre></td></tr></table></figure>\n\n<p>此时需要在修改Aspectj配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> <span class=\"attr\">expose-proxy</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>expose-proxy是为了将代理类暴露到当前线程局部变量中，这样就可以通过线程局部变量获取代理类了。</p>\n","site":{"data":{}},"excerpt":"<ul>\n<li><p>场景</p>\n<p>业务需要，不同类型数据分布在不同集群以提高查询性能，为此系统存在多个数据源。数据源实现方式如下。</p></li></ul>","more":"\n\n<ul>\n<li><p>解决方案  </p>\n<p><strong>方案1 ：</strong></p>\n<p> 静态配置多个数据源，按需使用，不具备动态调整能力。示例代码：</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.javartisan.data.*\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:config/env.properties\"</span> <span class=\"attr\">ignore-unresolvable</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置数据源1“ --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">init-method</span>=<span class=\"string\">\"init\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"initialSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxActive\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据源1的SessionFactory --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:config/mybatis-config.xml\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath:com/javartisan/data/day/report/mapper/*.xml<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!-- 数据源1的MapperScannerConfigurer --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.javartisan.data.day.report.mapper\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--数据源2：Spark DataSource --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sparkDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">init-method</span>=<span class=\"string\">\"init\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;spark.mysql.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;spark.mysql.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;spark.mysql.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"initialSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxActive\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxWait\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"60000\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"validationQuery\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;validationQuery&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testOnBorrow\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testOnReturn\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testWhileIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"timeBetweenEvictionRunsMillis\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"60000\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minEvictableIdleTimeMillis\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"25200000\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"removeAbandoned\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"removeAbandonedTimeout\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1800\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logAbandoned\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"filters\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"mergeStat\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据源2的SessionFactory --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sparkSqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"sparkDataSource\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:config/mybatis-config.xml\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath:com/javartisan/data/week/report/mapper/*.xml<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 数据源2的MapperScannerConfigurer --&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.javartisan.data.week.report.mapper\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sparkSqlSessionFactory\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>主要是根据Mapper的文件包路径区分数据源,Mapper包路径如下：com.javartisan.data.day.report.mapper与com.javartisan.data.week.report.mapper; 分别表示日报与周报的数据源（业务原因，日报与周报的数据源分布在两个不同MYSQL环境，因此需要多数据源）；这种多数据源就是根据Mapper文件的静态分布规则进行构建的多数据源。</p>\n</li>\n</ol>\n<p>​        <strong>方案2：</strong></p>\n<p>​        Aop实现的多数据源，在查询期间根据数据分布规则进行动态选择dataSource进行查询。具体细节如下：<br>​        这种实现是根据业务显示情况有关，业务数据根据Hash值进行分布式存储，因此在业务实现时候，我们根据           规则自行实现了一套数据库连接池；在基于自行实现连接池之上，我们结合Aop拦截查询语句（定义数据源注        解），根据规则得到数据源所在的某个节点，然后在连接池中拿到指定节点的Connection进行查询。虽然比        方案1优雅并且拓展性好，但是代码相对比较复杂，维护成本高。最好的方案还是借力而行！借力而行就是使        用Spring框架支持的组件拓展，那就是如下方案3。</p>\n<p>​        </p>\n<p>​        <strong>方案3：</strong></p>\n<p>​        AbstractRoutingDataSource多数据源的拓展类,AbstractRoutingDataSource是Spring为了多数据源拓展开放        的抽象类；继承结构：</p>\n<p>​        <img src=\"/2019/06/29/spring-multi-datasource/mds.png\" alt></p>\n<p>​        Spring一个具体实现：IsolationLevelDataSourceRouter，基于事务的隔离级别选择DataSource；原理其实很简单，启动时候将一些DataSource以key/value形似存储到Map&lt;数据源规则的Key，DataSource&gt;，然后获取DataSource时候按照规则的Key获取即可。也就是父类中的抽象方法；关键抽象方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Determine the current lookup key. This will typically be</span></span><br><span class=\"line\"><span class=\"comment\"> * implemented to check a thread-bound transaction context.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Allows for arbitrary keys. The returned key needs</span></span><br><span class=\"line\"><span class=\"comment\"> * to match the stored lookup key type, as resolved by the</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #resolveSpecifiedLookupKey&#125; method.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Object <span class=\"title\">determineCurrentLookupKey</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的实现时候，可以将我们的一些规则借助线程局部变量传入到其中进行一些规则计算，便于选择合适的数据源。首先简单描述一下业务场景：起初，系统的所有数据都是在MySQL中，因此不存在多数据源问题，但是后来由于架构改造；变化为如下：在原有的MYSQL关系数据源之外，又添加了一种是图数据库Neo，将原来存储在MySQL中的账户数据改造存储到图数据库中；这也就是所谓的变为两种数据源；由于数据源的变化，下游查询就会引起变化，而我的需求是这样：每天需要根据MySQL中的业务数据计算业务相关指标同时还要计算一些账户指标，例如每天新注册用户数等。因此就需要在原有基础之上进行扩展，因此改用Spring支持的多数据源。实例代码如下；数据源路由器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataMillDataSourceRouter</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">determineCurrentLookupKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String dataSourceType = MDC.get(DataSourceTypes.NEO.type);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.equals(dataSourceType, DataSourceTypes.NEO.type)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// NEO DATASOURCE</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> DataSourceTypes.NEO.type;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DataSourceTypes.MYSQL.type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数据源类型枚举值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> DataSourceTypes &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    NEO(<span class=\"string\">\"NEO\"</span>), MYSQL(<span class=\"string\">\"MYSQL\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String type;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DataSourceTypes</span><span class=\"params\">(String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>NEO数据源注解（默认没有注解则数据源为MySQL,也可以借助路由器指定默认数据源）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> NeoDataSource &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进行数据源选择的切面类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.Signature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.MDC;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"comment\">//@EnableAspectJAutoProxy 与&lt;aop:aspectj-autoproxy/&gt;配置二选一即可</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NeoDataSourceApect</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Logger LOGGER = LoggerFactory.getLogger(NeoDataSourceApect.class);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(value = <span class=\"string\">\"@annotation(com.javartisan.data.day.report.multi.datasource.annotation.NeoDataSource)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">process</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        String args = Arrays.toString(pjp.getArgs());</span><br><span class=\"line\">        Signature methodName = pjp.getSignature();</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">\"methodName = &#123;&#125; and args = &#123;&#125; start proceed !\"</span>, methodName.getName(), args);</span><br><span class=\"line\">        MDC.put(DataSourceTypes.NEO.type, DataSourceTypes.NEO.type);</span><br><span class=\"line\">        Object returnValue = pjp.proceed();</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">\"methodName = &#123;&#125; and args = &#123;&#125;  and returnValue =&#123;&#125; proceed finished !\"</span>, methodName.getName(), args, returnValue);</span><br><span class=\"line\">        MDC.remove(DataSourceTypes.NEO.type);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>备注：<u>只要方法存在NeoDataSource注解就会被拦截添加一个线程局部变量到MDC中，MDC是slf4j中的一个工具类，也可以自行实现一个ThreadLocal工具。</u></p>\n<p>Spring配置文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:annotation-config</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.javartisan.data.*\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 通过import方式将配置放到子文件中 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"spring-mybatis.xml\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>子配置文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:config/env.properties\"</span> <span class=\"attr\">ignore-unresolvable</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置数据源 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mysqlDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">init-method</span>=<span class=\"string\">\"init\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;mysql.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"initialSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxActive\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxWait\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"60000\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.javartisan.datamill.day.report.multi.datasource.router.DataMillDataSourceRouter\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"targetDataSources\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"MYSQL\"</span> <span class=\"attr\">value-ref</span>=<span class=\"string\">\"mysqlDataSource\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">\"NEO\"</span> <span class=\"attr\">value-ref</span>=<span class=\"string\">\"neoDataSource\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:config/mybatis-config.xml\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath:com/javartisan/datamill/day/report/mapper/*.xml<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.javartisan.datamill.day.report.mapper\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--NEO4J DataSource--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"neoDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.ibatis.datasource.pooled.PooledDataSource\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.neo4j.javartisanbc.bolt.BoltDriver\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;neo.password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>到此就完成了多数据源的配置，接下来看一下Service实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataComputeService</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 查询Neo数据源方法，使用注解即可</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@NeoDataSource</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAllOpenAccountCount</span><span class=\"params\">(String startDate)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 伪代码，表达清楚含义即可</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>  mapper.someMethod(startDate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 查询MYSQL数据源</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getMysqlIndex</span><span class=\"params\">(String startDate)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 伪代码，表达清楚含义即可</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>  mapper.someMethod(startDate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Service实现如上即可，这样就完成了多数据源的配置；这种方式对新引入的数据源的拓展性比较好，代码也比较清晰简单易于理解与维护。</p>\n<p><strong>注意：</strong></p>\n<p>当我们在一个Service内部内嵌套调用同类的其他Neo数据源方法需要使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">((DataComputeService) AopContext.currentProxy()).someMethod（）</span><br></pre></td></tr></table></figure>\n\n<p>此时需要在修改Aspectj配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> <span class=\"attr\">expose-proxy</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>expose-proxy是为了将代理类暴露到当前线程局部变量中，这样就可以通过线程局部变量获取代理类了。</p>"}],"PostAsset":[{"_id":"source/_posts/hello-world/lzs7.png","slug":"lzs7.png","post":"cjxng5u7d0001hz2detl0jtyg","modified":0,"renderable":0},{"_id":"source/_posts/java-index/enum_code.png","slug":"enum_code.png","post":"cjxng5u7h0003hz2dhfm3hqua","modified":0,"renderable":0},{"_id":"source/_posts/spring-datasouce-config/neo-datasouce-error.png","slug":"neo-datasouce-error.png","post":"cjxng5u7m000bhz2dtdofupbt","modified":0,"renderable":0},{"_id":"source/_posts/spring-multi-datasource/mds.png","slug":"mds.png","post":"cjxng5u7n000chz2d0899fe2r","modified":0,"renderable":0},{"_id":"source/_posts/java-index/enum_method.png","slug":"enum_method.png","post":"cjxng5u7h0003hz2dhfm3hqua","modified":0,"renderable":0},{"_id":"source/_posts/hello-world/lzs.png","slug":"lzs.png","post":"cjxng5u7d0001hz2detl0jtyg","modified":0,"renderable":0},{"_id":"source/_posts/hello-world/lzs2.png","slug":"lzs2.png","post":"cjxng5u7d0001hz2detl0jtyg","modified":0,"renderable":0},{"_id":"source/_posts/hello-world/lzs3.png","slug":"lzs3.png","post":"cjxng5u7d0001hz2detl0jtyg","modified":0,"renderable":0},{"_id":"source/_posts/hello-world/lzs4.png","slug":"lzs4.png","post":"cjxng5u7d0001hz2detl0jtyg","modified":0,"renderable":0},{"_id":"source/_posts/hello-world/lzs5.png","slug":"lzs5.png","post":"cjxng5u7d0001hz2detl0jtyg","modified":0,"renderable":0},{"_id":"source/_posts/hello-world/lzs6.png","slug":"lzs6.png","post":"cjxng5u7d0001hz2detl0jtyg","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjxng5u790000hz2dobhpcyn9","category_id":"cjxng5u7f0002hz2dj9jfc8gp","_id":"cjxng5u7m0009hz2d2zungdtx"},{"post_id":"cjxng5u7d0001hz2detl0jtyg","category_id":"cjxng5u7k0006hz2doasc2kqk","_id":"cjxng5u7o000dhz2ds94xsgn0"},{"post_id":"cjxng5u7h0003hz2dhfm3hqua","category_id":"cjxng5u7m000ahz2d9b7g2a5a","_id":"cjxng5u7o000fhz2dfpa6sve6"},{"post_id":"cjxng5u7i0004hz2dv73dku49","category_id":"cjxng5u7o000ehz2d3ohdtdot","_id":"cjxng5u7p000hhz2dpgt550d6"},{"post_id":"cjxng5u7j0005hz2dilxi1iap","category_id":"cjxng5u7o000ghz2dup1mabbm","_id":"cjxng5u7p000jhz2dnfg15fhe"},{"post_id":"cjxng5u7k0007hz2dyjyfqbz7","category_id":"cjxng5u7p000ihz2dsej2lbnp","_id":"cjxng5u7r000mhz2dy5q6aogx"},{"post_id":"cjxng5u7l0008hz2dj5i44esr","category_id":"cjxng5u7p000ihz2dsej2lbnp","_id":"cjxng5u7r000nhz2dqdllsy14"},{"post_id":"cjxng5u7m000bhz2dtdofupbt","category_id":"cjxng5u7q000lhz2d0lf8g4bb","_id":"cjxng5u7s000phz2dg8w4vwm7"},{"post_id":"cjxng5u7n000chz2d0899fe2r","category_id":"cjxng5u7q000lhz2d0lf8g4bb","_id":"cjxng5u7s000qhz2dzh8t9q2z"}],"PostTag":[],"Tag":[]}}